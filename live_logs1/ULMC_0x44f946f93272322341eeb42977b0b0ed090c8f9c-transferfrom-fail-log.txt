This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 07:31:37,916 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 07:31:37,917 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 07:31:37,928 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 07:31:37,929 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 07:31:37,929 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 07:31:37,930 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 07:31:37,933 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 07:31:37,934 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 07:31:37,935 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 07:31:37,935 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 07:31:37,936 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 07:31:37,936 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 07:31:37,937 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 07:31:37,938 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 07:31:37,939 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 07:31:37,939 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 07:31:37,940 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 07:31:37,942 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 07:31:37,943 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 07:31:37,944 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 07:31:37,944 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 07:31:37,946 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 07:31:37,946 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 07:31:37,946 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 07:31:37,947 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 07:31:37,947 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 07:31:37,948 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 07:31:37,948 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 07:31:37,948 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 07:31:37,949 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 07:31:37,949 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 07:31:37,950 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 07:31:37,950 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 07:31:37,951 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 07:31:37,951 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 07:31:37,951 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 07:31:37,952 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 07:31:37,952 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 07:31:37,953 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 07:31:37,953 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 07:31:37,953 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 07:31:37,961 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 07:31:37,961 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 07:31:37,962 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 07:31:37,962 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 07:31:37,962 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 07:31:37,962 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 07:31:37,963 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 07:31:37,963 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 07:31:37,963 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 07:31:37,964 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 07:31:37,964 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 07:31:37,965 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 07:31:37,993 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 07:31:38,006 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 07:31:38,009 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 07:31:38,010 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 07:31:38,010 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 07:31:38,011 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl
[2020-11-25 07:31:38,011 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl'
[2020-11-25 07:31:38,104 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 07:31:38,105 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 07:31:38,106 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 07:31:38,106 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 07:31:38,106 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 07:31:38,122 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,124 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,156 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,157 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,179 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,191 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,198 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,207 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 07:31:38,208 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 07:31:38,208 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 07:31:38,210 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 07:31:38,214 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/1) ...
[2020-11-25 07:31:38,231 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:31:38,237 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:31:38,244 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:31:38,251 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s325!=recipient_s325 && ( ( amount_s325>_balances_ERC20[this][sender_s325] || amount_s325>_allowances_ERC20[this][sender_s325][msg.sender] ) || ( _balances_ERC20[this][recipient_s325] + amount_s325 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s325>=0 ) && amount_s325<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s325]>=0 ) && _balances_ERC20[this][recipient_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s325]>=0 ) && _balances_ERC20[this][sender_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s325][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s325][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 07:31:38,256 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 07:31:38,257 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 07:31:38,264 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:31:38 PropertyContainer
[2020-11-25 07:31:38,264 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 07:31:38,265 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 07:31:38,265 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 07:31:38,265 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 07:31:38,266 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/2) ...
[2020-11-25 07:31:38,266 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 07:31:38,266 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 07:31:38,279 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:31:38" (2/2) ...
[2020-11-25 07:31:38,279 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 07:31:38,280 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 07:31:38,280 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 07:31:38,280 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 07:31:38,280 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/2) ...
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 07:31:38,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,333 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 07:31:38,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:31:38,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 07:31:38,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 07:31:38,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 07:31:38,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 07:31:38,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 07:31:38,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 07:31:38,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 07:31:38,335 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:31:38,336 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:31:38,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC_NoBaseCtor__success
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC
[2020-11-25 07:31:38,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 07:31:38,337 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ULMC
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 07:31:38,338 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 07:31:38,339 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:31:38,340 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 07:31:38,341 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC_NoBaseCtor__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC__success
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure ULMC_ULMC__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 07:31:38,342 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 07:31:38,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 07:31:38,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 07:31:38,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:31:38,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 07:31:38,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 07:31:38,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC_NoBaseCtor__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC_NoBaseCtor__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC__fail
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULMC_ULMC__success
[2020-11-25 07:31:38,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ULMC
[2020-11-25 07:31:38,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 07:31:38,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 07:31:38,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 07:31:38,668 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:31:38,669 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:31:39,040 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 07:31:39,040 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 07:31:39,042 INFO  L202        PluginConnector]: Adding new model ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:31:39 BoogieIcfgContainer
[2020-11-25 07:31:39,042 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:31:38" (2/2) ...
[2020-11-25 07:31:39,042 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 07:31:39,043 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@314ea411 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:31:39, skipping insertion in model container
[2020-11-25 07:31:39,043 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 07:31:39,043 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 07:31:39,043 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 07:31:39,044 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 07:31:39,045 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/3) ...
[2020-11-25 07:31:39,045 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@53ecb852 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:31:39, skipping insertion in model container
[2020-11-25 07:31:39,045 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:31:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 07:31:39,083 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:31:39 NWAContainer
[2020-11-25 07:31:39,083 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 07:31:39,083 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 07:31:39,083 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 07:31:39,084 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 07:31:39,085 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:31:39" (3/4) ...
[2020-11-25 07:31:39,086 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@700ac148 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:31:39, skipping insertion in model container
[2020-11-25 07:31:39,086 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:31:39" (4/4) ...
[2020-11-25 07:31:39,089 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 07:31:39,093 INFO  L110   BuchiProductObserver]: Initial RCFG 1272 locations, 1749 edges
[2020-11-25 07:31:39,093 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 07:31:39,105 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 07:31:40,483 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 07:31:40,488 INFO  L110   BuchiProductObserver]: BuchiProgram size 3180 locations, 5731 edges
[2020-11-25 07:31:40,489 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:31:40 BoogieIcfgContainer
[2020-11-25 07:31:40,489 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 07:31:40,489 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 07:31:40,489 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 07:31:40,491 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 07:31:40,491 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:31:40" (1/1) ...
[2020-11-25 07:31:40,578 INFO  L313           BlockEncoder]: Initial Icfg 3180 locations, 5731 edges
[2020-11-25 07:31:40,578 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 07:31:40,579 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 07:31:40,579 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 07:31:40,580 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 07:31:40,591 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 13 locations because of local infeasibility
[2020-11-25 07:31:40,601 INFO  L70        RemoveSinkStates]: Removed 94 edges and 56 locations by removing sink states
[2020-11-25 07:31:40,612 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 07:31:40,618 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 07:31:40,621 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 07:31:40,622 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 07:31:40,627 INFO  L313           BlockEncoder]: Encoded RCFG 3093 locations, 5509 edges
[2020-11-25 07:31:40,628 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:31:40 BasicIcfg
[2020-11-25 07:31:40,629 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 07:31:40,629 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 07:31:40,629 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 07:31:40,631 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 07:31:40,632 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,632 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:31:38" (1/6) ...
[2020-11-25 07:31:40,634 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@61efb1a4 and model type ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:31:40, skipping insertion in model container
[2020-11-25 07:31:40,634 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,634 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:31:38" (2/6) ...
[2020-11-25 07:31:40,634 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@61efb1a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:31:40, skipping insertion in model container
[2020-11-25 07:31:40,634 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,634 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:31:39" (3/6) ...
[2020-11-25 07:31:40,634 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@61efb1a4 and model type ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:31:40, skipping insertion in model container
[2020-11-25 07:31:40,634 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,634 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:31:39" (4/6) ...
[2020-11-25 07:31:40,635 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@61efb1a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:31:40, skipping insertion in model container
[2020-11-25 07:31:40,635 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,635 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:31:40" (5/6) ...
[2020-11-25 07:31:40,635 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@61efb1a4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 07:31:40, skipping insertion in model container
[2020-11-25 07:31:40,635 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:31:40,635 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:31:40" (6/6) ...
[2020-11-25 07:31:40,637 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ULMC_0x44f946f93272322341eeb42977b0b0ed090c8f9c_transferfrom-fail.bpl_BEv2
[2020-11-25 07:31:40,679 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 07:31:40,679 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 07:31:40,679 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 07:31:40,680 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 07:31:40,680 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 07:31:40,680 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 07:31:40,680 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 07:31:40,680 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 07:31:40,680 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 07:31:40,726 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3093 states.
[2020-11-25 07:31:40,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:40,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:40,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:40,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:40,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:40,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 07:31:40,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3093 states.
[2020-11-25 07:31:40,815 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:40,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:40,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:40,817 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:40,818 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND TRUE   revert
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND TRUE   choice == 11
[L3603]              gas := gas - 21000;
[L3604]  COND FALSE  !(gas >= 0)
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:40,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:40,835 INFO  L82        PathProgramCache]: Analyzing trace with hash 607572355, now seen corresponding path program 1 times
[2020-11-25 07:31:40,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:40,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:40,897 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:31:40,899 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:40,899 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:31:40,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:41,039 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:31:41,039 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:31:41,041 INFO  L87              Difference]: Start difference. First operand 3093 states. Second operand 4 states.
[2020-11-25 07:31:41,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:41,288 INFO  L93              Difference]: Finished difference Result 1745 states and 2010 transitions.
[2020-11-25 07:31:41,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:31:41,290 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1745 states and 2010 transitions.
[2020-11-25 07:31:41,298 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:41,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1745 states to 1745 states and 2010 transitions.
[2020-11-25 07:31:41,311 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 07:31:41,313 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 573
[2020-11-25 07:31:41,313 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1745 states and 2010 transitions.
[2020-11-25 07:31:41,318 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:41,318 INFO  L728         BuchiCegarLoop]: Abstraction has 1745 states and 2010 transitions.
[2020-11-25 07:31:41,334 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1745 states and 2010 transitions.
[2020-11-25 07:31:41,366 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1745 to 1745.
[2020-11-25 07:31:41,367 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1745 states.
[2020-11-25 07:31:41,370 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1745 states to 1745 states and 2010 transitions.
[2020-11-25 07:31:41,370 INFO  L751         BuchiCegarLoop]: Abstraction has 1745 states and 2010 transitions.
[2020-11-25 07:31:41,371 INFO  L631         BuchiCegarLoop]: Abstraction has 1745 states and 2010 transitions.
[2020-11-25 07:31:41,371 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 07:31:41,371 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1745 states and 2010 transitions.
[2020-11-25 07:31:41,376 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:41,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:41,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:41,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:41,377 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND TRUE   revert
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:41,381 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:41,381 INFO  L82        PathProgramCache]: Analyzing trace with hash 1454323619, now seen corresponding path program 1 times
[2020-11-25 07:31:41,382 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:41,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:41,408 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:31:41,409 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:41,409 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:31:41,410 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:41,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:31:41,410 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:31:41,410 INFO  L87              Difference]: Start difference. First operand 1745 states and 2010 transitions. cyclomatic complexity: 267 Second operand 3 states.
[2020-11-25 07:31:41,465 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:41,465 INFO  L93              Difference]: Finished difference Result 2338 states and 2721 transitions.
[2020-11-25 07:31:41,465 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:31:41,465 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2338 states and 2721 transitions.
[2020-11-25 07:31:41,474 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2338 states to 2338 states and 2721 transitions.
[2020-11-25 07:31:41,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 746
[2020-11-25 07:31:41,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 746
[2020-11-25 07:31:41,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2338 states and 2721 transitions.
[2020-11-25 07:31:41,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:41,488 INFO  L728         BuchiCegarLoop]: Abstraction has 2338 states and 2721 transitions.
[2020-11-25 07:31:41,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2338 states and 2721 transitions.
[2020-11-25 07:31:41,510 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2338 to 2046.
[2020-11-25 07:31:41,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2046 states.
[2020-11-25 07:31:41,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2046 states to 2046 states and 2372 transitions.
[2020-11-25 07:31:41,514 INFO  L751         BuchiCegarLoop]: Abstraction has 2046 states and 2372 transitions.
[2020-11-25 07:31:41,514 INFO  L631         BuchiCegarLoop]: Abstraction has 2046 states and 2372 transitions.
[2020-11-25 07:31:41,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 07:31:41,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2046 states and 2372 transitions.
[2020-11-25 07:31:41,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:41,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:41,520 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:41,520 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND TRUE   !(account_s478 != null)
[L2015]              revert := true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:41,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:41,524 INFO  L82        PathProgramCache]: Analyzing trace with hash -1223676720, now seen corresponding path program 1 times
[2020-11-25 07:31:41,524 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:41,535 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:41,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 07:31:41,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:31:41,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 07:31:41,576 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:41,576 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 07:31:41,576 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 07:31:41,576 INFO  L87              Difference]: Start difference. First operand 2046 states and 2372 transitions. cyclomatic complexity: 328 Second operand 7 states.
[2020-11-25 07:31:41,609 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:41,609 INFO  L93              Difference]: Finished difference Result 2054 states and 2379 transitions.
[2020-11-25 07:31:41,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:31:41,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2054 states and 2379 transitions.
[2020-11-25 07:31:41,616 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2054 states to 2045 states and 2370 transitions.
[2020-11-25 07:31:41,623 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 684
[2020-11-25 07:31:41,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 684
[2020-11-25 07:31:41,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2045 states and 2370 transitions.
[2020-11-25 07:31:41,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:41,626 INFO  L728         BuchiCegarLoop]: Abstraction has 2045 states and 2370 transitions.
[2020-11-25 07:31:41,628 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2045 states and 2370 transitions.
[2020-11-25 07:31:41,642 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2045 to 2045.
[2020-11-25 07:31:41,642 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2045 states.
[2020-11-25 07:31:41,645 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2045 states to 2045 states and 2370 transitions.
[2020-11-25 07:31:41,645 INFO  L751         BuchiCegarLoop]: Abstraction has 2045 states and 2370 transitions.
[2020-11-25 07:31:41,645 INFO  L631         BuchiCegarLoop]: Abstraction has 2045 states and 2370 transitions.
[2020-11-25 07:31:41,645 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 07:31:41,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2045 states and 2370 transitions.
[2020-11-25 07:31:41,649 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,649 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:41,649 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:41,651 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:41,651 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND TRUE   !(c_s26 >= a_s26)
[L1448]              revert := true;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND TRUE   revert
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND TRUE   !(sender_s435 != null)
[L1959]              revert := true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND TRUE   revert
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:41,654 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:41,654 INFO  L82        PathProgramCache]: Analyzing trace with hash 220155792, now seen corresponding path program 1 times
[2020-11-25 07:31:41,655 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:41,663 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:41,697 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 07:31:41,697 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:41,697 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:31:41,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:41,698 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:31:41,698 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:31:41,698 INFO  L87              Difference]: Start difference. First operand 2045 states and 2370 transitions. cyclomatic complexity: 327 Second operand 3 states.
[2020-11-25 07:31:41,732 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:41,732 INFO  L93              Difference]: Finished difference Result 2338 states and 2638 transitions.
[2020-11-25 07:31:41,732 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:31:41,732 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2338 states and 2638 transitions.
[2020-11-25 07:31:41,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2338 states to 2165 states and 2434 transitions.
[2020-11-25 07:31:41,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 07:31:41,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 07:31:41,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2165 states and 2434 transitions.
[2020-11-25 07:31:41,750 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:41,751 INFO  L728         BuchiCegarLoop]: Abstraction has 2165 states and 2434 transitions.
[2020-11-25 07:31:41,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2165 states and 2434 transitions.
[2020-11-25 07:31:41,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2165 to 1928.
[2020-11-25 07:31:41,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1928 states.
[2020-11-25 07:31:41,771 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1928 states to 1928 states and 2140 transitions.
[2020-11-25 07:31:41,771 INFO  L751         BuchiCegarLoop]: Abstraction has 1928 states and 2140 transitions.
[2020-11-25 07:31:41,771 INFO  L631         BuchiCegarLoop]: Abstraction has 1928 states and 2140 transitions.
[2020-11-25 07:31:41,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 07:31:41,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1928 states and 2140 transitions.
[2020-11-25 07:31:41,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:41,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:41,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:41,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:41,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:41,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:41,782 INFO  L82        PathProgramCache]: Analyzing trace with hash 2027003396, now seen corresponding path program 1 times
[2020-11-25 07:31:41,782 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:41,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:41,972 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 07:31:41,972 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:41,972 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 07:31:41,973 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:41,973 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 07:31:41,973 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 07:31:41,973 INFO  L87              Difference]: Start difference. First operand 1928 states and 2140 transitions. cyclomatic complexity: 214 Second operand 14 states.
[2020-11-25 07:31:43,070 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:43,071 INFO  L93              Difference]: Finished difference Result 2012 states and 2236 transitions.
[2020-11-25 07:31:43,071 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 07:31:43,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2012 states and 2236 transitions.
[2020-11-25 07:31:43,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 07:31:43,081 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2012 states to 2012 states and 2236 transitions.
[2020-11-25 07:31:43,081 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 673
[2020-11-25 07:31:43,081 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 673
[2020-11-25 07:31:43,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2012 states and 2236 transitions.
[2020-11-25 07:31:43,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:43,083 INFO  L728         BuchiCegarLoop]: Abstraction has 2012 states and 2236 transitions.
[2020-11-25 07:31:43,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2012 states and 2236 transitions.
[2020-11-25 07:31:43,099 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2012 to 1862.
[2020-11-25 07:31:43,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1862 states.
[2020-11-25 07:31:43,101 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1862 states to 1862 states and 2055 transitions.
[2020-11-25 07:31:43,101 INFO  L751         BuchiCegarLoop]: Abstraction has 1862 states and 2055 transitions.
[2020-11-25 07:31:43,101 INFO  L631         BuchiCegarLoop]: Abstraction has 1862 states and 2055 transitions.
[2020-11-25 07:31:43,101 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 07:31:43,102 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1862 states and 2055 transitions.
[2020-11-25 07:31:43,104 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:43,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:43,104 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:43,106 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:43,106 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND TRUE   choice == 7
[L3628]              gas := gas - 21000;
[L3629]  COND TRUE   gas >= 0
[L3630]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]              assume msgvalue_MSG == 0;
[L3632]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L478]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L1732]  COND TRUE   DType[this] == ULMC
[L1733]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1733]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L1734]  COND FALSE  !(revert)
[L1745]              __ret_0_ := true;
[L478]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L479]               assume !revert && gas >= 0;
[L3632]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3691]  RET         call CorralChoice_ULMC(this);
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND TRUE   choice == 11
[L3603]              gas := gas - 21000;
[L3604]  COND FALSE  !(gas >= 0)
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:43,110 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:43,110 INFO  L82        PathProgramCache]: Analyzing trace with hash -1994679770, now seen corresponding path program 1 times
[2020-11-25 07:31:43,111 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:43,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:43,401 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-11-25 07:31:43,401 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:43,401 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 07:31:43,401 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:43,401 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 07:31:43,402 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=496, Unknown=0, NotChecked=0, Total=552
[2020-11-25 07:31:43,402 INFO  L87              Difference]: Start difference. First operand 1862 states and 2055 transitions. cyclomatic complexity: 196 Second operand 24 states.
[2020-11-25 07:31:45,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:45,575 INFO  L93              Difference]: Finished difference Result 1920 states and 2136 transitions.
[2020-11-25 07:31:45,575 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 07:31:45,575 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1920 states and 2136 transitions.
[2020-11-25 07:31:45,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:45,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1920 states to 1920 states and 2136 transitions.
[2020-11-25 07:31:45,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 07:31:45,584 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 07:31:45,584 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1920 states and 2136 transitions.
[2020-11-25 07:31:45,586 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:45,586 INFO  L728         BuchiCegarLoop]: Abstraction has 1920 states and 2136 transitions.
[2020-11-25 07:31:45,587 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1920 states and 2136 transitions.
[2020-11-25 07:31:45,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1920 to 1873.
[2020-11-25 07:31:45,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1873 states.
[2020-11-25 07:31:45,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1873 states to 1873 states and 2076 transitions.
[2020-11-25 07:31:45,601 INFO  L751         BuchiCegarLoop]: Abstraction has 1873 states and 2076 transitions.
[2020-11-25 07:31:45,601 INFO  L631         BuchiCegarLoop]: Abstraction has 1873 states and 2076 transitions.
[2020-11-25 07:31:45,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 07:31:45,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1873 states and 2076 transitions.
[2020-11-25 07:31:45,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:45,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:45,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:45,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:45,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND TRUE   __exception
[L918]               __tmp__Balance := Balance;
[L919]               __tmp__DType := DType;
[L920]               __tmp__Alloc := Alloc;
[L921]               __tmp__balance_ADDR := balance_ADDR;
[L922]               __tmp__M_Ref_int := M_Ref_int;
[L923]               __tmp__sum__balances0 := sum__balances0;
[L924]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L925]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L926]               __tmp__sum__allowances1 := sum__allowances1;
[L927]               __tmp__Length := Length;
[L928]               __tmp__now := now;
[L929]               __tmp___balances_ERC20 := _balances_ERC20;
[L930]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L931]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L932]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L933]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L934]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L935]   CALL        call ULMC_ULMC__fail(this, msgsender_MSG, msgvalue_MSG);
[L2337]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1573]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1558]              assume msgsender_MSG != null;
[L1559]              __tmp__Balance[this] := 0;
[L1573]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1574]  COND FALSE  !(revert)
[L2337]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2338]  COND FALSE  !(revert)
[L2341]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1615]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1573]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1558]              assume msgsender_MSG != null;
[L1559]              __tmp__Balance[this] := 0;
[L1573]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1574]  COND FALSE  !(revert)
[L1615]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1616]  COND FALSE  !(revert)
[L1619]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1590]              assume msgsender_MSG != null;
[L1591]              __tmp__Balance[this] := 0;
[L1592]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L1593]              __tmp__sum__balances0[this] := 0;
[L1594]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L1595]              __tmp__sum__allowances1[this] := 0;
[L1596]              __tmp___totalSupply_ERC20[this] := 0;
[L1619]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1620]  COND FALSE  !(revert)
[L2341]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2342]  COND FALSE  !(revert)
[L2345]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2221]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1573]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1558]              assume msgsender_MSG != null;
[L1559]              __tmp__Balance[this] := 0;
[L1573]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1574]  COND FALSE  !(revert)
[L2221]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2194]              assume msgsender_MSG != null;
[L2195]              __tmp__Balance[this] := 0;
[L2196]              __tmp___name_ERC20Detailed[this] := -930759658;
[L2197]              __tmp___symbol_ERC20Detailed[this] := -930759658;
[L2198]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2200]              __tmp___name_ERC20Detailed[this] := name_s622;
[L2201]              __tmp___symbol_ERC20Detailed[this] := symbol_s622;
[L2202]              __tmp___decimals_ERC20Detailed[this] := decimals_s622;
[L2225]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2226]  COND FALSE  !(revert)
[L2345]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2346]  COND FALSE  !(revert)
[L2349]  CALL        call ULMC_ULMC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2284]              assume msgsender_MSG != null;
[L2285]              __tmp__Balance[this] := 0;
[L2287]  COND TRUE   __tmp__DType[this] == ULMC
[L2288]  CALL        call __var_18 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L2269]              __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L2288]  RET         call __var_18 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2295]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2296]  COND TRUE   __tmp__DType[this] == ULMC
[L2297]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1989]              __var_8 := null;
[L1990]  COND FALSE  !(!(account_s478 != null))
[L1994]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s478);
[L1434]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1435]  COND FALSE  !(!(c_s26 >= a_s26))
[L1439]              __ret_0_ := c_s26;
[L1994]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s478);
[L1995]  COND FALSE  !(revert)
[L1998]              __tmp___totalSupply_ERC20[this] := __var_9;
[L1999]  CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s478], amount_s478);
[L1434]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1435]  COND FALSE  !(!(c_s26 >= a_s26))
[L1439]              __ret_0_ := c_s26;
[L1999]  RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s478], amount_s478);
[L2000]  COND FALSE  !(revert)
[L2003]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s478];
[L2004]              __tmp___balances_ERC20[this][account_s478] := __var_10;
[L2005]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s478];
[L2297]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2298]  COND FALSE  !(revert)
[L2349]  RET         call ULMC_ULMC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2350]  COND FALSE  !(revert)
[L935]   RET         call ULMC_ULMC__fail(this, msgsender_MSG, msgvalue_MSG);
[L936]               assume revert || gas < 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND TRUE   choice == 11
[L3603]              gas := gas - 21000;
[L3604]  COND FALSE  !(gas >= 0)
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:45,607 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:45,607 INFO  L82        PathProgramCache]: Analyzing trace with hash -411363097, now seen corresponding path program 1 times
[2020-11-25 07:31:45,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:45,616 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:45,647 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:31:45,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:45,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:31:45,649 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:45,649 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:31:45,649 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:31:45,650 INFO  L87              Difference]: Start difference. First operand 1873 states and 2076 transitions. cyclomatic complexity: 208 Second operand 4 states.
[2020-11-25 07:31:45,757 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:45,758 INFO  L93              Difference]: Finished difference Result 2441 states and 2846 transitions.
[2020-11-25 07:31:45,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 07:31:45,758 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2441 states and 2846 transitions.
[2020-11-25 07:31:45,766 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 07:31:45,775 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2441 states to 2318 states and 2718 transitions.
[2020-11-25 07:31:45,775 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 742
[2020-11-25 07:31:45,776 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 742
[2020-11-25 07:31:45,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2318 states and 2718 transitions.
[2020-11-25 07:31:45,779 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:45,779 INFO  L728         BuchiCegarLoop]: Abstraction has 2318 states and 2718 transitions.
[2020-11-25 07:31:45,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2318 states and 2718 transitions.
[2020-11-25 07:31:45,803 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2318 to 1750.
[2020-11-25 07:31:45,803 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1750 states.
[2020-11-25 07:31:45,806 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1750 states to 1750 states and 1947 transitions.
[2020-11-25 07:31:45,806 INFO  L751         BuchiCegarLoop]: Abstraction has 1750 states and 1947 transitions.
[2020-11-25 07:31:45,806 INFO  L631         BuchiCegarLoop]: Abstraction has 1750 states and 1947 transitions.
[2020-11-25 07:31:45,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 07:31:45,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1750 states and 1947 transitions.
[2020-11-25 07:31:45,810 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:45,810 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:45,810 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:45,812 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:45,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND FALSE  !(DType[this] == ULMC)
[L1794]  COND TRUE   DType[this] == ERC20
[L1795]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1795]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1796]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:45,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:45,819 INFO  L82        PathProgramCache]: Analyzing trace with hash 96304700, now seen corresponding path program 1 times
[2020-11-25 07:31:45,820 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:45,841 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:45,965 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 115 trivial. 0 not checked.
[2020-11-25 07:31:45,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:45,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:31:45,966 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:45,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:31:45,966 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:31:45,966 INFO  L87              Difference]: Start difference. First operand 1750 states and 1947 transitions. cyclomatic complexity: 202 Second operand 3 states.
[2020-11-25 07:31:45,978 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:45,979 INFO  L93              Difference]: Finished difference Result 1764 states and 1965 transitions.
[2020-11-25 07:31:45,979 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:31:45,979 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1764 states and 1965 transitions.
[2020-11-25 07:31:45,982 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:45,986 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1764 states to 1764 states and 1965 transitions.
[2020-11-25 07:31:45,986 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 617
[2020-11-25 07:31:45,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 617
[2020-11-25 07:31:45,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1764 states and 1965 transitions.
[2020-11-25 07:31:45,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:45,988 INFO  L728         BuchiCegarLoop]: Abstraction has 1764 states and 1965 transitions.
[2020-11-25 07:31:45,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1764 states and 1965 transitions.
[2020-11-25 07:31:45,998 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1764 to 1758.
[2020-11-25 07:31:45,998 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1758 states.
[2020-11-25 07:31:45,999 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1758 states to 1758 states and 1957 transitions.
[2020-11-25 07:31:45,999 INFO  L751         BuchiCegarLoop]: Abstraction has 1758 states and 1957 transitions.
[2020-11-25 07:31:45,999 INFO  L631         BuchiCegarLoop]: Abstraction has 1758 states and 1957 transitions.
[2020-11-25 07:31:45,999 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 07:31:45,999 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1758 states and 1957 transitions.
[2020-11-25 07:31:46,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:46,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:46,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:46,002 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:46,002 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND TRUE   choice == 11
[L3603]              gas := gas - 21000;
[L3604]  COND FALSE  !(gas >= 0)
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:46,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:46,006 INFO  L82        PathProgramCache]: Analyzing trace with hash 285509907, now seen corresponding path program 1 times
[2020-11-25 07:31:46,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:46,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:46,384 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 07:31:46,384 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:31:46,384 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 07:31:46,385 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:46,385 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 07:31:46,385 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=844, Unknown=0, NotChecked=0, Total=930
[2020-11-25 07:31:46,385 INFO  L87              Difference]: Start difference. First operand 1758 states and 1957 transitions. cyclomatic complexity: 204 Second operand 31 states.
[2020-11-25 07:31:49,354 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:49,354 INFO  L93              Difference]: Finished difference Result 1805 states and 2009 transitions.
[2020-11-25 07:31:49,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 07:31:49,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1805 states and 2009 transitions.
[2020-11-25 07:31:49,358 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:49,362 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1805 states to 1805 states and 2009 transitions.
[2020-11-25 07:31:49,362 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 632
[2020-11-25 07:31:49,362 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-11-25 07:31:49,362 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1805 states and 2009 transitions.
[2020-11-25 07:31:49,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:49,364 INFO  L728         BuchiCegarLoop]: Abstraction has 1805 states and 2009 transitions.
[2020-11-25 07:31:49,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1805 states and 2009 transitions.
[2020-11-25 07:31:49,375 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1805 to 1760.
[2020-11-25 07:31:49,375 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1760 states.
[2020-11-25 07:31:49,376 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1760 states to 1760 states and 1963 transitions.
[2020-11-25 07:31:49,376 INFO  L751         BuchiCegarLoop]: Abstraction has 1760 states and 1963 transitions.
[2020-11-25 07:31:49,376 INFO  L631         BuchiCegarLoop]: Abstraction has 1760 states and 1963 transitions.
[2020-11-25 07:31:49,376 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 07:31:49,376 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1760 states and 1963 transitions.
[2020-11-25 07:31:49,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:31:49,378 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:31:49,378 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:31:49,381 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:31:49,381 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3681]              assume null == 0;
[L3682]  CALL        call this := FreshRefGenerator__success();
[L1393]              havoc newRef;
[L1394]              assume Alloc[newRef] == false;
[L1395]              Alloc[newRef] := true;
[L1396]              assume newRef != null;
[L3682]  RET         call this := FreshRefGenerator__success();
[L3683]              assume now >= 0;
[L3684]              assume DType[this] == ULMC;
[L3685]              assume msgvalue_MSG == 0;
[L3686]              gas := gas - 53000;
[L3687]  CALL        call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L915]               havoc __exception;
[L916]               revert := false;
[L917]   COND FALSE  !(__exception)
[L938]   CALL        call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L2359]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2359]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2360]  COND FALSE  !(revert)
[L2363]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1627]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L1627]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1628]  COND FALSE  !(revert)
[L1631]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1603]              assume msgsender_MSG != null;
[L1604]              Balance[this] := 0;
[L1605]              _balances_ERC20[this] := zeroRefintArr();
[L1606]              sum__balances0[this] := 0;
[L1607]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1608]              sum__allowances1[this] := 0;
[L1609]              _totalSupply_ERC20[this] := 0;
[L1631]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]  COND FALSE  !(revert)
[L2363]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND FALSE  !(revert)
[L2367]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2233]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1581]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1566]              assume msgsender_MSG != null;
[L1567]              Balance[this] := 0;
[L1581]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1582]  COND FALSE  !(revert)
[L2233]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2234]  COND FALSE  !(revert)
[L2237]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2208]              assume msgsender_MSG != null;
[L2209]              Balance[this] := 0;
[L2210]              _name_ERC20Detailed[this] := -930759658;
[L2211]              _symbol_ERC20Detailed[this] := -930759658;
[L2212]              _decimals_ERC20Detailed[this] := 0;
[L2214]              _name_ERC20Detailed[this] := name_s622;
[L2215]              _symbol_ERC20Detailed[this] := symbol_s622;
[L2216]              _decimals_ERC20Detailed[this] := decimals_s622;
[L2237]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s622, symbol_s622, decimals_s622);
[L2238]  COND FALSE  !(revert)
[L2367]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 536458469, -382440921, 18);
[L2368]  COND FALSE  !(revert)
[L2371]  CALL        call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2311]              assume msgsender_MSG != null;
[L2312]              Balance[this] := 0;
[L2314]  COND TRUE   DType[this] == ULMC
[L2315]  CALL        call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2315]  RET         call __var_18 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  COND FALSE  !(revert)
[L2322]              __var_17 := __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2323]  COND TRUE   DType[this] == ULMC
[L2324]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2013]              __var_8 := null;
[L2014]  COND FALSE  !(!(account_s478 != null))
[L2018]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2018]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2019]  COND FALSE  !(revert)
[L2022]              _totalSupply_ERC20[this] := __var_9;
[L2023]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L2023]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2024]  COND FALSE  !(revert)
[L2027]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L2028]              _balances_ERC20[this][account_s478] := __var_10;
[L2029]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L2030]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2324]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_18 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2325]  COND FALSE  !(revert)
[L2371]  RET         call ULMC_ULMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2372]  COND FALSE  !(revert)
[L938]   RET         call ULMC_ULMC__success(this, msgsender_MSG, msgvalue_MSG);
[L939]               assume !revert && gas >= 0;
[L3687]  RET         call ULMC_ULMC(this, msgsender_MSG, msgvalue_MSG);
[L3688]              assume !revert && gas >= 0;
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND TRUE   choice == 7
[L3628]              gas := gas - 21000;
[L3629]  COND TRUE   gas >= 0
[L3630]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]              assume msgvalue_MSG == 0;
[L3632]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L478]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L1732]  COND TRUE   DType[this] == ULMC
[L1733]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1733]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L1734]  COND FALSE  !(revert)
[L1745]              __ret_0_ := true;
[L478]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L479]               assume !revert && gas >= 0;
[L3632]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3691]  RET         call CorralChoice_ULMC(this);
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND TRUE   choice == 9
[L3615]              gas := gas - 21000;
[L3616]  COND TRUE   gas >= 0
[L3617]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3618]              assume msgvalue_MSG == 0;
[L3619]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L353]               havoc __exception;
[L354]               revert := false;
[L355]   COND FALSE  !(__exception)
[L376]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L1682]  COND TRUE   DType[this] == ULMC
[L1683]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1683]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L1684]  COND FALSE  !(revert)
[L1695]              __ret_0_ := true;
[L376]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L377]               assume !revert && gas >= 0;
[L3619]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3691]  RET         call CorralChoice_ULMC(this);
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

Loop:
[L3691]  CALL        call CorralChoice_ULMC(this);
[L3558]              havoc msgsender_MSG;
[L3559]              havoc msgvalue_MSG;
[L3560]              havoc choice;
[L3561]              havoc __ret_0_totalSupply;
[L3562]              havoc account_s236;
[L3563]              havoc __ret_0_balanceOf;
[L3564]              havoc recipient_s255;
[L3565]              havoc amount_s255;
[L3566]              havoc __ret_0_transfer;
[L3567]              havoc owner_s271;
[L3568]              havoc spender_s271;
[L3569]              havoc __ret_0_allowance;
[L3570]              havoc spender_s290;
[L3571]              havoc value_s290;
[L3572]              havoc __ret_0_approve;
[L3573]              havoc sender_s325;
[L3574]              havoc recipient_s325;
[L3575]              havoc amount_s325;
[L3576]              havoc __ret_0_transferFrom;
[L3577]              havoc spender_s352;
[L3578]              havoc addedValue_s352;
[L3579]              havoc __ret_0_increaseAllowance;
[L3580]              havoc spender_s379;
[L3581]              havoc subtractedValue_s379;
[L3582]              havoc __ret_0_decreaseAllowance;
[L3583]              havoc name_s622;
[L3584]              havoc symbol_s622;
[L3585]              havoc decimals_s622;
[L3586]              havoc __ret_0_name;
[L3587]              havoc __ret_0_symbol;
[L3588]              havoc __ret_0_decimals;
[L3589]              havoc tmpNow;
[L3590]              havoc gas;
[L3591]              assume gas > 4000000 && gas <= 8000000;
[L3592]              tmpNow := now;
[L3593]              havoc now;
[L3594]              assume now > tmpNow;
[L3595]              assume msgsender_MSG != null;
[L3596]              assume DType[msgsender_MSG] != SafeMath;
[L3597]              assume DType[msgsender_MSG] != IERC20;
[L3598]              assume DType[msgsender_MSG] != ERC20;
[L3599]              assume DType[msgsender_MSG] != ERC20Detailed;
[L3600]              assume DType[msgsender_MSG] != ULMC;
[L3601]              Alloc[msgsender_MSG] := true;
[L3602]  COND FALSE  !(choice == 11)
[L3608]  COND FALSE  !(choice == 10)
[L3614]  COND FALSE  !(choice == 9)
[L3621]  COND FALSE  !(choice == 8)
[L3627]  COND FALSE  !(choice == 7)
[L3634]  COND TRUE   choice == 6
[L3635]              gas := gas - 21000;
[L3636]  COND TRUE   gas >= 0
[L3637]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3638]              assume msgvalue_MSG == 0;
[L3639]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s325 != recipient_s325 && ((amount_s325 > _balances_ERC20[this][sender_s325] || amount_s325 > _allowances_ERC20[this][sender_s325][msgsender_MSG]) || _balances_ERC20[this][recipient_s325] + amount_s325 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L509]               havoc __exception;
[L510]               revert := false;
[L511]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1789]  COND TRUE   DType[this] == ULMC
[L1790]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1957]              __var_4 := null;
[L1958]  COND FALSE  !(!(sender_s435 != null))
[L1962]              __var_5 := null;
[L1963]  COND FALSE  !(!(recipient_s435 != null))
[L1967]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1967]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L1968]  COND FALSE  !(revert)
[L1971]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L1972]              _balances_ERC20[this][sender_s435] := __var_6;
[L1973]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L1974]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1446]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1447]  COND FALSE  !(!(c_s26 >= a_s26))
[L1451]              __ret_0_ := c_s26;
[L1974]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L1975]  COND FALSE  !(revert)
[L1978]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L1979]              _balances_ERC20[this][recipient_s435] := __var_7;
[L1980]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L1981]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1790]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L1791]  COND FALSE  !(revert)
[L1802]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1470]  COND FALSE  !(!(b_s51 <= a_s51))
[L1474]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1475]              __ret_0_ := c_s51;
[L1802]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s325][msgsender_MSG], amount_s325);
[L1803]  COND FALSE  !(revert)
[L1806]  COND TRUE   DType[this] == ULMC
[L1807]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L2105]              __var_14 := null;
[L2106]  COND FALSE  !(!(owner_s563 != null))
[L2110]              __var_15 := null;
[L2111]  COND FALSE  !(!(spender_s563 != null))
[L2115]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L2116]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L2117]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L2118]              assert { :EventEmitted "Approval_ERC20" } true;
[L1807]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, msgsender_MSG, __var_1);
[L1808]  COND FALSE  !(revert)
[L1819]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L533]               assume !revert && gas >= 0;
[L3639]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3691]  RET         call CorralChoice_ULMC(this);

[2020-11-25 07:31:49,385 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:31:49,386 INFO  L82        PathProgramCache]: Analyzing trace with hash 1721668393, now seen corresponding path program 1 times
[2020-11-25 07:31:49,386 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:31:49,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:31:49,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 202 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 202 trivial. 0 not checked.
[2020-11-25 07:31:49,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:31:49,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 07:31:49,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:31:49,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 07:31:49,585 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 07:31:49,585 INFO  L87              Difference]: Start difference. First operand 1760 states and 1963 transitions. cyclomatic complexity: 209 Second operand 17 states.
[2020-11-25 07:31:50,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:31:50,346 INFO  L93              Difference]: Finished difference Result 1106 states and 1236 transitions.
[2020-11-25 07:31:50,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 07:31:50,347 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1106 states and 1236 transitions.
[2020-11-25 07:31:50,349 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 07:31:50,349 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1106 states to 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 07:31:50,349 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 07:31:50,349 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:31:50,349 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 07:31:50,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 07:31:50,349 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 07:31:50,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 07:31:50,352 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:31:50 BasicIcfg
[2020-11-25 07:31:50,352 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 07:31:50,352 INFO  L168              Benchmark]: Toolchain (without parser) took 12247.83 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 940.6 MB in the beginning and 1.3 GB in the end (delta: -370.7 MB). Peak memory consumption was 771.2 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,353 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,353 INFO  L168              Benchmark]: Boogie Preprocessor took 101.83 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,354 INFO  L168              Benchmark]: UtopiaSpecLang took 56.80 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,354 INFO  L168              Benchmark]: Boogie Printer took 14.75 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,355 INFO  L168              Benchmark]: RCFGBuilder took 763.09 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 822.2 MB in the end (delta: 102.3 MB). Peak memory consumption was 102.3 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,355 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.07 ms. Allocated memory is still 1.0 GB. Free memory was 822.2 MB in the beginning and 818.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,355 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1405.64 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.7 MB). Free memory was 818.6 MB in the beginning and 1.1 GB in the end (delta: -324.8 MB). Peak memory consumption was 197.9 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,356 INFO  L168              Benchmark]: BlockEncodingV2 took 139.52 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Peak memory consumption was 59.8 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,356 INFO  L168              Benchmark]: BuchiAutomizer took 9723.01 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 932.2 MB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -227.7 MB). Peak memory consumption was 704.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:31:50,358 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3180 locations, 5731 edges
  - StatisticsResult: Encoded RCFG
    3093 locations, 5509 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 101.83 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.80 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.75 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 763.09 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 822.2 MB in the end (delta: 102.3 MB). Peak memory consumption was 102.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.07 ms. Allocated memory is still 1.0 GB. Free memory was 822.2 MB in the beginning and 818.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1405.64 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.7 MB). Free memory was 818.6 MB in the beginning and 1.1 GB in the end (delta: -324.8 MB). Peak memory consumption was 197.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 139.52 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Peak memory consumption was 59.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9723.01 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 932.2 MB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -227.7 MB). Peak memory consumption was 704.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1272 locations, 1749 edges
  - StatisticsResult: BuchiProgram size
    3180 locations, 5731 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 31 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.6s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.4s. Construction of modules took 5.6s. BÃ¼chi inclusion checks took 1.9s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 9 MinimizatonAttempts, 1345 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2046 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 18443 SDtfs, 16345 SDslu, 47351 SDs, 0 SdLazy, 79839 SolverSat, 2973 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
