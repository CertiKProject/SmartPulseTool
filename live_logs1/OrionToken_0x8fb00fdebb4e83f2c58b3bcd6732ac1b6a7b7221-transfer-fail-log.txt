This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:22:12,244 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:22:12,245 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:22:12,252 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:22:12,252 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:22:12,253 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:22:12,253 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:22:12,254 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:22:12,255 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:22:12,256 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:22:12,257 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:22:12,257 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:22:12,257 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:22:12,258 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:22:12,259 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:22:12,260 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:22:12,260 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:22:12,261 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:22:12,263 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:22:12,264 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:22:12,264 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:22:12,265 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:22:12,267 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:22:12,267 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:22:12,267 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:22:12,267 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:22:12,268 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:22:12,268 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:22:12,268 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:22:12,268 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:22:12,269 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:22:12,269 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:22:12,270 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:22:12,270 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:22:12,270 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:22:12,271 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:22:12,271 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:22:12,271 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:22:12,271 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:22:12,272 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:22:12,272 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:22:12,272 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:22:12,278 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:22:12,278 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:22:12,279 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:22:12,279 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:22:12,279 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:22:12,279 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:22:12,279 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:22:12,279 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:22:12,279 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:22:12,280 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:22:12,280 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:22:12,280 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:22:12,281 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:22:12,281 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:22:12,281 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:22:12,281 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:22:12,299 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:22:12,308 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:22:12,310 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:22:12,311 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:22:12,311 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:22:12,312 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl
[2020-11-25 03:22:12,312 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl'
[2020-11-25 03:22:12,410 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:22:12,411 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:22:12,411 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:22:12,412 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:22:12,412 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:22:12,427 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,429 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,462 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,463 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,488 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,503 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,514 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,528 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:22:12,529 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:22:12,529 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:22:12,531 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:22:12,535 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/1) ...
[2020-11-25 03:22:12,553 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:22:12,559 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:22:12,566 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:22:12,573 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s277 && ( amount_s277>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s277] + amount_s277 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s277>=0 ) && amount_s277<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s277]>=0 ) && _balances_ERC20[this][recipient_s277]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:22:12,586 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:22:12,586 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:22:12,599 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:22:12 PropertyContainer
[2020-11-25 03:22:12,599 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:22:12,599 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:22:12,599 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:22:12,599 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:22:12,600 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/2) ...
[2020-11-25 03:22:12,601 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:22:12,601 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:22:12,620 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:22:12" (2/2) ...
[2020-11-25 03:22:12,621 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:22:12,621 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:22:12,621 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:22:12,621 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:22:12,622 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/2) ...
[2020-11-25 03:22:12,673 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:22:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:22:12,674 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:22:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:22:12,675 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:22:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:22:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:22:12,676 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:22:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:22:12,677 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:22:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:22:12,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:22:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:22:12,677 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:22:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:22:12,677 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:22:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:22:12,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:22:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:22:12,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:22:12,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:22:12,679 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:22:12,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:22:12,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:22:12,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:22:12,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:22:12,680 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:22:12,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:22:12,681 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:22:12,681 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:22:12,681 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:22:12,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:22:12,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:22:12,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:22:12,682 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken
[2020-11-25 03:22:12,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:22:12,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:22:12,684 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OrionToken
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:22:12,685 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:22:12,686 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:22:12,687 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:22:12,688 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:22:12,689 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:22:12,690 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:22:12,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:22:12,692 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__success
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:22:12,693 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:22:12,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:22:12,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:22:12,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:22:12,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:22:12,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:22:12,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:22:12,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:22:12,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:22:12,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:22:12,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:22:12,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:22:12,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:22:12,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:22:12,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:22:12,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:22:12,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:22:12,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:22:12,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:22:12,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:22:12,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:22:12,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:22:12,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:22:12,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:22:12,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:22:12,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:22:12,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:22:12,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:22:12,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:22:12,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:22:12,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:22:12,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:22:12,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:22:12,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:22:12,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__fail
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__success
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:22:12,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:22:12,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:22:12,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:22:12,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:22:12,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:22:12,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:22:12,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:22:12,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:22:12,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:22:12,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:22:12,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:22:12,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:22:12,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:22:12,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:22:12,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:22:12,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:22:12,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:22:12,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OrionToken
[2020-11-25 03:22:12,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:22:12,711 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:22:12,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:22:12,984 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:22:12,985 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:22:13,680 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:22:13,680 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:22:13,682 INFO  L202        PluginConnector]: Adding new model OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:22:13 BoogieIcfgContainer
[2020-11-25 03:22:13,682 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:22:12" (2/2) ...
[2020-11-25 03:22:13,682 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:22:13,683 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@c79a5be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:22:13, skipping insertion in model container
[2020-11-25 03:22:13,683 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:22:13,683 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:22:13,683 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:22:13,684 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:22:13,684 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/3) ...
[2020-11-25 03:22:13,684 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7ecd0ed3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:22:13, skipping insertion in model container
[2020-11-25 03:22:13,684 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:22:12" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:22:13,711 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:22:13 NWAContainer
[2020-11-25 03:22:13,711 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:22:13,711 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:22:13,711 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:22:13,712 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:22:13,713 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:22:13" (3/4) ...
[2020-11-25 03:22:13,714 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4c03433d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:22:13, skipping insertion in model container
[2020-11-25 03:22:13,714 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:22:13" (4/4) ...
[2020-11-25 03:22:13,717 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:22:13,721 INFO  L110   BuchiProductObserver]: Initial RCFG 2936 locations, 4572 edges
[2020-11-25 03:22:13,721 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:22:13,731 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:22:16,058 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:22:16,068 INFO  L110   BuchiProductObserver]: BuchiProgram size 7824 locations, 15041 edges
[2020-11-25 03:22:16,068 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:22:16 BoogieIcfgContainer
[2020-11-25 03:22:16,068 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:22:16,068 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:22:16,068 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:22:16,069 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:22:16,070 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:22:16" (1/1) ...
[2020-11-25 03:22:16,199 INFO  L313           BlockEncoder]: Initial Icfg 7824 locations, 15041 edges
[2020-11-25 03:22:16,199 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:22:16,201 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:22:16,201 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:22:16,201 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:22:16,228 INFO  L70    emoveInfeasibleEdges]: Removed 249 edges and 24 locations because of local infeasibility
[2020-11-25 03:22:16,243 INFO  L70        RemoveSinkStates]: Removed 262 edges and 158 locations by removing sink states
[2020-11-25 03:22:16,265 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:22:16,271 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:22:16,278 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:22:16,279 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:22:16,285 INFO  L313           BlockEncoder]: Encoded RCFG 7610 locations, 14483 edges
[2020-11-25 03:22:16,286 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:22:16 BasicIcfg
[2020-11-25 03:22:16,286 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:22:16,286 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:22:16,286 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:22:16,288 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:22:16,289 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,289 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:22:12" (1/6) ...
[2020-11-25 03:22:16,290 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@28f12bd2 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:22:16, skipping insertion in model container
[2020-11-25 03:22:16,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:22:12" (2/6) ...
[2020-11-25 03:22:16,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@28f12bd2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:22:16, skipping insertion in model container
[2020-11-25 03:22:16,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:22:13" (3/6) ...
[2020-11-25 03:22:16,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@28f12bd2 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:22:16, skipping insertion in model container
[2020-11-25 03:22:16,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:22:13" (4/6) ...
[2020-11-25 03:22:16,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@28f12bd2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:22:16, skipping insertion in model container
[2020-11-25 03:22:16,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:22:16" (5/6) ...
[2020-11-25 03:22:16,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@28f12bd2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:22:16, skipping insertion in model container
[2020-11-25 03:22:16,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:22:16,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:22:16" (6/6) ...
[2020-11-25 03:22:16,294 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-fail.bpl_BEv2
[2020-11-25 03:22:16,333 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:22:16,333 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:22:16,333 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:22:16,333 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:22:16,333 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:22:16,333 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:22:16,333 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:22:16,333 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:22:16,333 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:22:16,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7610 states.
[2020-11-25 03:22:16,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:16,487 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:16,487 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:16,496 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:16,496 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:16,496 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:22:16,497 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7610 states.
[2020-11-25 03:22:16,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:16,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:16,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:16,536 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:16,536 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:16,554 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:16,554 INFO  L82        PathProgramCache]: Analyzing trace with hash 1082181863, now seen corresponding path program 1 times
[2020-11-25 03:22:16,563 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:16,592 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:16,636 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:22:16,638 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:16,638 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:22:17,037 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:17,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:22:17,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:22:17,052 INFO  L87              Difference]: Start difference. First operand 7610 states. Second operand 4 states.
[2020-11-25 03:22:17,885 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:17,885 INFO  L93              Difference]: Finished difference Result 4202 states and 5384 transitions.
[2020-11-25 03:22:17,885 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:22:17,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4202 states and 5384 transitions.
[2020-11-25 03:22:17,910 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:17,940 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4202 states to 4202 states and 5384 transitions.
[2020-11-25 03:22:17,940 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 03:22:17,943 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 03:22:17,943 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4202 states and 5384 transitions.
[2020-11-25 03:22:17,954 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:17,954 INFO  L728         BuchiCegarLoop]: Abstraction has 4202 states and 5384 transitions.
[2020-11-25 03:22:17,970 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4202 states and 5384 transitions.
[2020-11-25 03:22:18,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4202 to 4202.
[2020-11-25 03:22:18,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4202 states.
[2020-11-25 03:22:18,049 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4202 states to 4202 states and 5384 transitions.
[2020-11-25 03:22:18,049 INFO  L751         BuchiCegarLoop]: Abstraction has 4202 states and 5384 transitions.
[2020-11-25 03:22:18,050 INFO  L631         BuchiCegarLoop]: Abstraction has 4202 states and 5384 transitions.
[2020-11-25 03:22:18,050 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:22:18,050 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4202 states and 5384 transitions.
[2020-11-25 03:22:18,059 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:18,059 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:18,059 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:18,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:18,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND TRUE   revert
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:18,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:18,066 INFO  L82        PathProgramCache]: Analyzing trace with hash 871079991, now seen corresponding path program 1 times
[2020-11-25 03:22:18,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:18,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:18,099 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:22:18,099 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:18,099 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:22:18,100 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:18,100 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:22:18,100 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:22:18,101 INFO  L87              Difference]: Start difference. First operand 4202 states and 5384 transitions. cyclomatic complexity: 1184 Second operand 3 states.
[2020-11-25 03:22:18,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:18,248 INFO  L93              Difference]: Finished difference Result 5442 states and 6918 transitions.
[2020-11-25 03:22:18,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:22:18,248 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5442 states and 6918 transitions.
[2020-11-25 03:22:18,265 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:18,286 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5442 states to 4920 states and 5998 transitions.
[2020-11-25 03:22:18,286 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 919
[2020-11-25 03:22:18,287 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 948
[2020-11-25 03:22:18,287 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4920 states and 5998 transitions.
[2020-11-25 03:22:18,293 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:18,293 INFO  L728         BuchiCegarLoop]: Abstraction has 4920 states and 5998 transitions.
[2020-11-25 03:22:18,298 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4920 states and 5998 transitions.
[2020-11-25 03:22:18,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4920 to 4577.
[2020-11-25 03:22:18,343 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4577 states.
[2020-11-25 03:22:18,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4577 states to 4577 states and 5571 transitions.
[2020-11-25 03:22:18,349 INFO  L751         BuchiCegarLoop]: Abstraction has 4577 states and 5571 transitions.
[2020-11-25 03:22:18,349 INFO  L631         BuchiCegarLoop]: Abstraction has 4577 states and 5571 transitions.
[2020-11-25 03:22:18,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:22:18,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4577 states and 5571 transitions.
[2020-11-25 03:22:18,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:18,355 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:18,355 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:18,360 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:18,360 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND TRUE   __exception
[L1753]              __tmp__Balance := Balance;
[L1754]              __tmp__DType := DType;
[L1755]              __tmp__Alloc := Alloc;
[L1756]              __tmp__balance_ADDR := balance_ADDR;
[L1757]              __tmp__M_Ref_int := M_Ref_int;
[L1758]              __tmp__sum__balances0 := sum__balances0;
[L1759]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1760]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1761]              __tmp__sum__allowances1 := sum__allowances1;
[L1762]              __tmp__M_Ref_bool := M_Ref_bool;
[L1763]              __tmp__sum := sum;
[L1764]              __tmp__Length := Length;
[L1765]              __tmp__now := now;
[L1766]              __tmp___balances_ERC20 := _balances_ERC20;
[L1767]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1768]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1769]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1770]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1771]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1772]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1773]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1774]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1775]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5057]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L5057]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L5061]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4803]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4803]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4804]  COND FALSE  !(revert)
[L4807]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4776]              assume msgsender_MSG != null;
[L4777]              __tmp__Balance[this] := 0;
[L4778]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4779]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4782]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4783]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4784]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4807]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4808]  COND FALSE  !(revert)
[L5065]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L5069]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L5073]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4324]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4324]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4325]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L5073]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4324]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4324]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4325]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L5077]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4891]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4891]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4892]  COND FALSE  !(revert)
[L4895]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4895]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]  COND FALSE  !(revert)
[L4899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]  COND FALSE  !(revert)
[L4903]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4324]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4324]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4325]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4903]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4904]  COND FALSE  !(revert)
[L4907]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4324]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4324]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4325]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L4907]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4908]  COND FALSE  !(revert)
[L4911]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4864]              assume msgsender_MSG != null;
[L4865]              __tmp__Balance[this] := 0;
[L4866]              __tmp___cap_ERC20Capped[this] := 0;
[L4868]  COND FALSE  !(!(cap_s903 > 0))
[L4872]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4911]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4912]  COND FALSE  !(revert)
[L5081]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              __tmp__Balance[this] := 0;
[L5085]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L1775]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume revert || gas < 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:18,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:18,368 INFO  L82        PathProgramCache]: Analyzing trace with hash -2118740289, now seen corresponding path program 1 times
[2020-11-25 03:22:18,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:18,384 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:18,613 INFO  L134       CoverageAnalysis]: Checked inductivity of 1532 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1490 trivial. 0 not checked.
[2020-11-25 03:22:18,613 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:22:18,613 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:22:18,614 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:18,614 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:22:18,614 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:22:18,615 INFO  L87              Difference]: Start difference. First operand 4577 states and 5571 transitions. cyclomatic complexity: 996 Second operand 3 states.
[2020-11-25 03:22:18,679 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:18,680 INFO  L93              Difference]: Finished difference Result 4580 states and 5574 transitions.
[2020-11-25 03:22:18,680 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:22:18,680 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4580 states and 5574 transitions.
[2020-11-25 03:22:18,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:18,705 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4580 states to 4580 states and 5574 transitions.
[2020-11-25 03:22:18,705 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 912
[2020-11-25 03:22:18,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 912
[2020-11-25 03:22:18,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4580 states and 5574 transitions.
[2020-11-25 03:22:18,709 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:18,709 INFO  L728         BuchiCegarLoop]: Abstraction has 4580 states and 5574 transitions.
[2020-11-25 03:22:18,713 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4580 states and 5574 transitions.
[2020-11-25 03:22:18,755 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4580 to 4578.
[2020-11-25 03:22:18,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4578 states.
[2020-11-25 03:22:18,763 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4578 states to 4578 states and 5572 transitions.
[2020-11-25 03:22:18,763 INFO  L751         BuchiCegarLoop]: Abstraction has 4578 states and 5572 transitions.
[2020-11-25 03:22:18,763 INFO  L631         BuchiCegarLoop]: Abstraction has 4578 states and 5572 transitions.
[2020-11-25 03:22:18,763 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:22:18,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4578 states and 5572 transitions.
[2020-11-25 03:22:18,770 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:18,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:18,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:18,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:18,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND TRUE   __exception
[L1753]              __tmp__Balance := Balance;
[L1754]              __tmp__DType := DType;
[L1755]              __tmp__Alloc := Alloc;
[L1756]              __tmp__balance_ADDR := balance_ADDR;
[L1757]              __tmp__M_Ref_int := M_Ref_int;
[L1758]              __tmp__sum__balances0 := sum__balances0;
[L1759]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1760]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1761]              __tmp__sum__allowances1 := sum__allowances1;
[L1762]              __tmp__M_Ref_bool := M_Ref_bool;
[L1763]              __tmp__sum := sum;
[L1764]              __tmp__Length := Length;
[L1765]              __tmp__now := now;
[L1766]              __tmp___balances_ERC20 := _balances_ERC20;
[L1767]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1768]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1769]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1770]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1771]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1772]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1773]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1774]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1775]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5057]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L5057]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L5061]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4803]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4803]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4804]  COND FALSE  !(revert)
[L4807]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4776]              assume msgsender_MSG != null;
[L4777]              __tmp__Balance[this] := 0;
[L4778]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4779]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4782]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4783]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4784]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4807]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4808]  COND FALSE  !(revert)
[L5065]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L5069]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L5073]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L5073]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L5077]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4891]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4891]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4892]  COND FALSE  !(revert)
[L4895]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4895]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]  COND FALSE  !(revert)
[L4899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]  COND FALSE  !(revert)
[L4903]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4903]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4904]  COND FALSE  !(revert)
[L4907]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L4907]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4908]  COND FALSE  !(revert)
[L4911]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4864]              assume msgsender_MSG != null;
[L4865]              __tmp__Balance[this] := 0;
[L4866]              __tmp___cap_ERC20Capped[this] := 0;
[L4868]  COND FALSE  !(!(cap_s903 > 0))
[L4872]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4911]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4912]  COND FALSE  !(revert)
[L5081]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              __tmp__Balance[this] := 0;
[L5085]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L1775]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume revert || gas < 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:18,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:18,782 INFO  L82        PathProgramCache]: Analyzing trace with hash -317408359, now seen corresponding path program 1 times
[2020-11-25 03:22:18,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:18,807 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:19,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 1526 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1526 trivial. 0 not checked.
[2020-11-25 03:22:19,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:19,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:22:19,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:19,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:22:19,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:22:19,008 INFO  L87              Difference]: Start difference. First operand 4578 states and 5572 transitions. cyclomatic complexity: 996 Second operand 4 states.
[2020-11-25 03:22:19,547 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:19,547 INFO  L93              Difference]: Finished difference Result 5132 states and 6086 transitions.
[2020-11-25 03:22:19,547 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:22:19,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5132 states and 6086 transitions.
[2020-11-25 03:22:19,559 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 03:22:19,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5132 states to 4876 states and 5803 transitions.
[2020-11-25 03:22:19,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 994
[2020-11-25 03:22:19,571 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 994
[2020-11-25 03:22:19,571 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4876 states and 5803 transitions.
[2020-11-25 03:22:19,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:19,575 INFO  L728         BuchiCegarLoop]: Abstraction has 4876 states and 5803 transitions.
[2020-11-25 03:22:19,579 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4876 states and 5803 transitions.
[2020-11-25 03:22:19,606 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4876 to 4392.
[2020-11-25 03:22:19,606 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4392 states.
[2020-11-25 03:22:19,610 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4392 states to 4392 states and 5197 transitions.
[2020-11-25 03:22:19,610 INFO  L751         BuchiCegarLoop]: Abstraction has 4392 states and 5197 transitions.
[2020-11-25 03:22:19,610 INFO  L631         BuchiCegarLoop]: Abstraction has 4392 states and 5197 transitions.
[2020-11-25 03:22:19,610 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:22:19,610 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4392 states and 5197 transitions.
[2020-11-25 03:22:19,615 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:19,615 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:19,615 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:19,617 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:19,618 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:19,624 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:19,624 INFO  L82        PathProgramCache]: Analyzing trace with hash -1947637336, now seen corresponding path program 1 times
[2020-11-25 03:22:19,625 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:19,639 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:19,819 INFO  L134       CoverageAnalysis]: Checked inductivity of 1562 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1520 trivial. 0 not checked.
[2020-11-25 03:22:19,819 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:22:19,819 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:22:19,819 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:19,820 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:22:19,820 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:22:19,820 INFO  L87              Difference]: Start difference. First operand 4392 states and 5197 transitions. cyclomatic complexity: 807 Second operand 3 states.
[2020-11-25 03:22:19,861 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:19,861 INFO  L93              Difference]: Finished difference Result 4395 states and 5200 transitions.
[2020-11-25 03:22:19,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:22:19,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4395 states and 5200 transitions.
[2020-11-25 03:22:19,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:19,878 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4395 states to 4395 states and 5200 transitions.
[2020-11-25 03:22:19,878 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 956
[2020-11-25 03:22:19,878 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 03:22:19,878 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4395 states and 5200 transitions.
[2020-11-25 03:22:19,881 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:19,881 INFO  L728         BuchiCegarLoop]: Abstraction has 4395 states and 5200 transitions.
[2020-11-25 03:22:19,885 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4395 states and 5200 transitions.
[2020-11-25 03:22:19,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4395 to 4393.
[2020-11-25 03:22:19,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4393 states.
[2020-11-25 03:22:19,912 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4393 states to 4393 states and 5198 transitions.
[2020-11-25 03:22:19,913 INFO  L751         BuchiCegarLoop]: Abstraction has 4393 states and 5198 transitions.
[2020-11-25 03:22:19,913 INFO  L631         BuchiCegarLoop]: Abstraction has 4393 states and 5198 transitions.
[2020-11-25 03:22:19,913 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:22:19,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4393 states and 5198 transitions.
[2020-11-25 03:22:19,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:19,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:19,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:19,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:19,919 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:19,924 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:19,924 INFO  L82        PathProgramCache]: Analyzing trace with hash -3377022, now seen corresponding path program 1 times
[2020-11-25 03:22:19,925 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:19,950 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:20,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 40 proven. 0 refuted. 0 times theorem prover too weak. 1516 trivial. 0 not checked.
[2020-11-25 03:22:20,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:20,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 03:22:20,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:20,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 03:22:20,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-25 03:22:20,421 INFO  L87              Difference]: Start difference. First operand 4393 states and 5198 transitions. cyclomatic complexity: 807 Second operand 19 states.
[2020-11-25 03:22:24,530 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:24,530 INFO  L93              Difference]: Finished difference Result 4485 states and 5299 transitions.
[2020-11-25 03:22:24,530 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 03:22:24,530 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4485 states and 5299 transitions.
[2020-11-25 03:22:24,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:22:24,550 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4485 states to 4485 states and 5299 transitions.
[2020-11-25 03:22:24,550 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 966
[2020-11-25 03:22:24,550 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 966
[2020-11-25 03:22:24,551 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4485 states and 5299 transitions.
[2020-11-25 03:22:24,553 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:24,553 INFO  L728         BuchiCegarLoop]: Abstraction has 4485 states and 5299 transitions.
[2020-11-25 03:22:24,557 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4485 states and 5299 transitions.
[2020-11-25 03:22:24,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4485 to 4250.
[2020-11-25 03:22:24,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4250 states.
[2020-11-25 03:22:24,585 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4250 states to 4250 states and 5026 transitions.
[2020-11-25 03:22:24,585 INFO  L751         BuchiCegarLoop]: Abstraction has 4250 states and 5026 transitions.
[2020-11-25 03:22:24,585 INFO  L631         BuchiCegarLoop]: Abstraction has 4250 states and 5026 transitions.
[2020-11-25 03:22:24,585 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:22:24,585 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4250 states and 5026 transitions.
[2020-11-25 03:22:24,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:24,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:24,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:24,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:24,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6658]  COND TRUE   DType[this] == MinterRole
[L6659]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6659]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:24,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:24,597 INFO  L82        PathProgramCache]: Analyzing trace with hash 1253802315, now seen corresponding path program 1 times
[2020-11-25 03:22:24,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:24,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:24,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:22:24,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:24,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:22:24,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:24,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:22:24,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:22:24,841 INFO  L87              Difference]: Start difference. First operand 4250 states and 5026 transitions. cyclomatic complexity: 779 Second operand 3 states.
[2020-11-25 03:22:24,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:24,881 INFO  L93              Difference]: Finished difference Result 4258 states and 5036 transitions.
[2020-11-25 03:22:24,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:22:24,881 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4258 states and 5036 transitions.
[2020-11-25 03:22:24,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:24,898 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4258 states to 4258 states and 5036 transitions.
[2020-11-25 03:22:24,898 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 851
[2020-11-25 03:22:24,898 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-25 03:22:24,898 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4258 states and 5036 transitions.
[2020-11-25 03:22:24,901 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:24,901 INFO  L728         BuchiCegarLoop]: Abstraction has 4258 states and 5036 transitions.
[2020-11-25 03:22:24,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4258 states and 5036 transitions.
[2020-11-25 03:22:24,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4258 to 4252.
[2020-11-25 03:22:24,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4252 states.
[2020-11-25 03:22:24,930 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4252 states to 4252 states and 5028 transitions.
[2020-11-25 03:22:24,930 INFO  L751         BuchiCegarLoop]: Abstraction has 4252 states and 5028 transitions.
[2020-11-25 03:22:24,930 INFO  L631         BuchiCegarLoop]: Abstraction has 4252 states and 5028 transitions.
[2020-11-25 03:22:24,930 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:22:24,930 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4252 states and 5028 transitions.
[2020-11-25 03:22:24,935 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:24,935 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:24,935 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:24,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:24,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND TRUE   DType[this] == ERC20Mintable
[L6654]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6654]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6655]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND FALSE  !(DType[this] == ERC20Capped)
[L6676]  COND TRUE   DType[this] == ERC20Mintable
[L6677]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6677]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6678]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:24,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:24,943 INFO  L82        PathProgramCache]: Analyzing trace with hash -180685321, now seen corresponding path program 1 times
[2020-11-25 03:22:24,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:24,961 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:25,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:22:25,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:25,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:22:25,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:25,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:22:25,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:22:25,184 INFO  L87              Difference]: Start difference. First operand 4252 states and 5028 transitions. cyclomatic complexity: 779 Second operand 6 states.
[2020-11-25 03:22:25,296 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:25,296 INFO  L93              Difference]: Finished difference Result 4272 states and 5046 transitions.
[2020-11-25 03:22:25,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 03:22:25,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4272 states and 5046 transitions.
[2020-11-25 03:22:25,305 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:25,313 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4272 states to 4232 states and 5000 transitions.
[2020-11-25 03:22:25,313 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 847
[2020-11-25 03:22:25,313 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 847
[2020-11-25 03:22:25,314 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4232 states and 5000 transitions.
[2020-11-25 03:22:25,316 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:25,316 INFO  L728         BuchiCegarLoop]: Abstraction has 4232 states and 5000 transitions.
[2020-11-25 03:22:25,320 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4232 states and 5000 transitions.
[2020-11-25 03:22:25,344 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4232 to 4232.
[2020-11-25 03:22:25,344 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4232 states.
[2020-11-25 03:22:25,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4232 states to 4232 states and 5000 transitions.
[2020-11-25 03:22:25,349 INFO  L751         BuchiCegarLoop]: Abstraction has 4232 states and 5000 transitions.
[2020-11-25 03:22:25,349 INFO  L631         BuchiCegarLoop]: Abstraction has 4232 states and 5000 transitions.
[2020-11-25 03:22:25,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:22:25,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4232 states and 5000 transitions.
[2020-11-25 03:22:25,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:25,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:25,354 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:25,357 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:25,357 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND FALSE  !(DType[this] == OrionToken)
[L3361]  COND FALSE  !(DType[this] == ERC20Capped)
[L3366]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3371]  COND TRUE   DType[this] == ERC20
[L3372]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3372]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]  COND FALSE  !(revert)
[L3379]  COND FALSE  !(DType[this] == OrionToken)
[L3384]  COND TRUE   DType[this] == ERC20Capped
[L3385]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3385]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND FALSE  !(DType[this] == OrionToken)
[L3411]  COND TRUE   DType[this] == ERC20Capped
[L3412]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3412]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3413]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:25,363 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:25,364 INFO  L82        PathProgramCache]: Analyzing trace with hash 555522782, now seen corresponding path program 1 times
[2020-11-25 03:22:25,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:25,403 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:25,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1649 trivial. 0 not checked.
[2020-11-25 03:22:25,610 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:25,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:22:25,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:25,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:22:25,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:22:25,610 INFO  L87              Difference]: Start difference. First operand 4232 states and 5000 transitions. cyclomatic complexity: 771 Second operand 3 states.
[2020-11-25 03:22:25,647 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:25,647 INFO  L93              Difference]: Finished difference Result 4250 states and 5020 transitions.
[2020-11-25 03:22:25,647 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:22:25,647 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4250 states and 5020 transitions.
[2020-11-25 03:22:25,653 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:25,661 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4250 states to 4250 states and 5020 transitions.
[2020-11-25 03:22:25,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-25 03:22:25,662 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-25 03:22:25,662 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4250 states and 5020 transitions.
[2020-11-25 03:22:25,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:25,664 INFO  L728         BuchiCegarLoop]: Abstraction has 4250 states and 5020 transitions.
[2020-11-25 03:22:25,668 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4250 states and 5020 transitions.
[2020-11-25 03:22:25,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4250 to 4244.
[2020-11-25 03:22:25,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4244 states.
[2020-11-25 03:22:25,690 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4244 states to 4244 states and 5014 transitions.
[2020-11-25 03:22:25,690 INFO  L751         BuchiCegarLoop]: Abstraction has 4244 states and 5014 transitions.
[2020-11-25 03:22:25,690 INFO  L631         BuchiCegarLoop]: Abstraction has 4244 states and 5014 transitions.
[2020-11-25 03:22:25,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:22:25,691 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4244 states and 5014 transitions.
[2020-11-25 03:22:25,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:25,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:25,695 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:25,696 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:25,696 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND FALSE  !(DType[this] == OrionToken)
[L3338]  COND TRUE   DType[this] == ERC20Capped
[L3339]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3339]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3340]  COND FALSE  !(revert)
[L3356]  COND FALSE  !(DType[this] == OrionToken)
[L3361]  COND TRUE   DType[this] == ERC20Capped
[L3362]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3362]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3379]  COND FALSE  !(DType[this] == OrionToken)
[L3384]  COND FALSE  !(DType[this] == ERC20Capped)
[L3389]  COND TRUE   DType[this] == ERC20Mintable
[L3390]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3390]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3391]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND FALSE  !(DType[this] == OrionToken)
[L3411]  COND FALSE  !(DType[this] == ERC20Capped)
[L3416]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3421]  COND TRUE   DType[this] == ERC20
[L3422]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3422]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3423]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:25,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:25,702 INFO  L82        PathProgramCache]: Analyzing trace with hash 497605786, now seen corresponding path program 1 times
[2020-11-25 03:22:25,703 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:25,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:25,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1649 trivial. 0 not checked.
[2020-11-25 03:22:25,967 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:25,967 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:22:25,967 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:25,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:22:25,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:22:25,968 INFO  L87              Difference]: Start difference. First operand 4244 states and 5014 transitions. cyclomatic complexity: 773 Second operand 6 states.
[2020-11-25 03:22:26,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:26,069 INFO  L93              Difference]: Finished difference Result 4282 states and 5052 transitions.
[2020-11-25 03:22:26,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 03:22:26,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4282 states and 5052 transitions.
[2020-11-25 03:22:26,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:26,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4282 states to 4212 states and 4966 transitions.
[2020-11-25 03:22:26,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 846
[2020-11-25 03:22:26,087 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 846
[2020-11-25 03:22:26,087 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4212 states and 4966 transitions.
[2020-11-25 03:22:26,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:26,090 INFO  L728         BuchiCegarLoop]: Abstraction has 4212 states and 4966 transitions.
[2020-11-25 03:22:26,093 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4212 states and 4966 transitions.
[2020-11-25 03:22:26,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4212 to 4212.
[2020-11-25 03:22:26,114 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4212 states.
[2020-11-25 03:22:26,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4212 states to 4212 states and 4966 transitions.
[2020-11-25 03:22:26,118 INFO  L751         BuchiCegarLoop]: Abstraction has 4212 states and 4966 transitions.
[2020-11-25 03:22:26,118 INFO  L631         BuchiCegarLoop]: Abstraction has 4212 states and 4966 transitions.
[2020-11-25 03:22:26,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:22:26,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4212 states and 4966 transitions.
[2020-11-25 03:22:26,122 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:22:26,122 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:22:26,122 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:22:26,124 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:22:26,124 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:22:26,129 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:22:26,129 INFO  L82        PathProgramCache]: Analyzing trace with hash -298231664, now seen corresponding path program 1 times
[2020-11-25 03:22:26,130 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:22:26,167 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:22:26,579 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1650 trivial. 0 not checked.
[2020-11-25 03:22:26,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:22:26,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 03:22:26,580 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:22:26,580 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 03:22:26,580 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 03:22:26,580 INFO  L87              Difference]: Start difference. First operand 4212 states and 4966 transitions. cyclomatic complexity: 757 Second operand 14 states.
[2020-11-25 03:22:29,417 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:22:29,417 INFO  L93              Difference]: Finished difference Result 2491 states and 2929 transitions.
[2020-11-25 03:22:29,417 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 03:22:29,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2491 states and 2929 transitions.
[2020-11-25 03:22:29,422 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:22:29,422 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2491 states to 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:22:29,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:22:29,422 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:22:29,422 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:22:29,422 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:22:29,422 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:22:29,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:22:29,425 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:22:29 BasicIcfg
[2020-11-25 03:22:29,425 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:22:29,426 INFO  L168              Benchmark]: Toolchain (without parser) took 17015.11 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 797.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,426 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,426 INFO  L168              Benchmark]: Boogie Preprocessor took 116.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,427 INFO  L168              Benchmark]: UtopiaSpecLang took 70.26 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,427 INFO  L168              Benchmark]: Boogie Printer took 21.51 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,427 INFO  L168              Benchmark]: RCFGBuilder took 1061.75 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 897.5 MB in the beginning and 917.3 MB in the end (delta: -19.7 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,427 INFO  L168              Benchmark]: UtopiaLTL2Aut took 28.46 ms. Allocated memory is still 1.1 GB. Free memory was 917.3 MB in the beginning and 913.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,428 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2356.53 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 197.1 MB). Free memory was 913.9 MB in the beginning and 1.0 GB in the end (delta: -127.6 MB). Peak memory consumption was 490.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,428 INFO  L168              Benchmark]: BlockEncodingV2 took 217.53 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 921.8 MB in the end (delta: 119.6 MB). Peak memory consumption was 119.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,428 INFO  L168              Benchmark]: BuchiAutomizer took 13139.26 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 921.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 535.8 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:29,431 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7824 locations, 15041 edges
  - StatisticsResult: Encoded RCFG
    7610 locations, 14483 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 116.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 70.26 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.51 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1061.75 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 897.5 MB in the beginning and 917.3 MB in the end (delta: -19.7 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 28.46 ms. Allocated memory is still 1.1 GB. Free memory was 917.3 MB in the beginning and 913.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2356.53 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 197.1 MB). Free memory was 913.9 MB in the beginning and 1.0 GB in the end (delta: -127.6 MB). Peak memory consumption was 490.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 217.53 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 921.8 MB in the end (delta: 119.6 MB). Peak memory consumption was 119.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13139.26 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 921.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 535.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2936 locations, 4572 edges
  - StatisticsResult: BuchiProgram size
    7824 locations, 15041 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.1s and 12 iterations.  TraceHistogramMax:12. Analysis of lassos took 3.2s. Construction of modules took 6.5s. BÃ¼chi inclusion checks took 2.3s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 10 MinimizatonAttempts, 1078 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4578 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 51293 SDtfs, 17596 SDslu, 89200 SDs, 0 SdLazy, 91380 SolverSat, 4135 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
