This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:07:12,188 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:07:12,189 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:07:12,196 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:07:12,196 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:07:12,196 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:07:12,197 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:07:12,198 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:07:12,199 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:07:12,199 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:07:12,200 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:07:12,200 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:07:12,201 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:07:12,201 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:07:12,202 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:07:12,202 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:07:12,202 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:07:12,203 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:07:12,204 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:07:12,205 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:07:12,206 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:07:12,206 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:07:12,207 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:07:12,207 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:07:12,208 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:07:12,208 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:07:12,208 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:07:12,209 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:07:12,209 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:07:12,209 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:07:12,209 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:07:12,210 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:07:12,210 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:07:12,210 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:07:12,211 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:07:12,211 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:07:12,211 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:07:12,211 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:07:12,211 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:07:12,212 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:07:12,212 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:07:12,212 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:07:12,218 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:07:12,218 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:07:12,218 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:07:12,219 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:07:12,219 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:07:12,219 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:07:12,220 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:07:12,220 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:07:12,220 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:07:12,240 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:07:12,252 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:07:12,254 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:07:12,255 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:07:12,256 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:07:12,256 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl
[2020-11-25 03:07:12,257 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl'
[2020-11-25 03:07:12,360 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:07:12,361 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:07:12,362 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:07:12,362 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:07:12,362 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:07:12,378 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,380 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,429 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,430 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,456 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,470 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,481 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,495 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:07:12,496 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:07:12,496 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:07:12,498 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:07:12,502 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/1) ...
[2020-11-25 03:07:12,521 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:07:12,526 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:07:12,534 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:07:12,541 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s277 && amount_s277<=_balances_ERC20[this][msg.sender] ) && amount_s277>=0 ) && amount_s277<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s277]>=0 ) && _balances_ERC20[this][recipient_s277]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:07:12,544 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 03:07:12,552 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:07:12,552 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:07:12,566 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:12 PropertyContainer
[2020-11-25 03:07:12,566 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:07:12,567 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:07:12,567 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:07:12,567 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:07:12,568 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/2) ...
[2020-11-25 03:07:12,568 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:07:12,568 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:07:12,589 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:12" (2/2) ...
[2020-11-25 03:07:12,589 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:07:12,590 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:07:12,590 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:07:12,590 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:07:12,590 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/2) ...
[2020-11-25 03:07:12,646 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:07:12,646 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:07:12,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:07:12,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:07:12,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:07:12,647 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:07:12,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:07:12,648 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:07:12,648 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:07:12,648 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:07:12,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:07:12,648 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:07:12,648 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:07:12,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:07:12,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:07:12,649 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:07:12,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:07:12,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:07:12,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:07:12,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:07:12,650 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:07:12,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:07:12,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:07:12,651 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:07:12,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:07:12,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:07:12,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:07:12,652 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:07:12,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:07:12,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:07:12,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:07:12,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:07:12,653 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:07:12,654 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:07:12,654 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:07:12,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:07:12,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken
[2020-11-25 03:07:12,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:07:12,655 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:07:12,656 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:07:12,657 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OrionToken
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:07:12,658 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:07:12,659 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:07:12,660 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:07:12,661 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:07:12,662 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:07:12,663 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:07:12,664 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:07:12,665 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__success
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__fail
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:07:12,666 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:07:12,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:07:12,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:07:12,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:07:12,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:07:12,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:07:12,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:07:12,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:07:12,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:07:12,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:07:12,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:07:12,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:07:12,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:07:12,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__fail
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:07:12,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:07:12,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OrionToken
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:07:12,678 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:07:12,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:07:12,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:07:12,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:07:12,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:07:13,756 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:07:13,757 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:07:13,759 INFO  L202        PluginConnector]: Adding new model OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:13 BoogieIcfgContainer
[2020-11-25 03:07:13,759 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:12" (2/2) ...
[2020-11-25 03:07:13,759 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:07:13,760 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@46d2ae74 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:13, skipping insertion in model container
[2020-11-25 03:07:13,760 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:07:13,760 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:07:13,760 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:07:13,761 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:07:13,761 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/3) ...
[2020-11-25 03:07:13,762 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@470307d3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:13, skipping insertion in model container
[2020-11-25 03:07:13,762 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:12" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:07:13,797 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:13 NWAContainer
[2020-11-25 03:07:13,797 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:07:13,797 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:07:13,797 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:07:13,798 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:07:13,799 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:13" (3/4) ...
[2020-11-25 03:07:13,799 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7a54ca95 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:13, skipping insertion in model container
[2020-11-25 03:07:13,800 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:13" (4/4) ...
[2020-11-25 03:07:13,802 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:07:13,808 INFO  L110   BuchiProductObserver]: Initial RCFG 2932 locations, 4569 edges
[2020-11-25 03:07:13,808 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:07:13,821 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:07:16,249 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:07:16,264 INFO  L110   BuchiProductObserver]: BuchiProgram size 7816 locations, 15032 edges
[2020-11-25 03:07:16,264 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:16 BoogieIcfgContainer
[2020-11-25 03:07:16,264 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:07:16,265 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:07:16,265 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:07:16,266 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:07:16,267 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:16" (1/1) ...
[2020-11-25 03:07:16,440 INFO  L313           BlockEncoder]: Initial Icfg 7816 locations, 15032 edges
[2020-11-25 03:07:16,440 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:07:16,441 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:07:16,442 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:07:16,442 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:07:16,463 INFO  L70    emoveInfeasibleEdges]: Removed 246 edges and 23 locations because of local infeasibility
[2020-11-25 03:07:16,486 INFO  L70        RemoveSinkStates]: Removed 164 edges and 109 locations by removing sink states
[2020-11-25 03:07:16,508 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:07:16,514 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:07:16,522 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:07:16,522 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:07:16,528 INFO  L313           BlockEncoder]: Encoded RCFG 7652 locations, 14575 edges
[2020-11-25 03:07:16,529 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:07:16 BasicIcfg
[2020-11-25 03:07:16,529 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:07:16,529 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:07:16,530 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:07:16,532 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:07:16,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:12" (1/6) ...
[2020-11-25 03:07:16,534 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2dfb995f and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:16, skipping insertion in model container
[2020-11-25 03:07:16,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:12" (2/6) ...
[2020-11-25 03:07:16,534 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2dfb995f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:16, skipping insertion in model container
[2020-11-25 03:07:16,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:13" (3/6) ...
[2020-11-25 03:07:16,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2dfb995f and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:07:16, skipping insertion in model container
[2020-11-25 03:07:16,535 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,535 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:13" (4/6) ...
[2020-11-25 03:07:16,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2dfb995f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:16, skipping insertion in model container
[2020-11-25 03:07:16,535 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,535 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:16" (5/6) ...
[2020-11-25 03:07:16,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2dfb995f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:07:16, skipping insertion in model container
[2020-11-25 03:07:16,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:07:16,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:07:16" (6/6) ...
[2020-11-25 03:07:16,537 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_transfer-self.bpl_BEv2
[2020-11-25 03:07:16,575 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:07:16,575 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:07:16,575 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:07:16,575 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:07:16,575 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:07:16,576 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:07:16,576 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:07:16,576 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:07:16,576 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:07:16,641 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:07:16,719 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:16,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:16,719 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:16,728 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:16,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:16,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:07:16,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:07:16,766 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:16,766 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:16,766 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:16,768 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:16,768 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:16,786 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:16,786 INFO  L82        PathProgramCache]: Analyzing trace with hash 1286493377, now seen corresponding path program 1 times
[2020-11-25 03:07:16,792 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:16,814 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:16,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:07:16,859 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:16,859 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:07:17,246 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:17,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:07:17,255 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:07:17,256 INFO  L87              Difference]: Start difference. First operand 7652 states. Second operand 4 states.
[2020-11-25 03:07:18,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:18,040 INFO  L93              Difference]: Finished difference Result 4406 states and 5664 transitions.
[2020-11-25 03:07:18,040 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:07:18,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4406 states and 5664 transitions.
[2020-11-25 03:07:18,066 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:18,096 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4406 states to 4406 states and 5664 transitions.
[2020-11-25 03:07:18,097 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 03:07:18,099 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 768
[2020-11-25 03:07:18,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4406 states and 5664 transitions.
[2020-11-25 03:07:18,110 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:18,111 INFO  L728         BuchiCegarLoop]: Abstraction has 4406 states and 5664 transitions.
[2020-11-25 03:07:18,127 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4406 states and 5664 transitions.
[2020-11-25 03:07:18,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4406 to 4406.
[2020-11-25 03:07:18,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4406 states.
[2020-11-25 03:07:18,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4406 states to 4406 states and 5664 transitions.
[2020-11-25 03:07:18,199 INFO  L751         BuchiCegarLoop]: Abstraction has 4406 states and 5664 transitions.
[2020-11-25 03:07:18,199 INFO  L631         BuchiCegarLoop]: Abstraction has 4406 states and 5664 transitions.
[2020-11-25 03:07:18,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:07:18,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4406 states and 5664 transitions.
[2020-11-25 03:07:18,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:18,209 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:18,209 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:18,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:18,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:18,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:18,215 INFO  L82        PathProgramCache]: Analyzing trace with hash 305044657, now seen corresponding path program 1 times
[2020-11-25 03:07:18,216 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:18,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:18,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:07:18,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:18,244 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:18,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:18,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:18,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:18,246 INFO  L87              Difference]: Start difference. First operand 4406 states and 5664 transitions. cyclomatic complexity: 1260 Second operand 3 states.
[2020-11-25 03:07:18,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:18,415 INFO  L93              Difference]: Finished difference Result 5626 states and 6979 transitions.
[2020-11-25 03:07:18,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:18,416 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5626 states and 6979 transitions.
[2020-11-25 03:07:18,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:07:18,466 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5626 states to 5626 states and 6979 transitions.
[2020-11-25 03:07:18,466 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-25 03:07:18,468 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-25 03:07:18,468 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5626 states and 6979 transitions.
[2020-11-25 03:07:18,475 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:18,475 INFO  L728         BuchiCegarLoop]: Abstraction has 5626 states and 6979 transitions.
[2020-11-25 03:07:18,482 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5626 states and 6979 transitions.
[2020-11-25 03:07:18,553 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5626 to 5032.
[2020-11-25 03:07:18,553 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5032 states.
[2020-11-25 03:07:18,562 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5032 states to 5032 states and 6261 transitions.
[2020-11-25 03:07:18,563 INFO  L751         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:07:18,563 INFO  L631         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:07:18,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:07:18,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5032 states and 6261 transitions.
[2020-11-25 03:07:18,572 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:18,573 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:18,573 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:18,576 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:18,577 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND FALSE  !(DType[this] == ERC20Capped)
[L4390]  COND TRUE   DType[this] == ERC20Mintable
[L4391]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4391]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4392]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:18,583 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:18,583 INFO  L82        PathProgramCache]: Analyzing trace with hash 1138717289, now seen corresponding path program 1 times
[2020-11-25 03:07:18,584 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:18,599 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:18,682 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:07:18,682 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:18,682 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:18,683 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:18,683 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:18,683 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:18,684 INFO  L87              Difference]: Start difference. First operand 5032 states and 6261 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:07:18,784 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:18,784 INFO  L93              Difference]: Finished difference Result 5037 states and 6266 transitions.
[2020-11-25 03:07:18,784 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:18,784 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5037 states and 6266 transitions.
[2020-11-25 03:07:18,804 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:18,831 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5037 states to 5037 states and 6266 transitions.
[2020-11-25 03:07:18,832 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 960
[2020-11-25 03:07:18,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 960
[2020-11-25 03:07:18,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5037 states and 6266 transitions.
[2020-11-25 03:07:18,839 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:18,839 INFO  L728         BuchiCegarLoop]: Abstraction has 5037 states and 6266 transitions.
[2020-11-25 03:07:18,845 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5037 states and 6266 transitions.
[2020-11-25 03:07:18,909 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5037 to 5033.
[2020-11-25 03:07:18,909 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5033 states.
[2020-11-25 03:07:18,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5033 states to 5033 states and 6262 transitions.
[2020-11-25 03:07:18,920 INFO  L751         BuchiCegarLoop]: Abstraction has 5033 states and 6262 transitions.
[2020-11-25 03:07:18,920 INFO  L631         BuchiCegarLoop]: Abstraction has 5033 states and 6262 transitions.
[2020-11-25 03:07:18,920 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:07:18,920 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5033 states and 6262 transitions.
[2020-11-25 03:07:18,932 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:18,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:18,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:18,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:18,936 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:18,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:18,941 INFO  L82        PathProgramCache]: Analyzing trace with hash -1038010618, now seen corresponding path program 1 times
[2020-11-25 03:07:18,942 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:18,972 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:19,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:07:19,029 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:07:19,029 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:07:19,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:19,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:07:19,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:07:19,029 INFO  L87              Difference]: Start difference. First operand 5033 states and 6262 transitions. cyclomatic complexity: 1231 Second operand 12 states.
[2020-11-25 03:07:19,236 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:19,236 INFO  L93              Difference]: Finished difference Result 5093 states and 6353 transitions.
[2020-11-25 03:07:19,236 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:07:19,236 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5093 states and 6353 transitions.
[2020-11-25 03:07:19,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:19,263 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5093 states to 5093 states and 6353 transitions.
[2020-11-25 03:07:19,263 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 976
[2020-11-25 03:07:19,264 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 976
[2020-11-25 03:07:19,264 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5093 states and 6353 transitions.
[2020-11-25 03:07:19,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:19,269 INFO  L728         BuchiCegarLoop]: Abstraction has 5093 states and 6353 transitions.
[2020-11-25 03:07:19,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5093 states and 6353 transitions.
[2020-11-25 03:07:19,311 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5093 to 5077.
[2020-11-25 03:07:19,311 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5077 states.
[2020-11-25 03:07:19,317 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5077 states to 5077 states and 6329 transitions.
[2020-11-25 03:07:19,317 INFO  L751         BuchiCegarLoop]: Abstraction has 5077 states and 6329 transitions.
[2020-11-25 03:07:19,317 INFO  L631         BuchiCegarLoop]: Abstraction has 5077 states and 6329 transitions.
[2020-11-25 03:07:19,318 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:07:19,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5077 states and 6329 transitions.
[2020-11-25 03:07:19,324 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:19,324 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:19,324 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:19,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:19,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND TRUE   !!__var_27
[L4223]              revert := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND TRUE   !(sender_s460 != null)
[L3801]              revert := true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND TRUE   revert
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:19,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:19,330 INFO  L82        PathProgramCache]: Analyzing trace with hash -442703965, now seen corresponding path program 1 times
[2020-11-25 03:07:19,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:19,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:19,375 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:07:19,375 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:19,376 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:19,376 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:19,376 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:19,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:19,376 INFO  L87              Difference]: Start difference. First operand 5077 states and 6329 transitions. cyclomatic complexity: 1254 Second operand 3 states.
[2020-11-25 03:07:19,451 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:19,452 INFO  L93              Difference]: Finished difference Result 5647 states and 6740 transitions.
[2020-11-25 03:07:19,452 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:19,452 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5647 states and 6740 transitions.
[2020-11-25 03:07:19,462 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:07:19,475 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5647 states to 5177 states and 6154 transitions.
[2020-11-25 03:07:19,475 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 977
[2020-11-25 03:07:19,476 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1025
[2020-11-25 03:07:19,476 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5177 states and 6154 transitions.
[2020-11-25 03:07:19,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:19,480 INFO  L728         BuchiCegarLoop]: Abstraction has 5177 states and 6154 transitions.
[2020-11-25 03:07:19,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5177 states and 6154 transitions.
[2020-11-25 03:07:19,510 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5177 to 4663.
[2020-11-25 03:07:19,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4663 states.
[2020-11-25 03:07:19,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4663 states to 4663 states and 5516 transitions.
[2020-11-25 03:07:19,515 INFO  L751         BuchiCegarLoop]: Abstraction has 4663 states and 5516 transitions.
[2020-11-25 03:07:19,515 INFO  L631         BuchiCegarLoop]: Abstraction has 4663 states and 5516 transitions.
[2020-11-25 03:07:19,515 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:07:19,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4663 states and 5516 transitions.
[2020-11-25 03:07:19,519 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:19,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:19,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:19,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:19,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND TRUE   !(sender_s460 != null)
[L3769]              revert := true;
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND TRUE   !(sender_s460 != null)
[L3769]              revert := true;
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:19,528 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:19,528 INFO  L82        PathProgramCache]: Analyzing trace with hash -1123460898, now seen corresponding path program 1 times
[2020-11-25 03:07:19,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:19,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:19,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:07:19,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:19,731 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:07:19,731 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:19,731 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:07:19,731 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:07:19,732 INFO  L87              Difference]: Start difference. First operand 4663 states and 5516 transitions. cyclomatic complexity: 855 Second operand 8 states.
[2020-11-25 03:07:19,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:19,860 INFO  L93              Difference]: Finished difference Result 4695 states and 5560 transitions.
[2020-11-25 03:07:19,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:07:19,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4695 states and 5560 transitions.
[2020-11-25 03:07:19,872 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:19,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4695 states to 4667 states and 5526 transitions.
[2020-11-25 03:07:19,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 908
[2020-11-25 03:07:19,885 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 908
[2020-11-25 03:07:19,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4667 states and 5526 transitions.
[2020-11-25 03:07:19,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:19,887 INFO  L728         BuchiCegarLoop]: Abstraction has 4667 states and 5526 transitions.
[2020-11-25 03:07:19,891 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4667 states and 5526 transitions.
[2020-11-25 03:07:19,931 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4667 to 4667.
[2020-11-25 03:07:19,932 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4667 states.
[2020-11-25 03:07:19,939 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4667 states to 4667 states and 5526 transitions.
[2020-11-25 03:07:19,940 INFO  L751         BuchiCegarLoop]: Abstraction has 4667 states and 5526 transitions.
[2020-11-25 03:07:19,940 INFO  L631         BuchiCegarLoop]: Abstraction has 4667 states and 5526 transitions.
[2020-11-25 03:07:19,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:07:19,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4667 states and 5526 transitions.
[2020-11-25 03:07:19,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:19,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:19,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:19,952 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:19,952 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND TRUE   !(recipient_s460 != null)
[L3774]              revert := true;
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND TRUE   !(recipient_s460 != null)
[L3774]              revert := true;
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:19,959 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:19,960 INFO  L82        PathProgramCache]: Analyzing trace with hash -1354628622, now seen corresponding path program 1 times
[2020-11-25 03:07:19,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:19,988 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:20,283 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:07:20,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:20,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:07:20,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:20,284 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:07:20,284 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:07:20,284 INFO  L87              Difference]: Start difference. First operand 4667 states and 5526 transitions. cyclomatic complexity: 861 Second operand 7 states.
[2020-11-25 03:07:20,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:20,342 INFO  L93              Difference]: Finished difference Result 4777 states and 5657 transitions.
[2020-11-25 03:07:20,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:07:20,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4777 states and 5657 transitions.
[2020-11-25 03:07:20,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:20,362 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4777 states to 4769 states and 5649 transitions.
[2020-11-25 03:07:20,362 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 931
[2020-11-25 03:07:20,362 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 931
[2020-11-25 03:07:20,362 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4769 states and 5649 transitions.
[2020-11-25 03:07:20,366 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:20,366 INFO  L728         BuchiCegarLoop]: Abstraction has 4769 states and 5649 transitions.
[2020-11-25 03:07:20,370 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4769 states and 5649 transitions.
[2020-11-25 03:07:20,399 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4769 to 4756.
[2020-11-25 03:07:20,399 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4756 states.
[2020-11-25 03:07:20,404 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4756 states to 4756 states and 5634 transitions.
[2020-11-25 03:07:20,404 INFO  L751         BuchiCegarLoop]: Abstraction has 4756 states and 5634 transitions.
[2020-11-25 03:07:20,404 INFO  L631         BuchiCegarLoop]: Abstraction has 4756 states and 5634 transitions.
[2020-11-25 03:07:20,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:07:20,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4756 states and 5634 transitions.
[2020-11-25 03:07:20,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:20,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:20,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:20,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:20,412 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:20,417 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:20,417 INFO  L82        PathProgramCache]: Analyzing trace with hash -1206245511, now seen corresponding path program 1 times
[2020-11-25 03:07:20,418 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:20,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:21,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 40 proven. 0 refuted. 0 times theorem prover too weak. 1516 trivial. 0 not checked.
[2020-11-25 03:07:21,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:21,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-25 03:07:21,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:21,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 03:07:21,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=741, Unknown=0, NotChecked=0, Total=812
[2020-11-25 03:07:21,249 INFO  L87              Difference]: Start difference. First operand 4756 states and 5634 transitions. cyclomatic complexity: 880 Second operand 29 states.
[2020-11-25 03:07:31,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:31,556 INFO  L93              Difference]: Finished difference Result 5004 states and 5959 transitions.
[2020-11-25 03:07:31,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 03:07:31,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5004 states and 5959 transitions.
[2020-11-25 03:07:31,567 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 03:07:31,579 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5004 states to 5004 states and 5959 transitions.
[2020-11-25 03:07:31,579 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1007
[2020-11-25 03:07:31,580 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1007
[2020-11-25 03:07:31,581 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5004 states and 5959 transitions.
[2020-11-25 03:07:31,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:31,585 INFO  L728         BuchiCegarLoop]: Abstraction has 5004 states and 5959 transitions.
[2020-11-25 03:07:31,588 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5004 states and 5959 transitions.
[2020-11-25 03:07:31,618 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5004 to 4997.
[2020-11-25 03:07:31,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4997 states.
[2020-11-25 03:07:31,624 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4997 states to 4997 states and 5952 transitions.
[2020-11-25 03:07:31,624 INFO  L751         BuchiCegarLoop]: Abstraction has 4997 states and 5952 transitions.
[2020-11-25 03:07:31,624 INFO  L631         BuchiCegarLoop]: Abstraction has 4997 states and 5952 transitions.
[2020-11-25 03:07:31,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:07:31,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4997 states and 5952 transitions.
[2020-11-25 03:07:31,630 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 03:07:31,630 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:31,630 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:31,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:31,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND TRUE   __exception
[L1753]              __tmp__Balance := Balance;
[L1754]              __tmp__DType := DType;
[L1755]              __tmp__Alloc := Alloc;
[L1756]              __tmp__balance_ADDR := balance_ADDR;
[L1757]              __tmp__M_Ref_int := M_Ref_int;
[L1758]              __tmp__sum__balances0 := sum__balances0;
[L1759]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1760]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1761]              __tmp__sum__allowances1 := sum__allowances1;
[L1762]              __tmp__M_Ref_bool := M_Ref_bool;
[L1763]              __tmp__sum := sum;
[L1764]              __tmp__Length := Length;
[L1765]              __tmp__now := now;
[L1766]              __tmp___balances_ERC20 := _balances_ERC20;
[L1767]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1768]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1769]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1770]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1771]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1772]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1773]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1774]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1775]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5057]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L5057]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L5061]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4803]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4803]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4804]  COND FALSE  !(revert)
[L4807]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4776]              assume msgsender_MSG != null;
[L4777]              __tmp__Balance[this] := 0;
[L4778]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4779]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4782]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4783]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4784]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4807]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4808]  COND FALSE  !(revert)
[L5065]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L5069]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L5073]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L5073]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L5077]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4891]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4891]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4892]  COND FALSE  !(revert)
[L4895]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4895]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]  COND FALSE  !(revert)
[L4899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]  COND FALSE  !(revert)
[L4903]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4903]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4904]  COND FALSE  !(revert)
[L4907]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L4907]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4908]  COND FALSE  !(revert)
[L4911]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4864]              assume msgsender_MSG != null;
[L4865]              __tmp__Balance[this] := 0;
[L4866]              __tmp___cap_ERC20Capped[this] := 0;
[L4868]  COND FALSE  !(!(cap_s903 > 0))
[L4872]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4911]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4912]  COND FALSE  !(revert)
[L5081]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              __tmp__Balance[this] := 0;
[L5085]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L1775]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume revert || gas < 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:31,637 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:31,637 INFO  L82        PathProgramCache]: Analyzing trace with hash 1380112170, now seen corresponding path program 1 times
[2020-11-25 03:07:31,638 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:31,656 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:31,827 INFO  L134       CoverageAnalysis]: Checked inductivity of 1526 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1526 trivial. 0 not checked.
[2020-11-25 03:07:31,827 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:31,827 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:07:31,828 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:31,828 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:07:31,828 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:07:31,828 INFO  L87              Difference]: Start difference. First operand 4997 states and 5952 transitions. cyclomatic complexity: 963 Second operand 4 states.
[2020-11-25 03:07:32,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:32,382 INFO  L93              Difference]: Finished difference Result 5901 states and 7154 transitions.
[2020-11-25 03:07:32,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:07:32,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5901 states and 7154 transitions.
[2020-11-25 03:07:32,394 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 03:07:32,407 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5901 states to 5643 states and 6868 transitions.
[2020-11-25 03:07:32,407 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1231
[2020-11-25 03:07:32,408 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1231
[2020-11-25 03:07:32,408 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5643 states and 6868 transitions.
[2020-11-25 03:07:32,411 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:32,411 INFO  L728         BuchiCegarLoop]: Abstraction has 5643 states and 6868 transitions.
[2020-11-25 03:07:32,415 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5643 states and 6868 transitions.
[2020-11-25 03:07:32,445 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5643 to 4949.
[2020-11-25 03:07:32,445 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4949 states.
[2020-11-25 03:07:32,450 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4949 states to 4949 states and 5926 transitions.
[2020-11-25 03:07:32,450 INFO  L751         BuchiCegarLoop]: Abstraction has 4949 states and 5926 transitions.
[2020-11-25 03:07:32,450 INFO  L631         BuchiCegarLoop]: Abstraction has 4949 states and 5926 transitions.
[2020-11-25 03:07:32,450 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:07:32,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4949 states and 5926 transitions.
[2020-11-25 03:07:32,456 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:07:32,456 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:32,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:32,457 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:32,458 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND FALSE  !(!(recipient_s460 != null))
[L3777]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2744]  COND TRUE   !(b_s53 <= a_s53)
[L2745]              revert := true;
[L3777]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3778]  COND TRUE   revert
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:32,462 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:32,462 INFO  L82        PathProgramCache]: Analyzing trace with hash -653596118, now seen corresponding path program 1 times
[2020-11-25 03:07:32,463 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:32,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:32,665 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:07:32,666 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:32,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 03:07:32,666 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:32,666 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 03:07:32,666 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 03:07:32,666 INFO  L87              Difference]: Start difference. First operand 4949 states and 5926 transitions. cyclomatic complexity: 981 Second operand 10 states.
[2020-11-25 03:07:34,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:34,707 INFO  L93              Difference]: Finished difference Result 5067 states and 6085 transitions.
[2020-11-25 03:07:34,707 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 03:07:34,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5067 states and 6085 transitions.
[2020-11-25 03:07:34,718 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 03:07:34,735 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5067 states to 5067 states and 6085 transitions.
[2020-11-25 03:07:34,735 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1175
[2020-11-25 03:07:34,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1175
[2020-11-25 03:07:34,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5067 states and 6085 transitions.
[2020-11-25 03:07:34,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:34,738 INFO  L728         BuchiCegarLoop]: Abstraction has 5067 states and 6085 transitions.
[2020-11-25 03:07:34,742 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5067 states and 6085 transitions.
[2020-11-25 03:07:34,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5067 to 4772.
[2020-11-25 03:07:34,769 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4772 states.
[2020-11-25 03:07:34,773 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4772 states to 4772 states and 5696 transitions.
[2020-11-25 03:07:34,773 INFO  L751         BuchiCegarLoop]: Abstraction has 4772 states and 5696 transitions.
[2020-11-25 03:07:34,774 INFO  L631         BuchiCegarLoop]: Abstraction has 4772 states and 5696 transitions.
[2020-11-25 03:07:34,774 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:07:34,774 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4772 states and 5696 transitions.
[2020-11-25 03:07:34,778 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:07:34,779 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:34,779 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:34,780 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:34,780 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND FALSE  !(!(recipient_s460 != null))
[L3777]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2744]  COND FALSE  !(!(b_s53 <= a_s53))
[L2748]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2749]              __ret_0_ := c_s53;
[L3777]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3778]  COND FALSE  !(revert)
[L3781]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s460];
[L3782]              __tmp___balances_ERC20[this][sender_s460] := __var_14;
[L3783]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s460];
[L3784]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L2720]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  COND TRUE   !(c_s26 >= a_s26)
[L2722]              revert := true;
[L3784]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L3785]  COND TRUE   revert
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:34,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:34,785 INFO  L82        PathProgramCache]: Analyzing trace with hash 1027770703, now seen corresponding path program 1 times
[2020-11-25 03:07:34,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:34,807 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:35,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 40 proven. 0 refuted. 0 times theorem prover too weak. 1516 trivial. 0 not checked.
[2020-11-25 03:07:35,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:35,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 03:07:35,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:35,108 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 03:07:35,108 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=551, Unknown=0, NotChecked=0, Total=600
[2020-11-25 03:07:35,109 INFO  L87              Difference]: Start difference. First operand 4772 states and 5696 transitions. cyclomatic complexity: 928 Second operand 25 states.
[2020-11-25 03:07:41,664 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:41,664 INFO  L93              Difference]: Finished difference Result 4808 states and 5737 transitions.
[2020-11-25 03:07:41,664 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 03:07:41,664 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4808 states and 5737 transitions.
[2020-11-25 03:07:41,673 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:07:41,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4808 states to 4805 states and 5734 transitions.
[2020-11-25 03:07:41,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1054
[2020-11-25 03:07:41,682 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1054
[2020-11-25 03:07:41,682 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4805 states and 5734 transitions.
[2020-11-25 03:07:41,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:41,685 INFO  L728         BuchiCegarLoop]: Abstraction has 4805 states and 5734 transitions.
[2020-11-25 03:07:41,688 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4805 states and 5734 transitions.
[2020-11-25 03:07:41,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4805 to 4741.
[2020-11-25 03:07:41,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4741 states.
[2020-11-25 03:07:41,714 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4741 states to 4741 states and 5654 transitions.
[2020-11-25 03:07:41,714 INFO  L751         BuchiCegarLoop]: Abstraction has 4741 states and 5654 transitions.
[2020-11-25 03:07:41,714 INFO  L631         BuchiCegarLoop]: Abstraction has 4741 states and 5654 transitions.
[2020-11-25 03:07:41,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:07:41,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4741 states and 5654 transitions.
[2020-11-25 03:07:41,718 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:07:41,718 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:41,718 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:41,720 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:41,720 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND FALSE  !(!(recipient_s460 != null))
[L3777]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2744]  COND FALSE  !(!(b_s53 <= a_s53))
[L2748]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2749]              __ret_0_ := c_s53;
[L3777]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3778]  COND FALSE  !(revert)
[L3781]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s460];
[L3782]              __tmp___balances_ERC20[this][sender_s460] := __var_14;
[L3783]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s460];
[L3784]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L2720]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  COND FALSE  !(!(c_s26 >= a_s26))
[L2725]              __ret_0_ := c_s26;
[L3784]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L3785]  COND FALSE  !(revert)
[L3788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s460];
[L3789]              __tmp___balances_ERC20[this][recipient_s460] := __var_15;
[L3790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s460];
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND FALSE  !(revert)
[L3048]              __ret_0_ := true;
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:41,724 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:41,725 INFO  L82        PathProgramCache]: Analyzing trace with hash 1894300020, now seen corresponding path program 1 times
[2020-11-25 03:07:41,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:41,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:41,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:07:41,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:41,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:07:41,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:41,902 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:07:41,902 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:07:41,903 INFO  L87              Difference]: Start difference. First operand 4741 states and 5654 transitions. cyclomatic complexity: 917 Second operand 5 states.
[2020-11-25 03:07:42,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:42,725 INFO  L93              Difference]: Finished difference Result 5284 states and 6281 transitions.
[2020-11-25 03:07:42,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:07:42,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5284 states and 6281 transitions.
[2020-11-25 03:07:42,736 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 03:07:42,745 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5284 states to 4614 states and 5560 transitions.
[2020-11-25 03:07:42,745 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 757
[2020-11-25 03:07:42,746 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 757
[2020-11-25 03:07:42,746 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4614 states and 5560 transitions.
[2020-11-25 03:07:42,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:42,749 INFO  L728         BuchiCegarLoop]: Abstraction has 4614 states and 5560 transitions.
[2020-11-25 03:07:42,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4614 states and 5560 transitions.
[2020-11-25 03:07:42,771 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4614 to 3979.
[2020-11-25 03:07:42,771 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3979 states.
[2020-11-25 03:07:42,777 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3979 states to 3979 states and 4750 transitions.
[2020-11-25 03:07:42,777 INFO  L751         BuchiCegarLoop]: Abstraction has 3979 states and 4750 transitions.
[2020-11-25 03:07:42,777 INFO  L631         BuchiCegarLoop]: Abstraction has 3979 states and 4750 transitions.
[2020-11-25 03:07:42,777 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:07:42,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3979 states and 4750 transitions.
[2020-11-25 03:07:42,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:42,783 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:42,783 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:42,785 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:42,785 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND TRUE   DType[this] == ERC20Capped
[L6649]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6649]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6650]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND FALSE  !(DType[this] == ERC20Capped)
[L6676]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6681]  COND TRUE   DType[this] == MinterRole
[L6682]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6682]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6683]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:42,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:42,790 INFO  L82        PathProgramCache]: Analyzing trace with hash 709222527, now seen corresponding path program 1 times
[2020-11-25 03:07:42,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:42,808 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:43,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:07:43,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:43,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:43,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:43,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:43,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:43,050 INFO  L87              Difference]: Start difference. First operand 3979 states and 4750 transitions. cyclomatic complexity: 774 Second operand 3 states.
[2020-11-25 03:07:43,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:43,091 INFO  L93              Difference]: Finished difference Result 3989 states and 4762 transitions.
[2020-11-25 03:07:43,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:43,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3989 states and 4762 transitions.
[2020-11-25 03:07:43,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3989 states to 3989 states and 4762 transitions.
[2020-11-25 03:07:43,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 658
[2020-11-25 03:07:43,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 658
[2020-11-25 03:07:43,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3989 states and 4762 transitions.
[2020-11-25 03:07:43,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:43,106 INFO  L728         BuchiCegarLoop]: Abstraction has 3989 states and 4762 transitions.
[2020-11-25 03:07:43,109 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3989 states and 4762 transitions.
[2020-11-25 03:07:43,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3989 to 3983.
[2020-11-25 03:07:43,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3983 states.
[2020-11-25 03:07:43,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3983 states to 3983 states and 4754 transitions.
[2020-11-25 03:07:43,128 INFO  L751         BuchiCegarLoop]: Abstraction has 3983 states and 4754 transitions.
[2020-11-25 03:07:43,128 INFO  L631         BuchiCegarLoop]: Abstraction has 3983 states and 4754 transitions.
[2020-11-25 03:07:43,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 03:07:43,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3983 states and 4754 transitions.
[2020-11-25 03:07:43,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,132 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:43,132 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:43,134 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:43,134 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND TRUE   DType[this] == ERC20Mintable
[L6654]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6654]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6655]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND FALSE  !(DType[this] == ERC20Capped)
[L6676]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6681]  COND TRUE   DType[this] == MinterRole
[L6682]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6682]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6683]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:43,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:43,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 1386773099, now seen corresponding path program 1 times
[2020-11-25 03:07:43,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:43,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:43,368 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:07:43,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:43,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:43,369 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:43,369 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:43,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:43,369 INFO  L87              Difference]: Start difference. First operand 3983 states and 4754 transitions. cyclomatic complexity: 774 Second operand 3 states.
[2020-11-25 03:07:43,408 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:43,408 INFO  L93              Difference]: Finished difference Result 3995 states and 4768 transitions.
[2020-11-25 03:07:43,408 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:43,408 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3995 states and 4768 transitions.
[2020-11-25 03:07:43,414 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3995 states to 3995 states and 4768 transitions.
[2020-11-25 03:07:43,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 658
[2020-11-25 03:07:43,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 658
[2020-11-25 03:07:43,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3995 states and 4768 transitions.
[2020-11-25 03:07:43,422 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:43,422 INFO  L728         BuchiCegarLoop]: Abstraction has 3995 states and 4768 transitions.
[2020-11-25 03:07:43,425 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3995 states and 4768 transitions.
[2020-11-25 03:07:43,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3995 to 3989.
[2020-11-25 03:07:43,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3989 states.
[2020-11-25 03:07:43,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3989 states to 3989 states and 4760 transitions.
[2020-11-25 03:07:43,444 INFO  L751         BuchiCegarLoop]: Abstraction has 3989 states and 4760 transitions.
[2020-11-25 03:07:43,444 INFO  L631         BuchiCegarLoop]: Abstraction has 3989 states and 4760 transitions.
[2020-11-25 03:07:43,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 03:07:43,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3989 states and 4760 transitions.
[2020-11-25 03:07:43,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,448 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:43,448 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:43,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:43,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6658]  COND TRUE   DType[this] == MinterRole
[L6659]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6659]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND TRUE   DType[this] == ERC20Capped
[L6672]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6672]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6673]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:43,454 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:43,454 INFO  L82        PathProgramCache]: Analyzing trace with hash -1738251931, now seen corresponding path program 1 times
[2020-11-25 03:07:43,455 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:43,471 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:43,680 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:07:43,680 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:43,680 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:43,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:43,680 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:43,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:43,681 INFO  L87              Difference]: Start difference. First operand 3989 states and 4760 transitions. cyclomatic complexity: 774 Second operand 3 states.
[2020-11-25 03:07:43,715 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:43,716 INFO  L93              Difference]: Finished difference Result 3995 states and 4766 transitions.
[2020-11-25 03:07:43,716 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:43,716 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3995 states and 4766 transitions.
[2020-11-25 03:07:43,722 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,728 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3995 states to 3995 states and 4766 transitions.
[2020-11-25 03:07:43,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 658
[2020-11-25 03:07:43,729 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 658
[2020-11-25 03:07:43,729 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3995 states and 4766 transitions.
[2020-11-25 03:07:43,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:43,731 INFO  L728         BuchiCegarLoop]: Abstraction has 3995 states and 4766 transitions.
[2020-11-25 03:07:43,733 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3995 states and 4766 transitions.
[2020-11-25 03:07:43,749 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3995 to 3989.
[2020-11-25 03:07:43,749 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3989 states.
[2020-11-25 03:07:43,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3989 states to 3989 states and 4758 transitions.
[2020-11-25 03:07:43,753 INFO  L751         BuchiCegarLoop]: Abstraction has 3989 states and 4758 transitions.
[2020-11-25 03:07:43,753 INFO  L631         BuchiCegarLoop]: Abstraction has 3989 states and 4758 transitions.
[2020-11-25 03:07:43,753 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 03:07:43,753 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3989 states and 4758 transitions.
[2020-11-25 03:07:43,756 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:43,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:43,757 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:43,758 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:43,758 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND TRUE   DType[this] == ERC20Capped
[L6649]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6649]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6650]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND TRUE   DType[this] == ERC20Capped
[L6672]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6672]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6673]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND FALSE  !(DType[this] == OrionToken)
[L4756]  COND FALSE  !(DType[this] == ERC20Capped)
[L4761]  COND TRUE   DType[this] == ERC20Mintable
[L4762]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4762]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4763]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:43,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:43,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1337838443, now seen corresponding path program 1 times
[2020-11-25 03:07:43,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:43,780 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:44,024 INFO  L134       CoverageAnalysis]: Checked inductivity of 1655 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1654 trivial. 0 not checked.
[2020-11-25 03:07:44,025 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:44,025 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:07:44,025 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:44,025 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:07:44,025 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:07:44,026 INFO  L87              Difference]: Start difference. First operand 3989 states and 4758 transitions. cyclomatic complexity: 772 Second operand 6 states.
[2020-11-25 03:07:44,110 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:44,110 INFO  L93              Difference]: Finished difference Result 4009 states and 4776 transitions.
[2020-11-25 03:07:44,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 03:07:44,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4009 states and 4776 transitions.
[2020-11-25 03:07:44,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:44,123 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4009 states to 3969 states and 4730 transitions.
[2020-11-25 03:07:44,123 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 654
[2020-11-25 03:07:44,123 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 654
[2020-11-25 03:07:44,123 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3969 states and 4730 transitions.
[2020-11-25 03:07:44,125 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:44,126 INFO  L728         BuchiCegarLoop]: Abstraction has 3969 states and 4730 transitions.
[2020-11-25 03:07:44,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3969 states and 4730 transitions.
[2020-11-25 03:07:44,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3969 to 3969.
[2020-11-25 03:07:44,143 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3969 states.
[2020-11-25 03:07:44,146 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3969 states to 3969 states and 4730 transitions.
[2020-11-25 03:07:44,146 INFO  L751         BuchiCegarLoop]: Abstraction has 3969 states and 4730 transitions.
[2020-11-25 03:07:44,146 INFO  L631         BuchiCegarLoop]: Abstraction has 3969 states and 4730 transitions.
[2020-11-25 03:07:44,146 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 03:07:44,146 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3969 states and 4730 transitions.
[2020-11-25 03:07:44,150 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:44,150 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:44,150 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:44,151 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:44,151 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND FALSE  !(DType[this] == OrionToken)
[L3361]  COND FALSE  !(DType[this] == ERC20Capped)
[L3366]  COND TRUE   DType[this] == ERC20Mintable
[L3367]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3367]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND FALSE  !(DType[this] == OrionToken)
[L3411]  COND FALSE  !(DType[this] == ERC20Capped)
[L3416]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3421]  COND TRUE   DType[this] == ERC20
[L3422]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3422]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3423]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:44,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:44,156 INFO  L82        PathProgramCache]: Analyzing trace with hash -303935431, now seen corresponding path program 1 times
[2020-11-25 03:07:44,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:44,173 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:44,375 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1649 trivial. 0 not checked.
[2020-11-25 03:07:44,376 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:07:44,376 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:07:44,376 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:44,376 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:07:44,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:07:44,376 INFO  L87              Difference]: Start difference. First operand 3969 states and 4730 transitions. cyclomatic complexity: 764 Second operand 3 states.
[2020-11-25 03:07:44,409 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:07:44,409 INFO  L93              Difference]: Finished difference Result 3987 states and 4750 transitions.
[2020-11-25 03:07:44,409 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:07:44,409 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3987 states and 4750 transitions.
[2020-11-25 03:07:44,415 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:44,421 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3987 states to 3987 states and 4750 transitions.
[2020-11-25 03:07:44,421 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 660
[2020-11-25 03:07:44,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 660
[2020-11-25 03:07:44,422 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3987 states and 4750 transitions.
[2020-11-25 03:07:44,424 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:07:44,424 INFO  L728         BuchiCegarLoop]: Abstraction has 3987 states and 4750 transitions.
[2020-11-25 03:07:44,426 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3987 states and 4750 transitions.
[2020-11-25 03:07:44,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3987 to 3981.
[2020-11-25 03:07:44,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3981 states.
[2020-11-25 03:07:44,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3981 states to 3981 states and 4744 transitions.
[2020-11-25 03:07:44,444 INFO  L751         BuchiCegarLoop]: Abstraction has 3981 states and 4744 transitions.
[2020-11-25 03:07:44,444 INFO  L631         BuchiCegarLoop]: Abstraction has 3981 states and 4744 transitions.
[2020-11-25 03:07:44,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 03:07:44,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3981 states and 4744 transitions.
[2020-11-25 03:07:44,448 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:07:44,448 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:07:44,448 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:07:44,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:07:44,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:07:44,454 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:07:44,454 INFO  L82        PathProgramCache]: Analyzing trace with hash -1220066932, now seen corresponding path program 1 times
[2020-11-25 03:07:44,454 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:07:44,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:07:46,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 40 proven. 66 refuted. 0 times theorem prover too weak. 1544 trivial. 0 not checked.
[2020-11-25 03:07:46,596 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:07:46,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 03:07:46,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:07:46,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 03:07:46,597 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=165, Invalid=2091, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 03:07:46,597 INFO  L87              Difference]: Start difference. First operand 3981 states and 4744 transitions. cyclomatic complexity: 766 Second operand 48 states.
[2020-11-25 03:08:07,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:07,088 INFO  L93              Difference]: Finished difference Result 4022 states and 4814 transitions.
[2020-11-25 03:08:07,088 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 03:08:07,088 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4022 states and 4814 transitions.
[2020-11-25 03:08:07,095 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:08:07,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4022 states to 4022 states and 4814 transitions.
[2020-11-25 03:08:07,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 03:08:07,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 03:08:07,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4022 states and 4814 transitions.
[2020-11-25 03:08:07,105 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:07,105 INFO  L728         BuchiCegarLoop]: Abstraction has 4022 states and 4814 transitions.
[2020-11-25 03:08:07,108 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4022 states and 4814 transitions.
[2020-11-25 03:08:07,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4022 to 4012.
[2020-11-25 03:08:07,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4012 states.
[2020-11-25 03:08:07,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4012 states to 4012 states and 4786 transitions.
[2020-11-25 03:08:07,128 INFO  L751         BuchiCegarLoop]: Abstraction has 4012 states and 4786 transitions.
[2020-11-25 03:08:07,128 INFO  L631         BuchiCegarLoop]: Abstraction has 4012 states and 4786 transitions.
[2020-11-25 03:08:07,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 03:08:07,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4012 states and 4786 transitions.
[2020-11-25 03:08:07,132 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:07,132 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:07,132 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:07,133 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:07,133 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND TRUE   __exception
[L486]               __tmp__Balance := Balance;
[L487]               __tmp__DType := DType;
[L488]               __tmp__Alloc := Alloc;
[L489]               __tmp__balance_ADDR := balance_ADDR;
[L490]               __tmp__M_Ref_int := M_Ref_int;
[L491]               __tmp__sum__balances0 := sum__balances0;
[L492]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]               __tmp__sum__allowances1 := sum__allowances1;
[L495]               __tmp__M_Ref_bool := M_Ref_bool;
[L496]               __tmp__sum := sum;
[L497]               __tmp__Length := Length;
[L498]               __tmp__now := now;
[L499]               __tmp___balances_ERC20 := _balances_ERC20;
[L500]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]               __tmp___minters_MinterRole := _minters_MinterRole;
[L504]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L505]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L506]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L507]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L508]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3002]  COND TRUE   __tmp__DType[this] == OrionToken
[L3003]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L3003]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3025]  COND TRUE   __tmp__DType[this] == OrionToken
[L3026]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3767]              __var_12 := null;
[L3768]  COND FALSE  !(!(sender_s460 != null))
[L3772]              __var_13 := null;
[L3773]  COND FALSE  !(!(recipient_s460 != null))
[L3777]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2744]  COND FALSE  !(!(b_s53 <= a_s53))
[L2748]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2749]              __ret_0_ := c_s53;
[L3777]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3778]  COND FALSE  !(revert)
[L3781]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s460];
[L3782]              __tmp___balances_ERC20[this][sender_s460] := __var_14;
[L3783]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s460];
[L3784]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L2720]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  COND TRUE   !(c_s26 >= a_s26)
[L2722]              revert := true;
[L3784]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s460], amount_s460);
[L3785]  COND TRUE   revert
[L3026]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3027]  COND TRUE   revert
[L508]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L509]               assume revert || gas < 0;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:07,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:07,138 INFO  L82        PathProgramCache]: Analyzing trace with hash 1495639580, now seen corresponding path program 1 times
[2020-11-25 03:08:07,139 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:07,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:07,480 INFO  L134       CoverageAnalysis]: Checked inductivity of 1650 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1650 trivial. 0 not checked.
[2020-11-25 03:08:07,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:07,481 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 03:08:07,481 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:07,481 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 03:08:07,481 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-25 03:08:07,482 INFO  L87              Difference]: Start difference. First operand 4012 states and 4786 transitions. cyclomatic complexity: 779 Second operand 16 states.
[2020-11-25 03:08:11,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:11,703 INFO  L93              Difference]: Finished difference Result 4064 states and 4849 transitions.
[2020-11-25 03:08:11,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 03:08:11,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4064 states and 4849 transitions.
[2020-11-25 03:08:11,712 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:11,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4064 states to 4018 states and 4801 transitions.
[2020-11-25 03:08:11,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 698
[2020-11-25 03:08:11,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 698
[2020-11-25 03:08:11,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4018 states and 4801 transitions.
[2020-11-25 03:08:11,722 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:11,722 INFO  L728         BuchiCegarLoop]: Abstraction has 4018 states and 4801 transitions.
[2020-11-25 03:08:11,725 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4018 states and 4801 transitions.
[2020-11-25 03:08:11,740 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4018 to 3915.
[2020-11-25 03:08:11,740 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3915 states.
[2020-11-25 03:08:11,744 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3915 states to 3915 states and 4664 transitions.
[2020-11-25 03:08:11,744 INFO  L751         BuchiCegarLoop]: Abstraction has 3915 states and 4664 transitions.
[2020-11-25 03:08:11,744 INFO  L631         BuchiCegarLoop]: Abstraction has 3915 states and 4664 transitions.
[2020-11-25 03:08:11,744 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 03:08:11,744 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3915 states and 4664 transitions.
[2020-11-25 03:08:11,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:11,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:11,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:11,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:11,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND FALSE  !(DType[this] == OrionToken)
[L3060]  COND TRUE   DType[this] == ERC20Capped
[L3061]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3061]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3062]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:11,753 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:11,753 INFO  L82        PathProgramCache]: Analyzing trace with hash -1172820029, now seen corresponding path program 1 times
[2020-11-25 03:08:11,754 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:11,769 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:11,964 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1638 trivial. 0 not checked.
[2020-11-25 03:08:11,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:11,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:08:11,965 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:11,965 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:08:11,965 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:08:11,965 INFO  L87              Difference]: Start difference. First operand 3915 states and 4664 transitions. cyclomatic complexity: 753 Second operand 3 states.
[2020-11-25 03:08:12,105 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:12,105 INFO  L93              Difference]: Finished difference Result 3923 states and 4674 transitions.
[2020-11-25 03:08:12,106 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:08:12,106 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3923 states and 4674 transitions.
[2020-11-25 03:08:12,112 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3923 states to 3923 states and 4674 transitions.
[2020-11-25 03:08:12,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 646
[2020-11-25 03:08:12,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 03:08:12,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3923 states and 4674 transitions.
[2020-11-25 03:08:12,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:12,122 INFO  L728         BuchiCegarLoop]: Abstraction has 3923 states and 4674 transitions.
[2020-11-25 03:08:12,125 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3923 states and 4674 transitions.
[2020-11-25 03:08:12,139 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3923 to 3917.
[2020-11-25 03:08:12,139 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3917 states.
[2020-11-25 03:08:12,143 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3917 states to 3917 states and 4666 transitions.
[2020-11-25 03:08:12,143 INFO  L751         BuchiCegarLoop]: Abstraction has 3917 states and 4666 transitions.
[2020-11-25 03:08:12,143 INFO  L631         BuchiCegarLoop]: Abstraction has 3917 states and 4666 transitions.
[2020-11-25 03:08:12,143 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 03:08:12,143 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3917 states and 4666 transitions.
[2020-11-25 03:08:12,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,147 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:12,147 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:12,148 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:12,148 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND FALSE  !(DType[this] == OrionToken)
[L3060]  COND FALSE  !(DType[this] == ERC20Capped)
[L3065]  COND TRUE   DType[this] == ERC20Mintable
[L3066]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3066]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3067]  COND FALSE  !(revert)
[L3078]  COND FALSE  !(DType[this] == OrionToken)
[L3083]  COND FALSE  !(DType[this] == ERC20Capped)
[L3088]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3093]  COND TRUE   DType[this] == ERC20
[L3094]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3094]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3095]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:12,153 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:12,153 INFO  L82        PathProgramCache]: Analyzing trace with hash -1841964497, now seen corresponding path program 1 times
[2020-11-25 03:08:12,153 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:12,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:12,366 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1638 trivial. 0 not checked.
[2020-11-25 03:08:12,366 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:12,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:08:12,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:12,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:08:12,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:08:12,367 INFO  L87              Difference]: Start difference. First operand 3917 states and 4666 transitions. cyclomatic complexity: 753 Second operand 3 states.
[2020-11-25 03:08:12,398 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:12,398 INFO  L93              Difference]: Finished difference Result 3929 states and 4680 transitions.
[2020-11-25 03:08:12,398 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:08:12,398 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3929 states and 4680 transitions.
[2020-11-25 03:08:12,404 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,410 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3929 states to 3929 states and 4680 transitions.
[2020-11-25 03:08:12,410 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 646
[2020-11-25 03:08:12,410 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 03:08:12,410 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3929 states and 4680 transitions.
[2020-11-25 03:08:12,412 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:12,412 INFO  L728         BuchiCegarLoop]: Abstraction has 3929 states and 4680 transitions.
[2020-11-25 03:08:12,415 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3929 states and 4680 transitions.
[2020-11-25 03:08:12,429 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3929 to 3923.
[2020-11-25 03:08:12,429 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3923 states.
[2020-11-25 03:08:12,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3923 states to 3923 states and 4672 transitions.
[2020-11-25 03:08:12,433 INFO  L751         BuchiCegarLoop]: Abstraction has 3923 states and 4672 transitions.
[2020-11-25 03:08:12,433 INFO  L631         BuchiCegarLoop]: Abstraction has 3923 states and 4672 transitions.
[2020-11-25 03:08:12,433 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 03:08:12,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3923 states and 4672 transitions.
[2020-11-25 03:08:12,436 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:12,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:12,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:12,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND FALSE  !(DType[this] == OrionToken)
[L3060]  COND TRUE   DType[this] == ERC20Capped
[L3061]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3061]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3062]  COND FALSE  !(revert)
[L3078]  COND FALSE  !(DType[this] == OrionToken)
[L3083]  COND TRUE   DType[this] == ERC20Capped
[L3084]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3084]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3085]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:12,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:12,442 INFO  L82        PathProgramCache]: Analyzing trace with hash 1283922739, now seen corresponding path program 1 times
[2020-11-25 03:08:12,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:12,460 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:12,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1638 trivial. 0 not checked.
[2020-11-25 03:08:12,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:12,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:08:12,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:12,670 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:08:12,670 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:08:12,670 INFO  L87              Difference]: Start difference. First operand 3923 states and 4672 transitions. cyclomatic complexity: 753 Second operand 6 states.
[2020-11-25 03:08:12,755 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:12,755 INFO  L93              Difference]: Finished difference Result 3985 states and 4734 transitions.
[2020-11-25 03:08:12,755 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 03:08:12,755 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3985 states and 4734 transitions.
[2020-11-25 03:08:12,761 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3985 states to 3907 states and 4648 transitions.
[2020-11-25 03:08:12,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 641
[2020-11-25 03:08:12,768 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 641
[2020-11-25 03:08:12,768 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3907 states and 4648 transitions.
[2020-11-25 03:08:12,770 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:12,770 INFO  L728         BuchiCegarLoop]: Abstraction has 3907 states and 4648 transitions.
[2020-11-25 03:08:12,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3907 states and 4648 transitions.
[2020-11-25 03:08:12,787 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3907 to 3907.
[2020-11-25 03:08:12,787 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3907 states.
[2020-11-25 03:08:12,791 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3907 states to 3907 states and 4648 transitions.
[2020-11-25 03:08:12,791 INFO  L751         BuchiCegarLoop]: Abstraction has 3907 states and 4648 transitions.
[2020-11-25 03:08:12,791 INFO  L631         BuchiCegarLoop]: Abstraction has 3907 states and 4648 transitions.
[2020-11-25 03:08:12,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 03:08:12,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3907 states and 4648 transitions.
[2020-11-25 03:08:12,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:12,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:12,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:12,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:12,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND FALSE  !(DType[this] == OrionToken)
[L3060]  COND FALSE  !(DType[this] == ERC20Capped)
[L3065]  COND TRUE   DType[this] == ERC20Mintable
[L3066]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3066]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3067]  COND FALSE  !(revert)
[L3078]  COND FALSE  !(DType[this] == OrionToken)
[L3083]  COND FALSE  !(DType[this] == ERC20Capped)
[L3088]  COND TRUE   DType[this] == ERC20Mintable
[L3089]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3089]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3090]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:12,800 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:12,801 INFO  L82        PathProgramCache]: Analyzing trace with hash 617624098, now seen corresponding path program 1 times
[2020-11-25 03:08:12,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:12,818 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:13,058 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1638 trivial. 0 not checked.
[2020-11-25 03:08:13,058 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:13,058 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:08:13,059 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:13,059 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:08:13,059 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:08:13,059 INFO  L87              Difference]: Start difference. First operand 3907 states and 4648 transitions. cyclomatic complexity: 745 Second operand 6 states.
[2020-11-25 03:08:13,147 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:13,147 INFO  L93              Difference]: Finished difference Result 3965 states and 4706 transitions.
[2020-11-25 03:08:13,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 03:08:13,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3965 states and 4706 transitions.
[2020-11-25 03:08:13,153 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:13,160 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3965 states to 3855 states and 4580 transitions.
[2020-11-25 03:08:13,160 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 637
[2020-11-25 03:08:13,160 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 03:08:13,160 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3855 states and 4580 transitions.
[2020-11-25 03:08:13,162 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:13,162 INFO  L728         BuchiCegarLoop]: Abstraction has 3855 states and 4580 transitions.
[2020-11-25 03:08:13,165 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3855 states and 4580 transitions.
[2020-11-25 03:08:13,180 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3855 to 3855.
[2020-11-25 03:08:13,180 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3855 states.
[2020-11-25 03:08:13,183 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3855 states to 3855 states and 4580 transitions.
[2020-11-25 03:08:13,183 INFO  L751         BuchiCegarLoop]: Abstraction has 3855 states and 4580 transitions.
[2020-11-25 03:08:13,183 INFO  L631         BuchiCegarLoop]: Abstraction has 3855 states and 4580 transitions.
[2020-11-25 03:08:13,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 03:08:13,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3855 states and 4580 transitions.
[2020-11-25 03:08:13,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:08:13,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:13,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:13,188 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:13,188 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:13,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:13,193 INFO  L82        PathProgramCache]: Analyzing trace with hash -1084451884, now seen corresponding path program 1 times
[2020-11-25 03:08:13,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:13,230 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:14,533 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 48 proven. 20 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 03:08:14,533 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:08:14,533 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 03:08:14,534 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:14,534 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 03:08:14,534 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=1752, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 03:08:14,534 INFO  L87              Difference]: Start difference. First operand 3855 states and 4580 transitions. cyclomatic complexity: 729 Second operand 44 states.
[2020-11-25 03:08:32,564 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:32,564 INFO  L93              Difference]: Finished difference Result 4090 states and 4900 transitions.
[2020-11-25 03:08:32,564 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 03:08:32,564 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4090 states and 4900 transitions.
[2020-11-25 03:08:32,573 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:32,581 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4090 states to 4090 states and 4900 transitions.
[2020-11-25 03:08:32,581 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 716
[2020-11-25 03:08:32,582 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 716
[2020-11-25 03:08:32,582 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4090 states and 4900 transitions.
[2020-11-25 03:08:32,584 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:32,584 INFO  L728         BuchiCegarLoop]: Abstraction has 4090 states and 4900 transitions.
[2020-11-25 03:08:32,587 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4090 states and 4900 transitions.
[2020-11-25 03:08:32,604 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4090 to 4029.
[2020-11-25 03:08:32,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4029 states.
[2020-11-25 03:08:32,608 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4029 states to 4029 states and 4818 transitions.
[2020-11-25 03:08:32,608 INFO  L751         BuchiCegarLoop]: Abstraction has 4029 states and 4818 transitions.
[2020-11-25 03:08:32,608 INFO  L631         BuchiCegarLoop]: Abstraction has 4029 states and 4818 transitions.
[2020-11-25 03:08:32,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 03:08:32,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4029 states and 4818 transitions.
[2020-11-25 03:08:32,613 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:32,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:32,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:32,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:32,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND TRUE   DType[this] == OrionToken
[L6644]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6644]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6645]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND FALSE  !(DType[this] == OrionToken)
[L5008]  COND TRUE   DType[this] == ERC20Capped
[L5009]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5009]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5010]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND FALSE  !(DType[this] == OrionToken)
[L5029]  COND TRUE   DType[this] == ERC20Capped
[L5030]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5030]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5031]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:32,619 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:32,619 INFO  L82        PathProgramCache]: Analyzing trace with hash 554790607, now seen corresponding path program 1 times
[2020-11-25 03:08:32,620 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:32,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:32,940 INFO  L134       CoverageAnalysis]: Checked inductivity of 1665 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1664 trivial. 0 not checked.
[2020-11-25 03:08:32,940 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:32,940 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:08:32,940 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:32,941 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:08:32,941 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:08:32,941 INFO  L87              Difference]: Start difference. First operand 4029 states and 4818 transitions. cyclomatic complexity: 796 Second operand 7 states.
[2020-11-25 03:08:33,066 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:33,066 INFO  L93              Difference]: Finished difference Result 4067 states and 4857 transitions.
[2020-11-25 03:08:33,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:08:33,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4067 states and 4857 transitions.
[2020-11-25 03:08:33,074 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,081 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4067 states to 4009 states and 4790 transitions.
[2020-11-25 03:08:33,081 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 03:08:33,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 03:08:33,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4009 states and 4790 transitions.
[2020-11-25 03:08:33,084 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:33,084 INFO  L728         BuchiCegarLoop]: Abstraction has 4009 states and 4790 transitions.
[2020-11-25 03:08:33,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4009 states and 4790 transitions.
[2020-11-25 03:08:33,103 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4009 to 4009.
[2020-11-25 03:08:33,103 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4009 states.
[2020-11-25 03:08:33,107 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4009 states to 4009 states and 4790 transitions.
[2020-11-25 03:08:33,107 INFO  L751         BuchiCegarLoop]: Abstraction has 4009 states and 4790 transitions.
[2020-11-25 03:08:33,107 INFO  L631         BuchiCegarLoop]: Abstraction has 4009 states and 4790 transitions.
[2020-11-25 03:08:33,107 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 03:08:33,107 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4009 states and 4790 transitions.
[2020-11-25 03:08:33,111 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,111 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:33,111 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:33,112 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:33,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6658]  COND TRUE   DType[this] == MinterRole
[L6659]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6659]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:33,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:33,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -1409645383, now seen corresponding path program 1 times
[2020-11-25 03:08:33,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:33,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:33,368 INFO  L134       CoverageAnalysis]: Checked inductivity of 1665 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1664 trivial. 0 not checked.
[2020-11-25 03:08:33,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:33,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:08:33,369 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:33,369 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:08:33,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:08:33,369 INFO  L87              Difference]: Start difference. First operand 4009 states and 4790 transitions. cyclomatic complexity: 788 Second operand 3 states.
[2020-11-25 03:08:33,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:33,404 INFO  L93              Difference]: Finished difference Result 4017 states and 4800 transitions.
[2020-11-25 03:08:33,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:08:33,404 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4017 states and 4800 transitions.
[2020-11-25 03:08:33,411 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4017 states to 4017 states and 4800 transitions.
[2020-11-25 03:08:33,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 03:08:33,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 03:08:33,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4017 states and 4800 transitions.
[2020-11-25 03:08:33,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:33,421 INFO  L728         BuchiCegarLoop]: Abstraction has 4017 states and 4800 transitions.
[2020-11-25 03:08:33,423 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4017 states and 4800 transitions.
[2020-11-25 03:08:33,439 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4017 to 4011.
[2020-11-25 03:08:33,439 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4011 states.
[2020-11-25 03:08:33,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4011 states to 4011 states and 4792 transitions.
[2020-11-25 03:08:33,444 INFO  L751         BuchiCegarLoop]: Abstraction has 4011 states and 4792 transitions.
[2020-11-25 03:08:33,444 INFO  L631         BuchiCegarLoop]: Abstraction has 4011 states and 4792 transitions.
[2020-11-25 03:08:33,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 03:08:33,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4011 states and 4792 transitions.
[2020-11-25 03:08:33,447 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,448 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:33,448 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:33,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:33,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND TRUE   DType[this] == ERC20Capped
[L6649]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6649]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6650]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND TRUE   DType[this] == ERC20Capped
[L6672]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6672]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6673]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6658]  COND TRUE   DType[this] == MinterRole
[L6659]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6659]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND FALSE  !(DType[this] == ERC20Capped)
[L6676]  COND TRUE   DType[this] == ERC20Mintable
[L6677]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6677]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6678]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:33,454 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:33,454 INFO  L82        PathProgramCache]: Analyzing trace with hash 1111525743, now seen corresponding path program 1 times
[2020-11-25 03:08:33,454 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:33,472 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:33,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 1665 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1664 trivial. 0 not checked.
[2020-11-25 03:08:33,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:33,741 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:08:33,741 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:33,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:08:33,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:08:33,741 INFO  L87              Difference]: Start difference. First operand 4011 states and 4792 transitions. cyclomatic complexity: 788 Second operand 7 states.
[2020-11-25 03:08:33,840 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:33,840 INFO  L93              Difference]: Finished difference Result 4023 states and 4804 transitions.
[2020-11-25 03:08:33,840 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:08:33,840 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4023 states and 4804 transitions.
[2020-11-25 03:08:33,847 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,854 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4023 states to 4017 states and 4798 transitions.
[2020-11-25 03:08:33,854 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 03:08:33,855 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 03:08:33,855 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4017 states and 4798 transitions.
[2020-11-25 03:08:33,857 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:33,857 INFO  L728         BuchiCegarLoop]: Abstraction has 4017 states and 4798 transitions.
[2020-11-25 03:08:33,860 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4017 states and 4798 transitions.
[2020-11-25 03:08:33,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4017 to 4017.
[2020-11-25 03:08:33,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4017 states.
[2020-11-25 03:08:33,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4017 states to 4017 states and 4798 transitions.
[2020-11-25 03:08:33,879 INFO  L751         BuchiCegarLoop]: Abstraction has 4017 states and 4798 transitions.
[2020-11-25 03:08:33,879 INFO  L631         BuchiCegarLoop]: Abstraction has 4017 states and 4798 transitions.
[2020-11-25 03:08:33,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 03:08:33,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4017 states and 4798 transitions.
[2020-11-25 03:08:33,883 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:33,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:33,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:33,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:33,885 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND FALSE  !(DType[this] == OrionToken)
[L6648]  COND FALSE  !(DType[this] == ERC20Capped)
[L6653]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6658]  COND TRUE   DType[this] == MinterRole
[L6659]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6659]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]  COND FALSE  !(revert)
[L6666]  COND FALSE  !(DType[this] == OrionToken)
[L6671]  COND FALSE  !(DType[this] == ERC20Capped)
[L6676]  COND FALSE  !(DType[this] == ERC20Mintable)
[L6681]  COND TRUE   DType[this] == MinterRole
[L6682]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6682]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6683]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND TRUE   DType[this] == OrionToken
[L6644]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6644]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6645]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:33,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:33,889 INFO  L82        PathProgramCache]: Analyzing trace with hash -1783368843, now seen corresponding path program 1 times
[2020-11-25 03:08:33,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:33,907 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:34,155 INFO  L134       CoverageAnalysis]: Checked inductivity of 1665 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1664 trivial. 0 not checked.
[2020-11-25 03:08:34,155 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:08:34,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:08:34,155 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:34,156 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:08:34,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:08:34,156 INFO  L87              Difference]: Start difference. First operand 4017 states and 4798 transitions. cyclomatic complexity: 788 Second operand 7 states.
[2020-11-25 03:08:34,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:34,251 INFO  L93              Difference]: Finished difference Result 4035 states and 4816 transitions.
[2020-11-25 03:08:34,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:08:34,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4035 states and 4816 transitions.
[2020-11-25 03:08:34,258 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:34,265 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4035 states to 4029 states and 4810 transitions.
[2020-11-25 03:08:34,265 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 03:08:34,265 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 03:08:34,265 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4029 states and 4810 transitions.
[2020-11-25 03:08:34,267 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:34,267 INFO  L728         BuchiCegarLoop]: Abstraction has 4029 states and 4810 transitions.
[2020-11-25 03:08:34,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4029 states and 4810 transitions.
[2020-11-25 03:08:34,285 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4029 to 4021.
[2020-11-25 03:08:34,285 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4021 states.
[2020-11-25 03:08:34,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4021 states to 4021 states and 4802 transitions.
[2020-11-25 03:08:34,289 INFO  L751         BuchiCegarLoop]: Abstraction has 4021 states and 4802 transitions.
[2020-11-25 03:08:34,289 INFO  L631         BuchiCegarLoop]: Abstraction has 4021 states and 4802 transitions.
[2020-11-25 03:08:34,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 03:08:34,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4021 states and 4802 transitions.
[2020-11-25 03:08:34,293 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:08:34,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:34,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:34,294 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:34,294 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND TRUE   DType[this] == OrionToken
[L6644]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6644]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6645]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:34,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:34,298 INFO  L82        PathProgramCache]: Analyzing trace with hash -1452337217, now seen corresponding path program 1 times
[2020-11-25 03:08:34,299 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:34,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:35,909 INFO  L134       CoverageAnalysis]: Checked inductivity of 1665 backedges. 48 proven. 62 refuted. 0 times theorem prover too weak. 1555 trivial. 0 not checked.
[2020-11-25 03:08:35,909 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:08:35,909 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 03:08:35,910 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:08:35,910 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 03:08:35,910 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=153, Invalid=1653, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 03:08:35,910 INFO  L87              Difference]: Start difference. First operand 4021 states and 4802 transitions. cyclomatic complexity: 788 Second operand 43 states.
[2020-11-25 03:08:51,164 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:08:51,165 INFO  L93              Difference]: Finished difference Result 4219 states and 5072 transitions.
[2020-11-25 03:08:51,165 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 03:08:51,165 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4219 states and 5072 transitions.
[2020-11-25 03:08:51,173 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:08:51,180 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4219 states to 4219 states and 5072 transitions.
[2020-11-25 03:08:51,180 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 774
[2020-11-25 03:08:51,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 774
[2020-11-25 03:08:51,181 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4219 states and 5072 transitions.
[2020-11-25 03:08:51,183 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:08:51,183 INFO  L728         BuchiCegarLoop]: Abstraction has 4219 states and 5072 transitions.
[2020-11-25 03:08:51,186 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4219 states and 5072 transitions.
[2020-11-25 03:08:51,201 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4219 to 4196.
[2020-11-25 03:08:51,201 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4196 states.
[2020-11-25 03:08:51,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4196 states to 4196 states and 5043 transitions.
[2020-11-25 03:08:51,205 INFO  L751         BuchiCegarLoop]: Abstraction has 4196 states and 5043 transitions.
[2020-11-25 03:08:51,205 INFO  L631         BuchiCegarLoop]: Abstraction has 4196 states and 5043 transitions.
[2020-11-25 03:08:51,205 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 03:08:51,205 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4196 states and 5043 transitions.
[2020-11-25 03:08:51,209 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:08:51,209 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:08:51,209 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:08:51,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:08:51,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:08:51,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:08:51,215 INFO  L82        PathProgramCache]: Analyzing trace with hash -339261799, now seen corresponding path program 2 times
[2020-11-25 03:08:51,216 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:08:51,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:08:52,720 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 19
[2020-11-25 03:08:53,291 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 21
[2020-11-25 03:08:53,507 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 16
[2020-11-25 03:08:54,611 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 03:08:55,532 WARN  L188               SmtUtils]: Spent 1.09 s on a formula simplification. DAG size of input: 430 DAG size of output: 32
[2020-11-25 03:08:58,981 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 03:08:59,923 WARN  L188               SmtUtils]: Spent 1.02 s on a formula simplification. DAG size of input: 430 DAG size of output: 30
[2020-11-25 03:09:01,770 WARN  L188               SmtUtils]: Spent 915.00 ms on a formula simplification. DAG size of input: 427 DAG size of output: 22
[2020-11-25 03:09:02,512 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 27
[2020-11-25 03:09:04,527 WARN  L188               SmtUtils]: Spent 746.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 72
[2020-11-25 03:09:06,819 WARN  L188               SmtUtils]: Spent 409.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 60
[2020-11-25 03:09:07,765 WARN  L188               SmtUtils]: Spent 263.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 55
[2020-11-25 03:09:08,686 WARN  L188               SmtUtils]: Spent 294.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 50
[2020-11-25 03:09:09,070 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 37
[2020-11-25 03:09:10,100 INFO  L134       CoverageAnalysis]: Checked inductivity of 1923 backedges. 66 proven. 42 refuted. 0 times theorem prover too weak. 1815 trivial. 0 not checked.
[2020-11-25 03:09:10,100 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:09:10,100 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [52] total 52
[2020-11-25 03:09:10,101 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:09:10,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 53 interpolants.
[2020-11-25 03:09:10,101 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=198, Invalid=2558, Unknown=0, NotChecked=0, Total=2756
[2020-11-25 03:09:10,101 INFO  L87              Difference]: Start difference. First operand 4196 states and 5043 transitions. cyclomatic complexity: 857 Second operand 53 states.
[2020-11-25 03:09:34,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:09:34,040 INFO  L93              Difference]: Finished difference Result 4228 states and 5105 transitions.
[2020-11-25 03:09:34,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 03:09:34,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4228 states and 5105 transitions.
[2020-11-25 03:09:34,048 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:09:34,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4228 states to 4228 states and 5105 transitions.
[2020-11-25 03:09:34,055 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 774
[2020-11-25 03:09:34,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 774
[2020-11-25 03:09:34,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4228 states and 5105 transitions.
[2020-11-25 03:09:34,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:09:34,058 INFO  L728         BuchiCegarLoop]: Abstraction has 4228 states and 5105 transitions.
[2020-11-25 03:09:34,061 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4228 states and 5105 transitions.
[2020-11-25 03:09:34,076 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4228 to 4206.
[2020-11-25 03:09:34,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4206 states.
[2020-11-25 03:09:34,080 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4206 states to 4206 states and 5069 transitions.
[2020-11-25 03:09:34,080 INFO  L751         BuchiCegarLoop]: Abstraction has 4206 states and 5069 transitions.
[2020-11-25 03:09:34,080 INFO  L631         BuchiCegarLoop]: Abstraction has 4206 states and 5069 transitions.
[2020-11-25 03:09:34,080 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 03:09:34,080 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4206 states and 5069 transitions.
[2020-11-25 03:09:34,084 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:09:34,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:09:34,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:09:34,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:09:34,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND FALSE  !(DType[this] == OrionToken)
[L3338]  COND FALSE  !(DType[this] == ERC20Capped)
[L3343]  COND TRUE   DType[this] == ERC20Mintable
[L3344]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3344]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3345]  COND FALSE  !(revert)
[L3356]  COND FALSE  !(DType[this] == OrionToken)
[L3361]  COND FALSE  !(DType[this] == ERC20Capped)
[L3366]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3371]  COND TRUE   DType[this] == ERC20
[L3372]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3372]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]  COND FALSE  !(revert)
[L3379]  COND FALSE  !(DType[this] == OrionToken)
[L3384]  COND TRUE   DType[this] == ERC20Capped
[L3385]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3385]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:09:34,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:09:34,090 INFO  L82        PathProgramCache]: Analyzing trace with hash -1868580121, now seen corresponding path program 1 times
[2020-11-25 03:09:34,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:09:34,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:09:35,955 INFO  L134       CoverageAnalysis]: Checked inductivity of 1840 backedges. 60 proven. 225 refuted. 0 times theorem prover too weak. 1555 trivial. 0 not checked.
[2020-11-25 03:09:35,955 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:09:35,955 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 03:09:35,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:09:35,956 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 03:09:35,956 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=2195, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 03:09:35,956 INFO  L87              Difference]: Start difference. First operand 4206 states and 5069 transitions. cyclomatic complexity: 875 Second operand 49 states.
[2020-11-25 03:09:52,709 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:09:52,710 INFO  L93              Difference]: Finished difference Result 4410 states and 5357 transitions.
[2020-11-25 03:09:52,710 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-25 03:09:52,710 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4410 states and 5357 transitions.
[2020-11-25 03:09:52,718 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 03:09:52,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4410 states to 4410 states and 5357 transitions.
[2020-11-25 03:09:52,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 841
[2020-11-25 03:09:52,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 841
[2020-11-25 03:09:52,727 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4410 states and 5357 transitions.
[2020-11-25 03:09:52,730 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:09:52,730 INFO  L728         BuchiCegarLoop]: Abstraction has 4410 states and 5357 transitions.
[2020-11-25 03:09:52,733 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4410 states and 5357 transitions.
[2020-11-25 03:09:52,749 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4410 to 4374.
[2020-11-25 03:09:52,749 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4374 states.
[2020-11-25 03:09:52,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4374 states to 4374 states and 5301 transitions.
[2020-11-25 03:09:52,754 INFO  L751         BuchiCegarLoop]: Abstraction has 4374 states and 5301 transitions.
[2020-11-25 03:09:52,754 INFO  L631         BuchiCegarLoop]: Abstraction has 4374 states and 5301 transitions.
[2020-11-25 03:09:52,754 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 03:09:52,754 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4374 states and 5301 transitions.
[2020-11-25 03:09:52,758 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 03:09:52,758 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:09:52,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:09:52,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:09:52,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND FALSE  !(DType[this] == OrionToken)
[L3338]  COND TRUE   DType[this] == ERC20Capped
[L3339]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3339]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3340]  COND FALSE  !(revert)
[L3356]  COND FALSE  !(DType[this] == OrionToken)
[L3361]  COND FALSE  !(DType[this] == ERC20Capped)
[L3366]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3371]  COND TRUE   DType[this] == ERC20
[L3372]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3372]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]  COND FALSE  !(revert)
[L3379]  COND FALSE  !(DType[this] == OrionToken)
[L3384]  COND TRUE   DType[this] == ERC20Capped
[L3385]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3385]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND FALSE  !(DType[this] == OrionToken)
[L3411]  COND TRUE   DType[this] == ERC20Capped
[L3412]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3412]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3413]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:09:52,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:09:52,764 INFO  L82        PathProgramCache]: Analyzing trace with hash 1140416136, now seen corresponding path program 1 times
[2020-11-25 03:09:52,765 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:09:52,814 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:09:53,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 1858 backedges. 110 proven. 11 refuted. 0 times theorem prover too weak. 1737 trivial. 0 not checked.
[2020-11-25 03:09:53,921 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:09:53,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-11-25 03:09:53,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:09:53,922 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 03:09:53,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=158, Invalid=1822, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 03:09:53,923 INFO  L87              Difference]: Start difference. First operand 4374 states and 5301 transitions. cyclomatic complexity: 942 Second operand 45 states.
[2020-11-25 03:10:07,464 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:10:07,464 INFO  L93              Difference]: Finished difference Result 4580 states and 5591 transitions.
[2020-11-25 03:10:07,464 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 03:10:07,464 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4580 states and 5591 transitions.
[2020-11-25 03:10:07,475 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 03:10:07,486 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4580 states to 4580 states and 5591 transitions.
[2020-11-25 03:10:07,486 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 896
[2020-11-25 03:10:07,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 896
[2020-11-25 03:10:07,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4580 states and 5591 transitions.
[2020-11-25 03:10:07,489 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:10:07,489 INFO  L728         BuchiCegarLoop]: Abstraction has 4580 states and 5591 transitions.
[2020-11-25 03:10:07,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4580 states and 5591 transitions.
[2020-11-25 03:10:07,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4580 to 4378.
[2020-11-25 03:10:07,512 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4378 states.
[2020-11-25 03:10:07,518 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4378 states to 4378 states and 5315 transitions.
[2020-11-25 03:10:07,518 INFO  L751         BuchiCegarLoop]: Abstraction has 4378 states and 5315 transitions.
[2020-11-25 03:10:07,518 INFO  L631         BuchiCegarLoop]: Abstraction has 4378 states and 5315 transitions.
[2020-11-25 03:10:07,518 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 03:10:07,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4378 states and 5315 transitions.
[2020-11-25 03:10:07,523 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 03:10:07,523 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:10:07,523 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:10:07,525 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:10:07,525 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND TRUE   choice == 11
[L7768]              gas := gas - 21000;
[L7769]  COND TRUE   gas >= 0
[L7770]              assume amount_s348 >= 0 && amount_s348 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7771]              assume msgvalue_MSG == 0;
[L7772]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L669]               havoc __exception;
[L670]               revert := false;
[L671]   COND FALSE  !(__exception)
[L697]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3333]  COND TRUE   DType[this] == OrionToken
[L3334]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3334]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L3335]  COND FALSE  !(revert)
[L3356]  COND TRUE   DType[this] == OrionToken
[L3357]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3357]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3358]  COND FALSE  !(revert)
[L3379]  COND TRUE   DType[this] == OrionToken
[L3380]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3380]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3402]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3402]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s348][__var_5], amount_s348, -1732681688);
[L3403]  COND FALSE  !(revert)
[L3406]  COND TRUE   DType[this] == OrionToken
[L3407]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3947]              __var_22 := null;
[L3948]  COND FALSE  !(!(owner_s590 != null))
[L3952]              __var_23 := null;
[L3953]  COND FALSE  !(!(spender_s590 != null))
[L3957]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3958]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3959]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3960]              assert { :EventEmitted "Approval_ERC20" } true;
[L3407]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, __var_3, __var_4);
[L3408]  COND FALSE  !(revert)
[L3429]              __ret_0_ := true;
[L697]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L698]               assume !revert && gas >= 0;
[L7772]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s348, recipient_s348, amount_s348);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND FALSE  !(choice == 14)
[L7754]  COND FALSE  !(choice == 13)
[L7760]  COND FALSE  !(choice == 12)
[L7767]  COND FALSE  !(choice == 11)
[L7774]  COND FALSE  !(choice == 10)
[L7781]  COND FALSE  !(choice == 9)
[L7788]  COND FALSE  !(choice == 8)
[L7794]  COND FALSE  !(choice == 7)
[L7800]  COND FALSE  !(choice == 6)
[L7806]  COND TRUE   choice == 5
[L7807]              gas := gas - 21000;
[L7808]  COND TRUE   gas >= 0
[L7809]              assume amount_s826 >= 0 && amount_s826 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7810]              assume msgvalue_MSG == 0;
[L7811]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1283]              havoc __exception;
[L1284]              revert := false;
[L1285]  COND FALSE  !(__exception)
[L1311]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4747]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6643]  COND TRUE   DType[this] == OrionToken
[L6644]  CALL        call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L6644]  RET         call __var_33 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6645]  COND FALSE  !(revert)
[L6666]  COND TRUE   DType[this] == OrionToken
[L6667]  CALL        call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L4447]  CALL        call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4447]  RET         call __var_34 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s749);
[L4448]  COND FALSE  !(revert)
[L4451]              __ret_0_ := __var_34;
[L6667]  RET         call __var_32 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_33);
[L6668]  COND FALSE  !(revert)
[L6689]  COND FALSE  !(!__var_32)
[L4747]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  COND TRUE   DType[this] == OrionToken
[L4752]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L5003]  COND TRUE   DType[this] == OrionToken
[L5004]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L5004]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5005]  COND FALSE  !(revert)
[L5016]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L5016]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s937);
[L5017]  COND FALSE  !(revert)
[L5020]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5024]  COND TRUE   DType[this] == OrionToken
[L5025]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L3855]              __var_16 := null;
[L3856]  COND FALSE  !(!(account_s503 != null))
[L3860]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3860]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3861]  COND FALSE  !(revert)
[L3864]              _totalSupply_ERC20[this] := __var_17;
[L3865]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3865]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3866]  COND FALSE  !(revert)
[L3869]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3870]              _balances_ERC20[this][account_s503] := __var_18;
[L3871]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3872]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5025]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s937, value_s937);
[L5026]  COND FALSE  !(revert)
[L4752]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L4753]  COND FALSE  !(revert)
[L4769]              __ret_0_ := true;
[L1311]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L1312]              assume !revert && gas >= 0;
[L7811]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s826, amount_s826);
[L7855]  RET         call CorralChoice_OrionToken(this);
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND FALSE  !(choice == 16)
[L7741]  COND FALSE  !(choice == 15)
[L7747]  COND TRUE   choice == 14
[L7748]              gas := gas - 21000;
[L7749]  COND TRUE   gas >= 0
[L7750]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7751]              assume msgvalue_MSG == 0;
[L7752]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s277 && amount_s277 <= _balances_ERC20[this][msgsender_MSG]) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L483]               havoc __exception;
[L484]               revert := false;
[L485]   COND FALSE  !(__exception)
[L511]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L3055]  COND TRUE   DType[this] == OrionToken
[L3056]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L3056]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]  COND FALSE  !(revert)
[L3078]  COND TRUE   DType[this] == OrionToken
[L3079]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3799]              __var_12 := null;
[L3800]  COND FALSE  !(!(sender_s460 != null))
[L3804]              __var_13 := null;
[L3805]  COND FALSE  !(!(recipient_s460 != null))
[L3809]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L2756]  COND FALSE  !(!(b_s53 <= a_s53))
[L2760]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              __ret_0_ := c_s53;
[L3809]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, 486434558);
[L3810]  COND FALSE  !(revert)
[L3813]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3814]              _balances_ERC20[this][sender_s460] := __var_14;
[L3815]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3816]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2732]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]  COND FALSE  !(!(c_s26 >= a_s26))
[L2737]              __ret_0_ := c_s26;
[L3816]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3817]  COND FALSE  !(revert)
[L3820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3821]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3823]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3079]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3080]  COND FALSE  !(revert)
[L3101]              __ret_0_ := true;
[L511]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L512]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7752]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:10:07,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:10:07,530 INFO  L82        PathProgramCache]: Analyzing trace with hash 290903442, now seen corresponding path program 1 times
[2020-11-25 03:10:07,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:10:07,618 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 03:22:11,451 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 03:22:11,452 INFO  L168              Benchmark]: Toolchain (without parser) took 899091.22 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 929.8 MB in the beginning and 5.6 GB in the end (delta: -4.6 GB). Peak memory consumption was 6.4 GB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,452 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,453 INFO  L168              Benchmark]: Boogie Preprocessor took 133.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,453 INFO  L168              Benchmark]: UtopiaSpecLang took 70.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,453 INFO  L168              Benchmark]: Boogie Printer took 22.46 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,453 INFO  L168              Benchmark]: RCFGBuilder took 1170.16 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 73.4 MB). Free memory was 897.6 MB in the beginning and 935.7 MB in the end (delta: -38.1 MB). Peak memory consumption was 185.2 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,454 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.25 ms. Allocated memory is still 1.1 GB. Free memory was 935.7 MB in the beginning and 932.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,454 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2467.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 180.4 MB). Free memory was 932.1 MB in the beginning and 1.1 GB in the end (delta: -154.1 MB). Peak memory consumption was 494.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,454 INFO  L168              Benchmark]: BlockEncodingV2 took 264.58 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 971.8 MB in the end (delta: 114.4 MB). Peak memory consumption was 114.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,454 INFO  L168              Benchmark]: BuchiAutomizer took 894922.19 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 971.8 MB in the beginning and 5.6 GB in the end (delta: -4.6 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 03:22:11,457 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7816 locations, 15032 edges
  - StatisticsResult: Encoded RCFG
    7652 locations, 14575 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 133.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 70.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.46 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1170.16 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 73.4 MB). Free memory was 897.6 MB in the beginning and 935.7 MB in the end (delta: -38.1 MB). Peak memory consumption was 185.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.25 ms. Allocated memory is still 1.1 GB. Free memory was 935.7 MB in the beginning and 932.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2467.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 180.4 MB). Free memory was 932.1 MB in the beginning and 1.1 GB in the end (delta: -154.1 MB). Peak memory consumption was 494.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 264.58 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 971.8 MB in the end (delta: 114.4 MB). Peak memory consumption was 114.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 894922.19 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 971.8 MB in the beginning and 5.6 GB in the end (delta: -4.6 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2932 locations, 4569 edges
  - StatisticsResult: BuchiProgram size
    7816 locations, 15032 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
