This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:06:32,631 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:06:32,632 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:06:32,642 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:06:32,642 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:06:32,643 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:06:32,644 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:06:32,645 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:06:32,647 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:06:32,648 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:06:32,648 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:06:32,648 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:06:32,649 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:06:32,650 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:06:32,651 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:06:32,651 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:06:32,652 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:06:32,653 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:06:32,654 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:06:32,655 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:06:32,656 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:06:32,656 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:06:32,658 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:06:32,658 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:06:32,658 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:06:32,659 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:06:32,659 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:06:32,660 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:06:32,660 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:06:32,660 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:06:32,661 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:06:32,661 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:06:32,662 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:06:32,662 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:06:32,663 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:06:32,663 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:06:32,663 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:06:32,664 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:06:32,664 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:06:32,665 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:06:32,665 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:06:32,665 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:06:32,673 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:06:32,673 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:06:32,674 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:06:32,674 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:06:32,674 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:06:32,674 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:06:32,674 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:06:32,674 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:32,674 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:06:32,675 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:06:32,675 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:06:32,675 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:06:32,676 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:06:32,676 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:06:32,700 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:06:32,713 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:06:32,716 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:06:32,717 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:06:32,717 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:06:32,717 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl
[2020-11-25 03:06:32,718 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl'
[2020-11-25 03:06:32,820 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:06:32,822 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:06:32,822 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:06:32,822 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:06:32,822 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:06:32,839 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,840 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,881 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,882 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,910 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,928 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,938 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,952 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:06:32,953 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:06:32,953 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:06:32,955 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:06:32,958 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/1) ...
[2020-11-25 03:06:32,978 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:32,983 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:32,990 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:32,996 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s312 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]
[2020-11-25 03:06:32,999 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s312]==amount_s312 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[spender_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],IdentifierExpression[amount_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]
[2020-11-25 03:06:33,007 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:33,007 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC200) ==> ( <>AP(success_approve_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:06:33,021 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:33 PropertyContainer
[2020-11-25 03:06:33,021 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:06:33,022 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:06:33,022 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:06:33,022 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:06:33,024 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/2) ...
[2020-11-25 03:06:33,024 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:06:33,025 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:06:33,050 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:33" (2/2) ...
[2020-11-25 03:06:33,050 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:06:33,050 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:06:33,050 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:06:33,050 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:06:33,051 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/2) ...
[2020-11-25 03:06:33,103 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:06:33,103 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:06:33,103 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:33,103 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:06:33,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:06:33,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:06:33,104 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:06:33,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:06:33,105 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:06:33,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:06:33,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:06:33,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:06:33,106 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:06:33,107 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:33,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:06:33,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:06:33,108 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:06:33,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:06:33,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:06:33,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:06:33,109 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:06:33,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:33,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:33,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:33,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:33,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:33,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:33,111 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:06:33,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken
[2020-11-25 03:06:33,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:06:33,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:06:33,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OrionToken
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:33,114 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,115 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:06:33,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:33,117 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:33,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:33,119 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:33,120 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:33,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:06:33,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:06:33,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:06:33,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:33,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:33,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:33,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:33,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:33,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:33,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:33,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:06:33,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:06:33,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OrionToken
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:06:33,134 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:06:33,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:06:33,448 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:33,448 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:33,449 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:33,792 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:34,152 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:06:34,153 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:06:34,157 INFO  L202        PluginConnector]: Adding new model OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:34 BoogieIcfgContainer
[2020-11-25 03:06:34,157 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:33" (2/2) ...
[2020-11-25 03:06:34,157 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:06:34,157 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@98e879a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:34, skipping insertion in model container
[2020-11-25 03:06:34,157 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:06:34,158 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:34,158 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:06:34,159 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:06:34,160 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/3) ...
[2020-11-25 03:06:34,160 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5bab3a55 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:34, skipping insertion in model container
[2020-11-25 03:06:34,160 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:06:34,203 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:34 NWAContainer
[2020-11-25 03:06:34,203 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:34,203 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:34,204 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:06:34,204 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:06:34,205 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:34" (3/4) ...
[2020-11-25 03:06:34,206 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3af59fa3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:34, skipping insertion in model container
[2020-11-25 03:06:34,206 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:34" (4/4) ...
[2020-11-25 03:06:34,208 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:06:34,214 INFO  L110   BuchiProductObserver]: Initial RCFG 2934 locations, 4571 edges
[2020-11-25 03:06:34,214 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:06:34,227 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:06:36,566 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:06:36,581 INFO  L110   BuchiProductObserver]: BuchiProgram size 7820 locations, 15038 edges
[2020-11-25 03:06:36,581 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:36 BoogieIcfgContainer
[2020-11-25 03:06:36,581 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:36,582 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:06:36,582 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:06:36,583 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:06:36,584 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:36" (1/1) ...
[2020-11-25 03:06:36,750 INFO  L313           BlockEncoder]: Initial Icfg 7820 locations, 15038 edges
[2020-11-25 03:06:36,750 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:06:36,751 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:36,751 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:06:36,751 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:06:36,767 INFO  L70    emoveInfeasibleEdges]: Removed 246 edges and 23 locations because of local infeasibility
[2020-11-25 03:06:36,783 INFO  L70        RemoveSinkStates]: Removed 164 edges and 109 locations by removing sink states
[2020-11-25 03:06:36,799 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:06:36,803 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:06:36,808 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:06:36,809 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:06:36,813 INFO  L313           BlockEncoder]: Encoded RCFG 7656 locations, 14581 edges
[2020-11-25 03:06:36,813 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:36 BasicIcfg
[2020-11-25 03:06:36,813 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:06:36,814 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:06:36,814 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:06:36,815 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:06:36,816 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,816 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:32" (1/6) ...
[2020-11-25 03:06:36,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3fde812a and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:36, skipping insertion in model container
[2020-11-25 03:06:36,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,817 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:33" (2/6) ...
[2020-11-25 03:06:36,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3fde812a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:36, skipping insertion in model container
[2020-11-25 03:06:36,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,817 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:34" (3/6) ...
[2020-11-25 03:06:36,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3fde812a and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:36, skipping insertion in model container
[2020-11-25 03:06:36,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,818 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:34" (4/6) ...
[2020-11-25 03:06:36,818 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3fde812a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:36, skipping insertion in model container
[2020-11-25 03:06:36,818 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,818 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:36" (5/6) ...
[2020-11-25 03:06:36,818 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3fde812a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:06:36, skipping insertion in model container
[2020-11-25 03:06:36,819 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:36,819 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:36" (6/6) ...
[2020-11-25 03:06:36,819 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_approve.bpl_BEv2
[2020-11-25 03:06:36,854 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:06:36,854 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:06:36,854 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:06:36,854 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:06:36,854 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:06:36,854 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:06:36,854 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:06:36,854 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:06:36,854 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:06:36,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7656 states.
[2020-11-25 03:06:36,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:36,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:36,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:36,982 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:36,983 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:36,983 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:06:36,983 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7656 states.
[2020-11-25 03:06:37,014 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:37,014 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:37,014 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:37,016 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:37,016 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND TRUE   revert
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND TRUE   choice == 16
[L7737]              gas := gas - 21000;
[L7738]  COND FALSE  !(gas >= 0)
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:37,032 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:37,032 INFO  L82        PathProgramCache]: Analyzing trace with hash -522317270, now seen corresponding path program 1 times
[2020-11-25 03:06:37,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:37,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:37,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:06:37,094 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:37,094 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:37,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:37,500 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:37,500 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:37,501 INFO  L87              Difference]: Start difference. First operand 7656 states. Second operand 3 states.
[2020-11-25 03:06:37,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:37,843 INFO  L93              Difference]: Finished difference Result 4408 states and 5666 transitions.
[2020-11-25 03:06:37,843 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:37,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4408 states and 5666 transitions.
[2020-11-25 03:06:37,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:37,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4408 states to 4408 states and 5666 transitions.
[2020-11-25 03:06:37,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 03:06:37,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 768
[2020-11-25 03:06:37,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4408 states and 5666 transitions.
[2020-11-25 03:06:37,916 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:37,916 INFO  L728         BuchiCegarLoop]: Abstraction has 4408 states and 5666 transitions.
[2020-11-25 03:06:37,932 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4408 states and 5666 transitions.
[2020-11-25 03:06:38,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4408 to 4408.
[2020-11-25 03:06:38,013 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4408 states.
[2020-11-25 03:06:38,025 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4408 states to 4408 states and 5666 transitions.
[2020-11-25 03:06:38,027 INFO  L751         BuchiCegarLoop]: Abstraction has 4408 states and 5666 transitions.
[2020-11-25 03:06:38,027 INFO  L631         BuchiCegarLoop]: Abstraction has 4408 states and 5666 transitions.
[2020-11-25 03:06:38,027 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:06:38,027 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4408 states and 5666 transitions.
[2020-11-25 03:06:38,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:38,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:38,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:38,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:38,044 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND TRUE   revert
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:38,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:38,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -1205586241, now seen corresponding path program 1 times
[2020-11-25 03:06:38,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:38,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:38,082 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:06:38,082 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:38,083 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:38,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:38,084 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:38,084 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:38,084 INFO  L87              Difference]: Start difference. First operand 4408 states and 5666 transitions. cyclomatic complexity: 1260 Second operand 3 states.
[2020-11-25 03:06:38,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:38,232 INFO  L93              Difference]: Finished difference Result 5628 states and 6981 transitions.
[2020-11-25 03:06:38,232 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:38,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5628 states and 6981 transitions.
[2020-11-25 03:06:38,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:38,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5628 states to 5628 states and 6981 transitions.
[2020-11-25 03:06:38,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-25 03:06:38,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-25 03:06:38,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5628 states and 6981 transitions.
[2020-11-25 03:06:38,281 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:38,281 INFO  L728         BuchiCegarLoop]: Abstraction has 5628 states and 6981 transitions.
[2020-11-25 03:06:38,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5628 states and 6981 transitions.
[2020-11-25 03:06:38,339 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5628 to 5034.
[2020-11-25 03:06:38,339 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5034 states.
[2020-11-25 03:06:38,346 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5034 states to 5034 states and 6263 transitions.
[2020-11-25 03:06:38,346 INFO  L751         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:38,346 INFO  L631         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:38,346 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:06:38,346 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5034 states and 6263 transitions.
[2020-11-25 03:06:38,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:38,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:38,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:38,355 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:38,355 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND FALSE  !(DType[this] == OrionToken)
[L4386]  COND TRUE   DType[this] == ERC20Capped
[L4387]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND TRUE   !(account_s699 != null)
[L4275]              revert := true;
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND TRUE   revert
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND TRUE   revert
[L4387]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4388]  COND TRUE   revert
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND TRUE   revert
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND TRUE   revert
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:38,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:38,359 INFO  L82        PathProgramCache]: Analyzing trace with hash -2055039838, now seen corresponding path program 1 times
[2020-11-25 03:06:38,360 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:38,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:38,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:38,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:38,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:38,419 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:38,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:38,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:38,420 INFO  L87              Difference]: Start difference. First operand 5034 states and 6263 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:06:38,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:38,479 INFO  L93              Difference]: Finished difference Result 5039 states and 6268 transitions.
[2020-11-25 03:06:38,479 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:38,479 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:38,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:38,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5039 states to 5039 states and 6268 transitions.
[2020-11-25 03:06:38,509 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 960
[2020-11-25 03:06:38,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 960
[2020-11-25 03:06:38,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:38,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:38,515 INFO  L728         BuchiCegarLoop]: Abstraction has 5039 states and 6268 transitions.
[2020-11-25 03:06:38,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:38,565 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5039 to 5035.
[2020-11-25 03:06:38,565 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5035 states.
[2020-11-25 03:06:38,574 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5035 states to 5035 states and 6264 transitions.
[2020-11-25 03:06:38,575 INFO  L751         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:38,575 INFO  L631         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:38,575 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:06:38,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5035 states and 6264 transitions.
[2020-11-25 03:06:38,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:38,584 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:38,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:38,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:38,587 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND TRUE   !(account_s699 != null)
[L4275]              revert := true;
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND TRUE   revert
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND TRUE   revert
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND TRUE   revert
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND TRUE   revert
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND TRUE   revert
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:38,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:38,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -390509917, now seen corresponding path program 1 times
[2020-11-25 03:06:38,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:38,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:38,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:06:38,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:38,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:06:38,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:38,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:06:38,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:06:38,710 INFO  L87              Difference]: Start difference. First operand 5035 states and 6264 transitions. cyclomatic complexity: 1231 Second operand 12 states.
[2020-11-25 03:06:38,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:38,933 INFO  L93              Difference]: Finished difference Result 5095 states and 6355 transitions.
[2020-11-25 03:06:38,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:06:38,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:38,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:38,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5095 states to 5095 states and 6355 transitions.
[2020-11-25 03:06:38,962 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 976
[2020-11-25 03:06:38,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 976
[2020-11-25 03:06:38,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:38,968 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:38,968 INFO  L728         BuchiCegarLoop]: Abstraction has 5095 states and 6355 transitions.
[2020-11-25 03:06:38,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:39,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5095 to 5079.
[2020-11-25 03:06:39,013 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5079 states.
[2020-11-25 03:06:39,019 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5079 states to 5079 states and 6331 transitions.
[2020-11-25 03:06:39,019 INFO  L751         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:39,019 INFO  L631         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:39,019 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:06:39,019 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5079 states and 6331 transitions.
[2020-11-25 03:06:39,026 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:39,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:39,026 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:39,028 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:39,028 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND TRUE   !!__var_27
[L4224]              revert := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND TRUE   revert
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND TRUE   revert
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND TRUE   revert
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND TRUE   revert
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND TRUE   !(owner_s590 != null)
[L3950]              revert := true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND TRUE   revert
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:39,031 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:39,031 INFO  L82        PathProgramCache]: Analyzing trace with hash -1467186782, now seen corresponding path program 1 times
[2020-11-25 03:06:39,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:39,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:39,079 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:39,079 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:39,079 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:39,080 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:39,080 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:39,080 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:39,080 INFO  L87              Difference]: Start difference. First operand 5079 states and 6331 transitions. cyclomatic complexity: 1254 Second operand 3 states.
[2020-11-25 03:06:39,166 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:39,166 INFO  L93              Difference]: Finished difference Result 5649 states and 6742 transitions.
[2020-11-25 03:06:39,166 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:39,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5649 states and 6742 transitions.
[2020-11-25 03:06:39,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:39,199 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5649 states to 5179 states and 6156 transitions.
[2020-11-25 03:06:39,199 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 977
[2020-11-25 03:06:39,200 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1025
[2020-11-25 03:06:39,200 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5179 states and 6156 transitions.
[2020-11-25 03:06:39,205 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:39,205 INFO  L728         BuchiCegarLoop]: Abstraction has 5179 states and 6156 transitions.
[2020-11-25 03:06:39,209 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5179 states and 6156 transitions.
[2020-11-25 03:06:39,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5179 to 4665.
[2020-11-25 03:06:39,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4665 states.
[2020-11-25 03:06:39,264 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4665 states to 4665 states and 5518 transitions.
[2020-11-25 03:06:39,265 INFO  L751         BuchiCegarLoop]: Abstraction has 4665 states and 5518 transitions.
[2020-11-25 03:06:39,265 INFO  L631         BuchiCegarLoop]: Abstraction has 4665 states and 5518 transitions.
[2020-11-25 03:06:39,265 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:06:39,265 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4665 states and 5518 transitions.
[2020-11-25 03:06:39,272 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:39,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:39,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:39,276 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:39,276 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND FALSE  !(revert)
[L5114]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L5114]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5115]  COND FALSE  !(revert)
[L5118]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4920]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4920]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4921]  COND FALSE  !(revert)
[L4924]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4924]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]  COND FALSE  !(revert)
[L4928]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4928]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]  COND FALSE  !(revert)
[L4932]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4932]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4933]  COND FALSE  !(revert)
[L4936]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4936]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4937]  COND FALSE  !(revert)
[L4940]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4879]              assume msgsender_MSG != null;
[L4880]              Balance[this] := 0;
[L4881]              _cap_ERC20Capped[this] := 0;
[L4883]  COND FALSE  !(!(cap_s903 > 0))
[L4887]              _cap_ERC20Capped[this] := cap_s903;
[L4940]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4941]  COND FALSE  !(revert)
[L5118]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5119]  COND FALSE  !(revert)
[L5122]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5122]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5123]  COND FALSE  !(revert)
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND FALSE  !(!(owner_s590 != null))
[L3953]              __var_23 := null;
[L3954]  COND FALSE  !(!(spender_s590 != null))
[L3958]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3959]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3960]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3961]              assert { :EventEmitted "Approval_ERC20" } true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND FALSE  !(revert)
[L3220]              __ret_0_ := true;
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND FALSE  !(!(owner_s590 != null))
[L3953]              __var_23 := null;
[L3954]  COND FALSE  !(!(spender_s590 != null))
[L3958]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3959]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3960]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3961]              assert { :EventEmitted "Approval_ERC20" } true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND FALSE  !(revert)
[L3220]              __ret_0_ := true;
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:39,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:39,285 INFO  L82        PathProgramCache]: Analyzing trace with hash -1441333440, now seen corresponding path program 1 times
[2020-11-25 03:06:39,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:39,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:39,983 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 1522 trivial. 0 not checked.
[2020-11-25 03:06:39,983 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:39,983 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 03:06:39,984 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:39,985 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 03:06:39,985 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=304, Unknown=0, NotChecked=0, Total=342
[2020-11-25 03:06:39,985 INFO  L87              Difference]: Start difference. First operand 4665 states and 5518 transitions. cyclomatic complexity: 855 Second operand 19 states.
[2020-11-25 03:06:45,097 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:45,097 INFO  L93              Difference]: Finished difference Result 4815 states and 5691 transitions.
[2020-11-25 03:06:45,097 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 03:06:45,097 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4815 states and 5691 transitions.
[2020-11-25 03:06:45,106 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 03:06:45,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4815 states to 4815 states and 5691 transitions.
[2020-11-25 03:06:45,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 940
[2020-11-25 03:06:45,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 940
[2020-11-25 03:06:45,119 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4815 states and 5691 transitions.
[2020-11-25 03:06:45,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:45,122 INFO  L728         BuchiCegarLoop]: Abstraction has 4815 states and 5691 transitions.
[2020-11-25 03:06:45,153 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4815 states and 5691 transitions.
[2020-11-25 03:06:45,186 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4815 to 4781.
[2020-11-25 03:06:45,186 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4781 states.
[2020-11-25 03:06:45,191 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4781 states to 4781 states and 5648 transitions.
[2020-11-25 03:06:45,191 INFO  L751         BuchiCegarLoop]: Abstraction has 4781 states and 5648 transitions.
[2020-11-25 03:06:45,191 INFO  L631         BuchiCegarLoop]: Abstraction has 4781 states and 5648 transitions.
[2020-11-25 03:06:45,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:06:45,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4781 states and 5648 transitions.
[2020-11-25 03:06:45,196 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:06:45,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:45,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:45,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:45,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND TRUE   __exception
[L1754]              __tmp__Balance := Balance;
[L1755]              __tmp__DType := DType;
[L1756]              __tmp__Alloc := Alloc;
[L1757]              __tmp__balance_ADDR := balance_ADDR;
[L1758]              __tmp__M_Ref_int := M_Ref_int;
[L1759]              __tmp__sum__balances0 := sum__balances0;
[L1760]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1761]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1762]              __tmp__sum__allowances1 := sum__allowances1;
[L1763]              __tmp__M_Ref_bool := M_Ref_bool;
[L1764]              __tmp__sum := sum;
[L1765]              __tmp__Length := Length;
[L1766]              __tmp__now := now;
[L1767]              __tmp___balances_ERC20 := _balances_ERC20;
[L1768]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1769]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1770]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1771]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1772]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1773]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1774]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1775]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1776]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L5062]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4804]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4804]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4805]  COND FALSE  !(revert)
[L4808]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4777]              assume msgsender_MSG != null;
[L4778]              __tmp__Balance[this] := 0;
[L4779]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4781]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4783]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4784]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4785]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4808]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4809]  COND FALSE  !(revert)
[L5066]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L5070]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5074]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4324]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4325]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4325]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4326]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L5074]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4672]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4676]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4680]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4324]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4325]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4325]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4326]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4684]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4657]              assume msgsender_MSG != null;
[L4658]              __tmp__Balance[this] := 0;
[L4688]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L5078]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4892]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4892]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4893]  COND FALSE  !(revert)
[L4896]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4896]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]  COND FALSE  !(revert)
[L4900]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4900]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]  COND FALSE  !(revert)
[L4904]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4324]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4325]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4325]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4326]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4904]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4672]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4676]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4680]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4324]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4325]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4325]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4326]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4684]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4657]              assume msgsender_MSG != null;
[L4658]              __tmp__Balance[this] := 0;
[L4688]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L4908]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4909]  COND FALSE  !(revert)
[L4912]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4865]              assume msgsender_MSG != null;
[L4866]              __tmp__Balance[this] := 0;
[L4867]              __tmp___cap_ERC20Capped[this] := 0;
[L4869]  COND FALSE  !(!(cap_s903 > 0))
[L4873]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4912]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4913]  COND FALSE  !(revert)
[L5082]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5086]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L1776]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume revert || gas < 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND FALSE  !(!(owner_s590 != null))
[L3953]              __var_23 := null;
[L3954]  COND FALSE  !(!(spender_s590 != null))
[L3958]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3959]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3960]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3961]              assert { :EventEmitted "Approval_ERC20" } true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND FALSE  !(revert)
[L3220]              __ret_0_ := true;
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L3126]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L3127]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3127]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3128]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND TRUE   !(owner_s590 != null)
[L3931]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:45,213 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:45,213 INFO  L82        PathProgramCache]: Analyzing trace with hash -93504161, now seen corresponding path program 1 times
[2020-11-25 03:06:45,214 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:45,227 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:45,380 INFO  L134       CoverageAnalysis]: Checked inductivity of 1532 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1490 trivial. 0 not checked.
[2020-11-25 03:06:45,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:45,380 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:06:45,380 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:45,381 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:45,381 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:45,381 INFO  L87              Difference]: Start difference. First operand 4781 states and 5648 transitions. cyclomatic complexity: 871 Second operand 3 states.
[2020-11-25 03:06:45,419 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:45,419 INFO  L93              Difference]: Finished difference Result 4784 states and 5651 transitions.
[2020-11-25 03:06:45,419 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:45,420 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4784 states and 5651 transitions.
[2020-11-25 03:06:45,427 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:06:45,437 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4784 states to 4784 states and 5651 transitions.
[2020-11-25 03:06:45,437 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 938
[2020-11-25 03:06:45,438 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 938
[2020-11-25 03:06:45,438 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4784 states and 5651 transitions.
[2020-11-25 03:06:45,441 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:45,441 INFO  L728         BuchiCegarLoop]: Abstraction has 4784 states and 5651 transitions.
[2020-11-25 03:06:45,444 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4784 states and 5651 transitions.
[2020-11-25 03:06:45,471 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4784 to 4782.
[2020-11-25 03:06:45,471 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4782 states.
[2020-11-25 03:06:45,476 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4782 states to 4782 states and 5649 transitions.
[2020-11-25 03:06:45,476 INFO  L751         BuchiCegarLoop]: Abstraction has 4782 states and 5649 transitions.
[2020-11-25 03:06:45,476 INFO  L631         BuchiCegarLoop]: Abstraction has 4782 states and 5649 transitions.
[2020-11-25 03:06:45,476 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:06:45,476 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4782 states and 5649 transitions.
[2020-11-25 03:06:45,481 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:06:45,481 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:45,481 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:45,483 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:45,483 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND TRUE   __exception
[L1754]              __tmp__Balance := Balance;
[L1755]              __tmp__DType := DType;
[L1756]              __tmp__Alloc := Alloc;
[L1757]              __tmp__balance_ADDR := balance_ADDR;
[L1758]              __tmp__M_Ref_int := M_Ref_int;
[L1759]              __tmp__sum__balances0 := sum__balances0;
[L1760]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1761]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1762]              __tmp__sum__allowances1 := sum__allowances1;
[L1763]              __tmp__M_Ref_bool := M_Ref_bool;
[L1764]              __tmp__sum := sum;
[L1765]              __tmp__Length := Length;
[L1766]              __tmp__now := now;
[L1767]              __tmp___balances_ERC20 := _balances_ERC20;
[L1768]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1769]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1770]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1771]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1772]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1773]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1774]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1775]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1776]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L5062]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4804]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4804]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4805]  COND FALSE  !(revert)
[L4808]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4777]              assume msgsender_MSG != null;
[L4778]              __tmp__Balance[this] := 0;
[L4779]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4781]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4783]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4784]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4785]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4808]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4809]  COND FALSE  !(revert)
[L5066]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L5070]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5074]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND TRUE   __tmp__DType[this] == OrionToken
[L4320]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4320]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4321]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L5074]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4672]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4676]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4680]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND TRUE   __tmp__DType[this] == OrionToken
[L4320]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4320]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4321]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4684]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4657]              assume msgsender_MSG != null;
[L4658]              __tmp__Balance[this] := 0;
[L4688]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L5078]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4892]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4892]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4893]  COND FALSE  !(revert)
[L4896]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4896]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]  COND FALSE  !(revert)
[L4900]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4900]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]  COND FALSE  !(revert)
[L4904]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND TRUE   __tmp__DType[this] == OrionToken
[L4320]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4320]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4321]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4904]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4672]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L4676]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L2946]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2889]              assume msgsender_MSG != null;
[L2890]              __tmp__Balance[this] := 0;
[L2904]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2905]  COND FALSE  !(revert)
[L2950]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L2954]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              __tmp__Balance[this] := 0;
[L2923]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2924]              __tmp__sum__balances0[this] := 0;
[L2925]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              __tmp__sum__allowances1[this] := 0;
[L2927]              __tmp___totalSupply_ERC20[this] := 0;
[L2954]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4680]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2845]              assume msgsender_MSG != null;
[L2846]              __tmp__Balance[this] := 0;
[L2860]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2861]  COND FALSE  !(revert)
[L4410]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4411]  COND FALSE  !(revert)
[L4414]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4287]              assume msgsender_MSG != null;
[L4288]              __tmp__Balance[this] := 0;
[L4290]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2662]              havoc newRef;
[L2663]              assume __tmp__Alloc[newRef] == false;
[L2664]              __tmp__Alloc[newRef] := true;
[L2665]              assume newRef != null;
[L4290]  RET         call __var_31 := FreshRefGenerator__fail();
[L4291]  COND FALSE  !(revert)
[L4294]              __tmp___minters_MinterRole[this] := __var_31;
[L4296]  COND TRUE   __tmp__DType[this] == OrionToken
[L4297]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L4297]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND FALSE  !(revert)
[L4319]  COND TRUE   __tmp__DType[this] == OrionToken
[L4320]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4622]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4205]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4261]              __var_29 := null;
[L4262]  COND FALSE  !(!(account_s699 != null))
[L4266]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4205]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4206]  COND FALSE  !(revert)
[L4209]  COND FALSE  !(!!__var_27)
[L4213]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4622]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4623]  COND FALSE  !(revert)
[L4320]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4321]  COND FALSE  !(revert)
[L4414]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4415]  COND FALSE  !(revert)
[L4684]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4657]              assume msgsender_MSG != null;
[L4658]              __tmp__Balance[this] := 0;
[L4688]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L4908]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4909]  COND FALSE  !(revert)
[L4912]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4865]              assume msgsender_MSG != null;
[L4866]              __tmp__Balance[this] := 0;
[L4867]              __tmp___cap_ERC20Capped[this] := 0;
[L4869]  COND FALSE  !(!(cap_s903 > 0))
[L4873]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4912]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4913]  COND FALSE  !(revert)
[L5082]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5086]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L1776]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume revert || gas < 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND FALSE  !(!(owner_s590 != null))
[L3953]              __var_23 := null;
[L3954]  COND FALSE  !(!(spender_s590 != null))
[L3958]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3959]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3960]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3961]              assert { :EventEmitted "Approval_ERC20" } true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND FALSE  !(revert)
[L3220]              __ret_0_ := true;
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L634]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3174]  COND TRUE   DType[this] == OrionToken
[L3175]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L3175]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3197]  COND TRUE   DType[this] == OrionToken
[L3198]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3948]              __var_22 := null;
[L3949]  COND FALSE  !(!(owner_s590 != null))
[L3953]              __var_23 := null;
[L3954]  COND FALSE  !(!(spender_s590 != null))
[L3958]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3959]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3960]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3961]              assert { :EventEmitted "Approval_ERC20" } true;
[L3198]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3199]  COND FALSE  !(revert)
[L3220]              __ret_0_ := true;
[L634]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L635]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:45,488 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:45,488 INFO  L82        PathProgramCache]: Analyzing trace with hash -47592195, now seen corresponding path program 1 times
[2020-11-25 03:06:45,489 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:45,506 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:45,704 INFO  L134       CoverageAnalysis]: Checked inductivity of 1526 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1526 trivial. 0 not checked.
[2020-11-25 03:06:45,705 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:45,705 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:06:45,705 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:45,705 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:06:45,705 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:06:45,706 INFO  L87              Difference]: Start difference. First operand 4782 states and 5649 transitions. cyclomatic complexity: 871 Second operand 4 states.
[2020-11-25 03:06:45,864 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:45,864 INFO  L93              Difference]: Finished difference Result 5572 states and 6688 transitions.
[2020-11-25 03:06:45,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:06:45,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5572 states and 6688 transitions.
[2020-11-25 03:06:45,877 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:06:45,892 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5572 states to 5316 states and 6405 transitions.
[2020-11-25 03:06:45,892 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-25 03:06:45,893 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-25 03:06:45,893 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5316 states and 6405 transitions.
[2020-11-25 03:06:45,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:45,897 INFO  L728         BuchiCegarLoop]: Abstraction has 5316 states and 6405 transitions.
[2020-11-25 03:06:45,901 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5316 states and 6405 transitions.
[2020-11-25 03:06:45,937 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5316 to 4745.
[2020-11-25 03:06:45,938 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4745 states.
[2020-11-25 03:06:45,943 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4745 states to 4745 states and 5635 transitions.
[2020-11-25 03:06:45,943 INFO  L751         BuchiCegarLoop]: Abstraction has 4745 states and 5635 transitions.
[2020-11-25 03:06:45,943 INFO  L631         BuchiCegarLoop]: Abstraction has 4745 states and 5635 transitions.
[2020-11-25 03:06:45,943 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:06:45,943 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4745 states and 5635 transitions.
[2020-11-25 03:06:45,948 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:06:45,949 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:45,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:45,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:45,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND FALSE  !(revert)
[L5114]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L5114]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5115]  COND FALSE  !(revert)
[L5118]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4920]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4920]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4921]  COND FALSE  !(revert)
[L4924]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4924]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]  COND FALSE  !(revert)
[L4928]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4928]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]  COND FALSE  !(revert)
[L4932]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4932]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4933]  COND FALSE  !(revert)
[L4936]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4936]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4937]  COND FALSE  !(revert)
[L4940]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4879]              assume msgsender_MSG != null;
[L4880]              Balance[this] := 0;
[L4881]              _cap_ERC20Capped[this] := 0;
[L4883]  COND FALSE  !(!(cap_s903 > 0))
[L4887]              _cap_ERC20Capped[this] := cap_s903;
[L4940]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4941]  COND FALSE  !(revert)
[L5118]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5119]  COND FALSE  !(revert)
[L5122]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5122]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5123]  COND FALSE  !(revert)
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND TRUE   !(owner_s590 != null)
[L3931]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND TRUE   !(owner_s590 != null)
[L3931]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:45,955 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:45,956 INFO  L82        PathProgramCache]: Analyzing trace with hash 1898265583, now seen corresponding path program 1 times
[2020-11-25 03:06:45,956 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:45,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:46,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:06:46,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:46,162 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:06:46,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:46,163 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:06:46,163 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:06:46,163 INFO  L87              Difference]: Start difference. First operand 4745 states and 5635 transitions. cyclomatic complexity: 894 Second operand 8 states.
[2020-11-25 03:06:46,301 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:46,302 INFO  L93              Difference]: Finished difference Result 4781 states and 5699 transitions.
[2020-11-25 03:06:46,302 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:06:46,302 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4781 states and 5699 transitions.
[2020-11-25 03:06:46,312 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:06:46,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4781 states to 4749 states and 5661 transitions.
[2020-11-25 03:06:46,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1071
[2020-11-25 03:06:46,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1071
[2020-11-25 03:06:46,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4749 states and 5661 transitions.
[2020-11-25 03:06:46,327 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:46,327 INFO  L728         BuchiCegarLoop]: Abstraction has 4749 states and 5661 transitions.
[2020-11-25 03:06:46,330 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4749 states and 5661 transitions.
[2020-11-25 03:06:46,357 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4749 to 4749.
[2020-11-25 03:06:46,357 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4749 states.
[2020-11-25 03:06:46,362 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4749 states to 4749 states and 5661 transitions.
[2020-11-25 03:06:46,362 INFO  L751         BuchiCegarLoop]: Abstraction has 4749 states and 5661 transitions.
[2020-11-25 03:06:46,362 INFO  L631         BuchiCegarLoop]: Abstraction has 4749 states and 5661 transitions.
[2020-11-25 03:06:46,362 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:06:46,362 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4749 states and 5661 transitions.
[2020-11-25 03:06:46,366 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:06:46,366 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:46,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:46,368 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:46,368 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND FALSE  !(revert)
[L5114]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L5114]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5115]  COND FALSE  !(revert)
[L5118]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4920]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4920]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4921]  COND FALSE  !(revert)
[L4924]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4924]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]  COND FALSE  !(revert)
[L4928]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4928]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]  COND FALSE  !(revert)
[L4932]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4932]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4933]  COND FALSE  !(revert)
[L4936]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4936]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4937]  COND FALSE  !(revert)
[L4940]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4879]              assume msgsender_MSG != null;
[L4880]              Balance[this] := 0;
[L4881]              _cap_ERC20Capped[this] := 0;
[L4883]  COND FALSE  !(!(cap_s903 > 0))
[L4887]              _cap_ERC20Capped[this] := cap_s903;
[L4940]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4941]  COND FALSE  !(revert)
[L5118]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5119]  COND FALSE  !(revert)
[L5122]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5122]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5123]  COND FALSE  !(revert)
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L3126]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L3127]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3127]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3128]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L3126]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L3127]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3127]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3128]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:46,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:46,374 INFO  L82        PathProgramCache]: Analyzing trace with hash 183869689, now seen corresponding path program 1 times
[2020-11-25 03:06:46,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:46,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:46,590 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:06:46,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:46,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:46,591 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:46,591 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:46,591 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:46,591 INFO  L87              Difference]: Start difference. First operand 4749 states and 5661 transitions. cyclomatic complexity: 916 Second operand 3 states.
[2020-11-25 03:06:46,629 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:46,629 INFO  L93              Difference]: Finished difference Result 4759 states and 5673 transitions.
[2020-11-25 03:06:46,629 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:46,629 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4759 states and 5673 transitions.
[2020-11-25 03:06:46,637 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:06:46,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4759 states to 4759 states and 5673 transitions.
[2020-11-25 03:06:46,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1077
[2020-11-25 03:06:46,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1077
[2020-11-25 03:06:46,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4759 states and 5673 transitions.
[2020-11-25 03:06:46,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:46,650 INFO  L728         BuchiCegarLoop]: Abstraction has 4759 states and 5673 transitions.
[2020-11-25 03:06:46,653 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4759 states and 5673 transitions.
[2020-11-25 03:06:46,676 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4759 to 4751.
[2020-11-25 03:06:46,676 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4751 states.
[2020-11-25 03:06:46,681 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4751 states to 4751 states and 5663 transitions.
[2020-11-25 03:06:46,681 INFO  L751         BuchiCegarLoop]: Abstraction has 4751 states and 5663 transitions.
[2020-11-25 03:06:46,681 INFO  L631         BuchiCegarLoop]: Abstraction has 4751 states and 5663 transitions.
[2020-11-25 03:06:46,681 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:06:46,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4751 states and 5663 transitions.
[2020-11-25 03:06:46,687 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:06:46,687 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:46,687 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:46,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:46,689 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7846]              assume null == 0;
[L7847]  CALL        call this := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L7847]  RET         call this := FreshRefGenerator__success();
[L7848]              assume now >= 0;
[L7849]              assume DType[this] == OrionToken;
[L7850]              assume msgvalue_MSG == 0;
[L7851]              gas := gas - 53000;
[L7852]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND FALSE  !(revert)
[L5114]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L5114]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5115]  COND FALSE  !(revert)
[L5118]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4920]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4920]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4921]  COND FALSE  !(revert)
[L4924]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4924]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]  COND FALSE  !(revert)
[L4928]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4928]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]  COND FALSE  !(revert)
[L4932]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4932]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4933]  COND FALSE  !(revert)
[L4936]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4936]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4937]  COND FALSE  !(revert)
[L4940]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4879]              assume msgsender_MSG != null;
[L4880]              Balance[this] := 0;
[L4881]              _cap_ERC20Capped[this] := 0;
[L4883]  COND FALSE  !(!(cap_s903 > 0))
[L4887]              _cap_ERC20Capped[this] := cap_s903;
[L4940]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4941]  COND FALSE  !(revert)
[L5118]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5119]  COND FALSE  !(revert)
[L5122]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5122]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5123]  COND FALSE  !(revert)
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7853]              assume !revert && gas >= 0;
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7856]  CALL        call CorralChoice_OrionToken(this);
[L7679]              havoc msgsender_MSG;
[L7680]              havoc msgvalue_MSG;
[L7681]              havoc choice;
[L7682]              havoc __ret_0_totalSupply;
[L7683]              havoc account_s258;
[L7684]              havoc __ret_0_balanceOf;
[L7685]              havoc recipient_s277;
[L7686]              havoc amount_s277;
[L7687]              havoc __ret_0_transfer;
[L7688]              havoc owner_s293;
[L7689]              havoc spender_s293;
[L7690]              havoc __ret_0_allowance;
[L7691]              havoc spender_s312;
[L7692]              havoc amount_s312;
[L7693]              havoc __ret_0_approve;
[L7694]              havoc sender_s348;
[L7695]              havoc recipient_s348;
[L7696]              havoc amount_s348;
[L7697]              havoc __ret_0_transferFrom;
[L7698]              havoc spender_s375;
[L7699]              havoc addedValue_s375;
[L7700]              havoc __ret_0_increaseAllowance;
[L7701]              havoc spender_s403;
[L7702]              havoc subtractedValue_s403;
[L7703]              havoc __ret_0_decreaseAllowance;
[L7704]              havoc account_s749;
[L7705]              havoc __ret_0_isMinter;
[L7706]              havoc account_s761;
[L7707]              havoc account_s826;
[L7708]              havoc amount_s826;
[L7709]              havoc __ret_0_mint;
[L7710]              havoc name_s857;
[L7711]              havoc symbol_s857;
[L7712]              havoc decimals_s857;
[L7713]              havoc __ret_0_name;
[L7714]              havoc __ret_0_symbol;
[L7715]              havoc __ret_0_decimals;
[L7716]              havoc cap_s903;
[L7717]              havoc __ret_0_cap;
[L7718]              havoc tmpNow;
[L7719]              havoc gas;
[L7720]              assume gas > 4000000 && gas <= 8000000;
[L7721]              tmpNow := now;
[L7722]              havoc now;
[L7723]              assume now > tmpNow;
[L7724]              assume msgsender_MSG != null;
[L7725]              assume DType[msgsender_MSG] != SafeMath;
[L7726]              assume DType[msgsender_MSG] != Context;
[L7727]              assume DType[msgsender_MSG] != IERC20;
[L7728]              assume DType[msgsender_MSG] != ERC20;
[L7729]              assume DType[msgsender_MSG] != Roles;
[L7730]              assume DType[msgsender_MSG] != MinterRole;
[L7731]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7732]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7733]              assume DType[msgsender_MSG] != ERC20Capped;
[L7734]              assume DType[msgsender_MSG] != OrionToken;
[L7735]              Alloc[msgsender_MSG] := true;
[L7736]  COND FALSE  !(choice == 16)
[L7742]  COND FALSE  !(choice == 15)
[L7748]  COND FALSE  !(choice == 14)
[L7755]  COND FALSE  !(choice == 13)
[L7761]  COND TRUE   choice == 12
[L7762]              gas := gas - 21000;
[L7763]  COND TRUE   gas >= 0
[L7764]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7765]              assume msgvalue_MSG == 0;
[L7766]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L7856]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:46,693 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:46,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 186325753, now seen corresponding path program 1 times
[2020-11-25 03:06:46,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:46,712 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:46,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:46,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:46,884 INFO  L82        PathProgramCache]: Analyzing trace with hash 640481709, now seen corresponding path program 1 times
[2020-11-25 03:06:46,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:46,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:46,892 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:46,902 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:46,902 INFO  L82        PathProgramCache]: Analyzing trace with hash -2028242507, now seen corresponding path program 1 times
[2020-11-25 03:06:46,902 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:46,926 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:46,954 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2503 to 5003
[2020-11-25 03:06:47,287 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 103 DAG size of output: 97
[2020-11-25 03:06:47,403 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 253
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 03:06:47,758 WARN  L188               SmtUtils]: Spent 343.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 203
[2020-11-25 03:06:48,324 WARN  L188               SmtUtils]: Spent 562.00 ms on a formula simplification. DAG size of input: 275 DAG size of output: 259
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.003s total
Resizing node table from 7027 to 14051
[2020-11-25 03:06:48,498 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 155
[2020-11-25 03:06:48,647 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 323
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 03:06:49,009 WARN  L188               SmtUtils]: Spent 353.00 ms on a formula simplification. DAG size of input: 260 DAG size of output: 260
[2020-11-25 03:06:49,178 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 03:06:49,441 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 174
[2020-11-25 03:06:49,450 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 03:06:50,445 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 03:06:50,828 WARN  L188               SmtUtils]: Spent 319.00 ms on a formula simplification. DAG size of input: 349 DAG size of output: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 03:06:51,623 WARN  L188               SmtUtils]: Spent 359.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 203
[2020-11-25 03:06:52,123 WARN  L188               SmtUtils]: Spent 498.00 ms on a formula simplification. DAG size of input: 274 DAG size of output: 259
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 03:06:52,266 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 155
[2020-11-25 03:06:52,420 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification that was a NOOP. DAG size: 323
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 03:06:52,766 WARN  L188               SmtUtils]: Spent 338.00 ms on a formula simplification. DAG size of input: 260 DAG size of output: 260
[2020-11-25 03:06:53,536 WARN  L188               SmtUtils]: Spent 768.00 ms on a formula simplification. DAG size of input: 506 DAG size of output: 499
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12323 to 24631
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 03:06:53,812 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification. DAG size of input: 239 DAG size of output: 239
[2020-11-25 03:06:54,075 WARN  L188               SmtUtils]: Spent 244.00 ms on a formula simplification that was a NOOP. DAG size: 353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 03:06:54,466 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 264
[2020-11-25 03:06:54,851 WARN  L188               SmtUtils]: Spent 383.00 ms on a formula simplification. DAG size of input: 380 DAG size of output: 379
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 36697 to 73387
Garbage collection #10: 73387 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 73387 to 123379
[2020-11-25 03:06:55,508 WARN  L188               SmtUtils]: Spent 628.00 ms on a formula simplification. DAG size of input: 391 DAG size of output: 374
[2020-11-25 03:06:55,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:55,553 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:06:55,577 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:55 BasicIcfg
[2020-11-25 03:06:55,577 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:06:55,578 INFO  L168              Benchmark]: Toolchain (without parser) took 22756.78 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 1.2 GB in the end (delta: -265.5 MB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,578 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,579 INFO  L168              Benchmark]: Boogie Preprocessor took 130.51 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,579 INFO  L168              Benchmark]: UtopiaSpecLang took 68.74 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,580 INFO  L168              Benchmark]: Boogie Printer took 28.13 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,580 INFO  L168              Benchmark]: RCFGBuilder took 1107.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 897.6 MB in the beginning and 932.2 MB in the end (delta: -34.6 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,581 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.59 ms. Allocated memory is still 1.1 GB. Free memory was 932.2 MB in the beginning and 918.9 MB in the end (delta: 13.3 MB). Peak memory consumption was 13.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,581 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2377.85 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 187.2 MB). Free memory was 918.9 MB in the beginning and 1.1 GB in the end (delta: -150.1 MB). Peak memory consumption was 489.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,581 INFO  L168              Benchmark]: BlockEncodingV2 took 231.90 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 944.8 MB in the end (delta: 124.3 MB). Peak memory consumption was 124.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,582 INFO  L168              Benchmark]: BuchiAutomizer took 18763.66 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 944.8 MB in the beginning and 1.2 GB in the end (delta: -250.5 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:55,585 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7820 locations, 15038 edges
  - StatisticsResult: Encoded RCFG
    7656 locations, 14581 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 130.51 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.74 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.13 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1107.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 897.6 MB in the beginning and 932.2 MB in the end (delta: -34.6 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.59 ms. Allocated memory is still 1.1 GB. Free memory was 932.2 MB in the beginning and 918.9 MB in the end (delta: 13.3 MB). Peak memory consumption was 13.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2377.85 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 187.2 MB). Free memory was 918.9 MB in the beginning and 1.1 GB in the end (delta: -150.1 MB). Peak memory consumption was 489.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 231.90 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 944.8 MB in the end (delta: 124.3 MB). Peak memory consumption was 124.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 18763.66 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 944.8 MB in the beginning and 1.2 GB in the end (delta: -250.5 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2934 locations, 4571 edges
  - StatisticsResult: BuchiProgram size
    7820 locations, 15038 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.10 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 4751 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 18.6s and 11 iterations.  TraceHistogramMax:12. Analysis of lassos took 11.1s. Construction of modules took 4.5s. BÃ¼chi inclusion checks took 1.7s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 10 MinimizatonAttempts, 1743 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5079 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 53592 SDtfs, 21909 SDslu, 126877 SDs, 0 SdLazy, 68465 SolverSat, 4191 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(10000000000000030) = (new OrionToken)({from : 10000000000000001});
[L1751]              havoc __exception;
[L1752]              revert := false;
[L1753]  COND FALSE  !(__exception)
[L1779]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L5094]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5095]  COND FALSE  !(revert)
[L5098]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L5098]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5099]  COND FALSE  !(revert)
[L5102]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4817]  COND FALSE  !(revert)
[L4820]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4791]              assume msgsender_MSG != null;
[L4792]              Balance[this] := 0;
[L4793]              _name_ERC20Detailed[this] := 1676231298;
[L4794]              _symbol_ERC20Detailed[this] := 1676231298;
[L4795]              _decimals_ERC20Detailed[this] := 0;
[L4797]              _name_ERC20Detailed[this] := name_s857;
[L4798]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4799]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4820]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4821]  COND FALSE  !(revert)
[L5102]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5103]  COND FALSE  !(revert)
[L5106]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L5106]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5107]  COND FALSE  !(revert)
[L5110]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L5110]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5111]  COND FALSE  !(revert)
[L5114]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L5114]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5115]  COND FALSE  !(revert)
[L5118]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4920]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4920]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4921]  COND FALSE  !(revert)
[L4924]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4924]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]  COND FALSE  !(revert)
[L4928]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4928]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]  COND FALSE  !(revert)
[L4932]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4932]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4933]  COND FALSE  !(revert)
[L4936]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4696]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L4700]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L2962]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  COND FALSE  !(revert)
[L2966]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2897]              assume msgsender_MSG != null;
[L2898]              Balance[this] := 0;
[L2912]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2913]  COND FALSE  !(revert)
[L2966]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2967]  COND FALSE  !(revert)
[L2970]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2934]              assume msgsender_MSG != null;
[L2935]              Balance[this] := 0;
[L2936]              _balances_ERC20[this] := zeroRefintArr();
[L2937]              sum__balances0[this] := 0;
[L2938]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2939]              sum__allowances1[this] := 0;
[L2940]              _totalSupply_ERC20[this] := 0;
[L2970]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2853]              assume msgsender_MSG != null;
[L2854]              Balance[this] := 0;
[L2868]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2869]  COND FALSE  !(revert)
[L4424]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4349]              assume msgsender_MSG != null;
[L4350]              Balance[this] := 0;
[L4352]  CALL        call __var_31 := FreshRefGenerator__success();
[L2670]              havoc newRef;
[L2671]              assume Alloc[newRef] == false;
[L2672]              Alloc[newRef] := true;
[L2673]              assume newRef != null;
[L4352]  RET         call __var_31 := FreshRefGenerator__success();
[L4353]  COND FALSE  !(revert)
[L4356]              _minters_MinterRole[this] := __var_31;
[L4358]  COND TRUE   DType[this] == OrionToken
[L4359]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2882]              __ret_0_ := msgsender_MSG;
[L4359]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4360]  COND FALSE  !(revert)
[L4381]  COND TRUE   DType[this] == OrionToken
[L4382]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4630]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4219]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4273]              __var_29 := null;
[L4274]  COND FALSE  !(!(account_s699 != null))
[L4278]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4219]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4220]  COND FALSE  !(revert)
[L4223]  COND FALSE  !(!!__var_27)
[L4227]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4630]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4631]  COND FALSE  !(revert)
[L4634]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4382]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4383]  COND FALSE  !(revert)
[L4428]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L4708]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              Balance[this] := 0;
[L4712]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4936]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4937]  COND FALSE  !(revert)
[L4940]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4879]              assume msgsender_MSG != null;
[L4880]              Balance[this] := 0;
[L4881]              _cap_ERC20Capped[this] := 0;
[L4883]  COND FALSE  !(!(cap_s903 > 0))
[L4887]              _cap_ERC20Capped[this] := cap_s903;
[L4940]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4941]  COND FALSE  !(revert)
[L5118]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5119]  COND FALSE  !(revert)
[L5122]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5122]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5123]  COND FALSE  !(revert)
[L1779]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1780]              assume !revert && gas >= 0;
[L7852]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
ERC20(10000000000000030).approve~address~uint256.gas(3979002)({from : 10000000000000024, spender : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);

Loop:
ERC20(10000000000000030).approve~address~uint256.gas(3979001)({from : 10000000000000023, spender : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND TRUE   __exception
[L609]               __tmp__Balance := Balance;
[L610]               __tmp__DType := DType;
[L611]               __tmp__Alloc := Alloc;
[L612]               __tmp__balance_ADDR := balance_ADDR;
[L613]               __tmp__M_Ref_int := M_Ref_int;
[L614]               __tmp__sum__balances0 := sum__balances0;
[L615]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L616]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L617]               __tmp__sum__allowances1 := sum__allowances1;
[L618]               __tmp__M_Ref_bool := M_Ref_bool;
[L619]               __tmp__sum := sum;
[L620]               __tmp__Length := Length;
[L621]               __tmp__now := now;
[L622]               __tmp___balances_ERC20 := _balances_ERC20;
[L623]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L624]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L625]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L626]               __tmp___minters_MinterRole := _minters_MinterRole;
[L627]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L628]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L629]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L630]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L631]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3121]  COND TRUE   __tmp__DType[this] == OrionToken
[L3122]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              __ret_0_ := msgsender_MSG;
[L3122]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3144]  COND TRUE   __tmp__DType[this] == OrionToken
[L3145]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3929]              __var_22 := null;
[L3930]  COND FALSE  !(!(owner_s590 != null))
[L3934]              __var_23 := null;
[L3935]  COND TRUE   !(spender_s590 != null)
[L3936]              revert := true;
[L3145]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3146]  COND TRUE   revert
[L631]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L632]               assume revert || gas < 0;
[L7766]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
