This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:36:05,534 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:36:05,536 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:36:05,547 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:36:05,547 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:36:05,548 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:36:05,549 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:36:05,550 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:36:05,552 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:36:05,552 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:36:05,553 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:36:05,553 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:36:05,554 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:36:05,555 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:36:05,556 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:36:05,557 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:36:05,557 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:36:05,558 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:36:05,560 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:36:05,562 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:36:05,562 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:36:05,563 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:36:05,565 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:36:05,565 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:36:05,565 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:36:05,566 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:36:05,566 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:36:05,567 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:36:05,567 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:36:05,567 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:36:05,568 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:36:05,568 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:36:05,569 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:36:05,570 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:36:05,570 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:36:05,570 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:36:05,571 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:36:05,571 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:36:05,572 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:36:05,572 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:36:05,573 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:36:05,573 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:36:05,581 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:36:05,581 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:36:05,582 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:36:05,582 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:36:05,582 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:36:05,582 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:36:05,582 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:36:05,582 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:36:05,583 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:36:05,583 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:36:05,583 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:36:05,584 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:36:05,584 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:36:05,608 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:36:05,620 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:36:05,623 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:36:05,624 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:36:05,625 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:36:05,625 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl
[2020-11-25 02:36:05,625 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl'
[2020-11-25 02:36:05,749 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:36:05,750 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:36:05,750 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:36:05,750 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:36:05,750 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:36:05,767 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,769 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,818 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,819 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,851 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,870 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,886 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,905 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:36:05,906 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:36:05,906 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:36:05,908 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:36:05,912 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/1) ...
[2020-11-25 02:36:05,935 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 02:36:05,941 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 02:36:05,949 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 02:36:05,958 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s937==to_s937 && ( value_s937>_balances_ERC20[this][from_s937] || value_s937>_allowed_ERC20[this][from_s937][msg.sender] ) ) && value_s937>=0 ) && value_s937<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s937]>=0 ) && _balances_ERC20[this][to_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s937]>=0 ) && _balances_ERC20[this][from_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s937][msg.sender]>=0 ) && _allowed_ERC20[this][from_s937][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:36:05,966 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 02:36:05,966 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(fail_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:36:05,985 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:05 PropertyContainer
[2020-11-25 02:36:05,986 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:36:05,986 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:36:05,986 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:36:05,986 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:36:05,987 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/2) ...
[2020-11-25 02:36:05,987 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:36:05,988 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:36:06,013 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:05" (2/2) ...
[2020-11-25 02:36:06,014 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:36:06,014 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:36:06,014 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:36:06,014 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:36:06,015 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/2) ...
[2020-11-25 02:36:06,071 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:36:06,071 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:36:06,071 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:36:06,071 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:36:06,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:36:06,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:36:06,072 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,073 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,073 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,073 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:36:06,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:36:06,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:36:06,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:36:06,074 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:36:06,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:36:06,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:06,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:36:06,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:36:06,076 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:36:06,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:36:06,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:36:06,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:36:06,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:36:06,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:36:06,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:36:06,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:36:06,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:36:06,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:36:06,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:36:06,079 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,079 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,080 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:36:06,080 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:36:06,080 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:36:06,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:36:06,080 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:36:06,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:36:06,080 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:36:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:36:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:36:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:36:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:36:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:36:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:36:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:36:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:36:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:36:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:36:06,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:36:06,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:36:06,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:36:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:36:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:36:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:36:06,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:36:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:36:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:36:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:36:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:36:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:36:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:36:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:36:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:36:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:36:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:36:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:36:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:36:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:36:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:36:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:36:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:36:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:36:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:36:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:36:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:36:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:36:06,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:36:06,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:36:06,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:36:06,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:36:06,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:36:06,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:36:06,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:36:06,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:36:06,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:36:06,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:06,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:36:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:36:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:36:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:36:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:36:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:36:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:36:06,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:36:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:36:06,726 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:36:06,726 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:36:07,444 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:36:07,444 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:36:07,447 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:07 BoogieIcfgContainer
[2020-11-25 02:36:07,447 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:05" (2/2) ...
[2020-11-25 02:36:07,448 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:36:07,448 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3162e877 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:07, skipping insertion in model container
[2020-11-25 02:36:07,448 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:36:07,448 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:36:07,448 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:36:07,450 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:36:07,450 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/3) ...
[2020-11-25 02:36:07,450 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1cbea69d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:07, skipping insertion in model container
[2020-11-25 02:36:07,450 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:36:07,489 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:07 NWAContainer
[2020-11-25 02:36:07,489 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:36:07,489 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:36:07,489 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:36:07,490 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:36:07,491 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:07" (3/4) ...
[2020-11-25 02:36:07,492 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5db59ab and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:36:07, skipping insertion in model container
[2020-11-25 02:36:07,492 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:07" (4/4) ...
[2020-11-25 02:36:07,495 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:36:07,502 INFO  L110   BuchiProductObserver]: Initial RCFG 3602 locations, 5214 edges
[2020-11-25 02:36:07,502 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:36:07,517 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:36:10,490 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:36:10,502 INFO  L110   BuchiProductObserver]: BuchiProgram size 9260 locations, 17149 edges
[2020-11-25 02:36:10,502 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:36:10 BoogieIcfgContainer
[2020-11-25 02:36:10,502 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:36:10,502 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:36:10,502 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:36:10,504 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:36:10,504 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:36:10" (1/1) ...
[2020-11-25 02:36:10,658 INFO  L313           BlockEncoder]: Initial Icfg 9260 locations, 17149 edges
[2020-11-25 02:36:10,659 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:36:10,659 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:36:10,659 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:36:10,659 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:36:10,676 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:36:10,693 INFO  L70        RemoveSinkStates]: Removed 166 edges and 102 locations by removing sink states
[2020-11-25 02:36:10,711 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:36:10,716 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:36:10,722 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:36:10,722 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:36:10,726 INFO  L313           BlockEncoder]: Encoded RCFG 9079 locations, 16672 edges
[2020-11-25 02:36:10,726 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:36:10 BasicIcfg
[2020-11-25 02:36:10,726 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:36:10,727 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:36:10,727 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:36:10,728 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:36:10,728 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,729 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:05" (1/6) ...
[2020-11-25 02:36:10,730 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5487ed58 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:36:10, skipping insertion in model container
[2020-11-25 02:36:10,730 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,730 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:05" (2/6) ...
[2020-11-25 02:36:10,730 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5487ed58 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:36:10, skipping insertion in model container
[2020-11-25 02:36:10,730 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,730 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:07" (3/6) ...
[2020-11-25 02:36:10,730 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5487ed58 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:36:10, skipping insertion in model container
[2020-11-25 02:36:10,731 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,731 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:07" (4/6) ...
[2020-11-25 02:36:10,731 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5487ed58 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:36:10, skipping insertion in model container
[2020-11-25 02:36:10,731 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,731 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:36:10" (5/6) ...
[2020-11-25 02:36:10,731 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5487ed58 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:36:10, skipping insertion in model container
[2020-11-25 02:36:10,731 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:36:10,731 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:36:10" (6/6) ...
[2020-11-25 02:36:10,732 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self-fail.bpl_BEv2
[2020-11-25 02:36:10,767 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:36:10,767 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:36:10,767 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:36:10,767 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:36:10,767 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:36:10,767 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:36:10,767 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:36:10,767 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:36:10,767 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:36:10,824 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9079 states.
[2020-11-25 02:36:10,894 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:36:10,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:10,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:10,901 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:10,901 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:10,901 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:36:10,901 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9079 states.
[2020-11-25 02:36:10,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:36:10,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:10,931 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:10,932 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:10,933 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:10,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:10,946 INFO  L82        PathProgramCache]: Analyzing trace with hash -1266428548, now seen corresponding path program 1 times
[2020-11-25 02:36:10,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:10,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:11,010 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:36:11,012 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:11,012 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:36:11,409 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:11,418 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:36:11,418 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:36:11,419 INFO  L87              Difference]: Start difference. First operand 9079 states. Second operand 4 states.
[2020-11-25 02:36:12,261 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:12,262 INFO  L93              Difference]: Finished difference Result 4935 states and 5963 transitions.
[2020-11-25 02:36:12,262 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:36:12,263 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4935 states and 5963 transitions.
[2020-11-25 02:36:12,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:36:12,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4935 states to 4935 states and 5963 transitions.
[2020-11-25 02:36:12,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 02:36:12,320 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 930
[2020-11-25 02:36:12,320 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4935 states and 5963 transitions.
[2020-11-25 02:36:12,330 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:12,330 INFO  L728         BuchiCegarLoop]: Abstraction has 4935 states and 5963 transitions.
[2020-11-25 02:36:12,346 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4935 states and 5963 transitions.
[2020-11-25 02:36:12,426 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4935 to 4935.
[2020-11-25 02:36:12,427 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4935 states.
[2020-11-25 02:36:12,434 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4935 states to 4935 states and 5963 transitions.
[2020-11-25 02:36:12,435 INFO  L751         BuchiCegarLoop]: Abstraction has 4935 states and 5963 transitions.
[2020-11-25 02:36:12,435 INFO  L631         BuchiCegarLoop]: Abstraction has 4935 states and 5963 transitions.
[2020-11-25 02:36:12,435 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:36:12,435 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4935 states and 5963 transitions.
[2020-11-25 02:36:12,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:36:12,446 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:12,446 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:12,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:12,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:12,453 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:12,453 INFO  L82        PathProgramCache]: Analyzing trace with hash -956402373, now seen corresponding path program 1 times
[2020-11-25 02:36:12,454 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:12,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:12,489 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:36:12,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:12,489 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:36:12,490 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:12,490 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:36:12,491 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:36:12,491 INFO  L87              Difference]: Start difference. First operand 4935 states and 5963 transitions. cyclomatic complexity: 1030 Second operand 3 states.
[2020-11-25 02:36:12,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:12,682 INFO  L93              Difference]: Finished difference Result 6738 states and 8150 transitions.
[2020-11-25 02:36:12,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:36:12,683 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6738 states and 8150 transitions.
[2020-11-25 02:36:12,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:12,728 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6738 states to 6738 states and 8150 transitions.
[2020-11-25 02:36:12,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1440
[2020-11-25 02:36:12,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1440
[2020-11-25 02:36:12,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6738 states and 8150 transitions.
[2020-11-25 02:36:12,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:12,738 INFO  L728         BuchiCegarLoop]: Abstraction has 6738 states and 8150 transitions.
[2020-11-25 02:36:12,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6738 states and 8150 transitions.
[2020-11-25 02:36:12,809 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6738 to 6110.
[2020-11-25 02:36:12,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6110 states.
[2020-11-25 02:36:12,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6110 states to 6110 states and 7395 transitions.
[2020-11-25 02:36:12,818 INFO  L751         BuchiCegarLoop]: Abstraction has 6110 states and 7395 transitions.
[2020-11-25 02:36:12,819 INFO  L631         BuchiCegarLoop]: Abstraction has 6110 states and 7395 transitions.
[2020-11-25 02:36:12,819 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:36:12,819 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6110 states and 7395 transitions.
[2020-11-25 02:36:12,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:12,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:12,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:12,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:12,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:12,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:12,834 INFO  L82        PathProgramCache]: Analyzing trace with hash -1614598557, now seen corresponding path program 1 times
[2020-11-25 02:36:12,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:12,843 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:12,916 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:36:12,916 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:12,916 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:36:12,917 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:12,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:36:12,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:36:12,917 INFO  L87              Difference]: Start difference. First operand 6110 states and 7395 transitions. cyclomatic complexity: 1287 Second operand 7 states.
[2020-11-25 02:36:13,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:13,168 INFO  L93              Difference]: Finished difference Result 6161 states and 7466 transitions.
[2020-11-25 02:36:13,168 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:36:13,168 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6161 states and 7466 transitions.
[2020-11-25 02:36:13,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,209 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6161 states to 6122 states and 7410 transitions.
[2020-11-25 02:36:13,209 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1339
[2020-11-25 02:36:13,210 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1339
[2020-11-25 02:36:13,210 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6122 states and 7410 transitions.
[2020-11-25 02:36:13,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:13,215 INFO  L728         BuchiCegarLoop]: Abstraction has 6122 states and 7410 transitions.
[2020-11-25 02:36:13,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6122 states and 7410 transitions.
[2020-11-25 02:36:13,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6122 to 6122.
[2020-11-25 02:36:13,300 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6122 states.
[2020-11-25 02:36:13,307 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6122 states to 6122 states and 7410 transitions.
[2020-11-25 02:36:13,307 INFO  L751         BuchiCegarLoop]: Abstraction has 6122 states and 7410 transitions.
[2020-11-25 02:36:13,307 INFO  L631         BuchiCegarLoop]: Abstraction has 6122 states and 7410 transitions.
[2020-11-25 02:36:13,307 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:36:13,307 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6122 states and 7410 transitions.
[2020-11-25 02:36:13,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:13,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:13,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:13,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:13,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:13,327 INFO  L82        PathProgramCache]: Analyzing trace with hash -1000978645, now seen corresponding path program 1 times
[2020-11-25 02:36:13,328 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:13,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:13,365 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:36:13,365 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:13,365 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:36:13,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:13,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:36:13,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:36:13,366 INFO  L87              Difference]: Start difference. First operand 6122 states and 7410 transitions. cyclomatic complexity: 1290 Second operand 9 states.
[2020-11-25 02:36:13,447 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:13,448 INFO  L93              Difference]: Finished difference Result 6180 states and 7502 transitions.
[2020-11-25 02:36:13,448 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:36:13,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6180 states and 7502 transitions.
[2020-11-25 02:36:13,462 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,479 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6180 states to 6180 states and 7502 transitions.
[2020-11-25 02:36:13,479 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1348
[2020-11-25 02:36:13,480 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1348
[2020-11-25 02:36:13,480 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6180 states and 7502 transitions.
[2020-11-25 02:36:13,486 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:13,486 INFO  L728         BuchiCegarLoop]: Abstraction has 6180 states and 7502 transitions.
[2020-11-25 02:36:13,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6180 states and 7502 transitions.
[2020-11-25 02:36:13,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6180 to 6135.
[2020-11-25 02:36:13,539 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6135 states.
[2020-11-25 02:36:13,546 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6135 states to 6135 states and 7440 transitions.
[2020-11-25 02:36:13,547 INFO  L751         BuchiCegarLoop]: Abstraction has 6135 states and 7440 transitions.
[2020-11-25 02:36:13,547 INFO  L631         BuchiCegarLoop]: Abstraction has 6135 states and 7440 transitions.
[2020-11-25 02:36:13,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:36:13,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6135 states and 7440 transitions.
[2020-11-25 02:36:13,553 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:13,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:13,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:13,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:13,558 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:13,558 INFO  L82        PathProgramCache]: Analyzing trace with hash -2006519358, now seen corresponding path program 1 times
[2020-11-25 02:36:13,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:13,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:13,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:36:13,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:13,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:36:13,604 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:13,604 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:36:13,604 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:36:13,605 INFO  L87              Difference]: Start difference. First operand 6135 states and 7440 transitions. cyclomatic complexity: 1307 Second operand 10 states.
[2020-11-25 02:36:13,692 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:13,693 INFO  L93              Difference]: Finished difference Result 6207 states and 7550 transitions.
[2020-11-25 02:36:13,693 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:36:13,693 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6207 states and 7550 transitions.
[2020-11-25 02:36:13,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6207 states to 6207 states and 7550 transitions.
[2020-11-25 02:36:13,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1355
[2020-11-25 02:36:13,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1355
[2020-11-25 02:36:13,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6207 states and 7550 transitions.
[2020-11-25 02:36:13,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:13,723 INFO  L728         BuchiCegarLoop]: Abstraction has 6207 states and 7550 transitions.
[2020-11-25 02:36:13,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6207 states and 7550 transitions.
[2020-11-25 02:36:13,762 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6207 to 6142.
[2020-11-25 02:36:13,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6142 states.
[2020-11-25 02:36:13,768 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6142 states to 6142 states and 7449 transitions.
[2020-11-25 02:36:13,768 INFO  L751         BuchiCegarLoop]: Abstraction has 6142 states and 7449 transitions.
[2020-11-25 02:36:13,768 INFO  L631         BuchiCegarLoop]: Abstraction has 6142 states and 7449 transitions.
[2020-11-25 02:36:13,768 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:36:13,768 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6142 states and 7449 transitions.
[2020-11-25 02:36:13,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:13,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:13,776 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:13,776 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND TRUE   !!__var_18
[L4816]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND TRUE   revert
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:13,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:13,779 INFO  L82        PathProgramCache]: Analyzing trace with hash -64415455, now seen corresponding path program 1 times
[2020-11-25 02:36:13,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:13,788 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:13,816 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:36:13,816 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:13,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:36:13,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:13,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:36:13,817 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:36:13,817 INFO  L87              Difference]: Start difference. First operand 6142 states and 7449 transitions. cyclomatic complexity: 1309 Second operand 3 states.
[2020-11-25 02:36:13,924 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:13,924 INFO  L93              Difference]: Finished difference Result 6761 states and 7795 transitions.
[2020-11-25 02:36:13,924 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:36:13,924 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6761 states and 7795 transitions.
[2020-11-25 02:36:13,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:13,951 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6761 states to 6057 states and 6940 transitions.
[2020-11-25 02:36:13,952 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1217
[2020-11-25 02:36:13,952 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1279
[2020-11-25 02:36:13,952 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6057 states and 6940 transitions.
[2020-11-25 02:36:13,956 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:13,956 INFO  L728         BuchiCegarLoop]: Abstraction has 6057 states and 6940 transitions.
[2020-11-25 02:36:13,961 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6057 states and 6940 transitions.
[2020-11-25 02:36:13,989 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6057 to 5562.
[2020-11-25 02:36:13,989 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5562 states.
[2020-11-25 02:36:13,994 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5562 states to 5562 states and 6318 transitions.
[2020-11-25 02:36:13,994 INFO  L751         BuchiCegarLoop]: Abstraction has 5562 states and 6318 transitions.
[2020-11-25 02:36:13,995 INFO  L631         BuchiCegarLoop]: Abstraction has 5562 states and 6318 transitions.
[2020-11-25 02:36:13,995 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:36:13,995 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5562 states and 6318 transitions.
[2020-11-25 02:36:14,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:14,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:14,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:14,004 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:14,004 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:14,010 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:14,010 INFO  L82        PathProgramCache]: Analyzing trace with hash -775064403, now seen corresponding path program 1 times
[2020-11-25 02:36:14,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:14,026 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:14,274 INFO  L134       CoverageAnalysis]: Checked inductivity of 1033 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 996 trivial. 0 not checked.
[2020-11-25 02:36:14,274 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:14,274 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:36:14,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:14,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:36:14,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:36:14,275 INFO  L87              Difference]: Start difference. First operand 5562 states and 6318 transitions. cyclomatic complexity: 758 Second operand 8 states.
[2020-11-25 02:36:14,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:14,415 INFO  L93              Difference]: Finished difference Result 5595 states and 6358 transitions.
[2020-11-25 02:36:14,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:36:14,416 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5595 states and 6358 transitions.
[2020-11-25 02:36:14,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:14,435 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5595 states to 5569 states and 6326 transitions.
[2020-11-25 02:36:14,435 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1238
[2020-11-25 02:36:14,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1238
[2020-11-25 02:36:14,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5569 states and 6326 transitions.
[2020-11-25 02:36:14,439 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:14,439 INFO  L728         BuchiCegarLoop]: Abstraction has 5569 states and 6326 transitions.
[2020-11-25 02:36:14,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5569 states and 6326 transitions.
[2020-11-25 02:36:14,470 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5569 to 5569.
[2020-11-25 02:36:14,470 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5569 states.
[2020-11-25 02:36:14,475 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5569 states to 5569 states and 6326 transitions.
[2020-11-25 02:36:14,475 INFO  L751         BuchiCegarLoop]: Abstraction has 5569 states and 6326 transitions.
[2020-11-25 02:36:14,475 INFO  L631         BuchiCegarLoop]: Abstraction has 5569 states and 6326 transitions.
[2020-11-25 02:36:14,476 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:36:14,476 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5569 states and 6326 transitions.
[2020-11-25 02:36:14,481 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:14,481 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:14,481 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:14,484 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:14,484 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:14,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:14,490 INFO  L82        PathProgramCache]: Analyzing trace with hash -1777136688, now seen corresponding path program 1 times
[2020-11-25 02:36:14,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:14,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:14,713 INFO  L134       CoverageAnalysis]: Checked inductivity of 1036 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 1026 trivial. 0 not checked.
[2020-11-25 02:36:14,713 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:14,713 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:36:14,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:14,714 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:36:14,714 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:36:14,714 INFO  L87              Difference]: Start difference. First operand 5569 states and 6326 transitions. cyclomatic complexity: 759 Second operand 7 states.
[2020-11-25 02:36:14,830 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:14,830 INFO  L93              Difference]: Finished difference Result 5592 states and 6352 transitions.
[2020-11-25 02:36:14,830 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:36:14,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5592 states and 6352 transitions.
[2020-11-25 02:36:14,840 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:14,850 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5592 states to 5575 states and 6332 transitions.
[2020-11-25 02:36:14,850 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1238
[2020-11-25 02:36:14,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1238
[2020-11-25 02:36:14,851 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5575 states and 6332 transitions.
[2020-11-25 02:36:14,855 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:14,855 INFO  L728         BuchiCegarLoop]: Abstraction has 5575 states and 6332 transitions.
[2020-11-25 02:36:14,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5575 states and 6332 transitions.
[2020-11-25 02:36:14,886 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5575 to 5575.
[2020-11-25 02:36:14,886 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5575 states.
[2020-11-25 02:36:14,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5575 states to 5575 states and 6332 transitions.
[2020-11-25 02:36:14,892 INFO  L751         BuchiCegarLoop]: Abstraction has 5575 states and 6332 transitions.
[2020-11-25 02:36:14,892 INFO  L631         BuchiCegarLoop]: Abstraction has 5575 states and 6332 transitions.
[2020-11-25 02:36:14,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:36:14,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5575 states and 6332 transitions.
[2020-11-25 02:36:14,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:36:14,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:14,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:14,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:14,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND TRUE   DType[this] == ERC20Burnable
[L4409]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4409]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4410]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND TRUE   DType[this] == ERC20Burnable
[L4409]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4409]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4410]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:14,905 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:14,905 INFO  L82        PathProgramCache]: Analyzing trace with hash -1018728971, now seen corresponding path program 1 times
[2020-11-25 02:36:14,906 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:14,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:15,204 INFO  L134       CoverageAnalysis]: Checked inductivity of 1012 backedges. 9 proven. 34 refuted. 0 times theorem prover too weak. 969 trivial. 0 not checked.
[2020-11-25 02:36:15,204 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:15,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:36:15,205 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:15,205 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:36:15,205 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:36:15,205 INFO  L87              Difference]: Start difference. First operand 5575 states and 6332 transitions. cyclomatic complexity: 759 Second operand 10 states.
[2020-11-25 02:36:16,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:16,351 INFO  L93              Difference]: Finished difference Result 7757 states and 8920 transitions.
[2020-11-25 02:36:16,351 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:36:16,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7757 states and 8920 transitions.
[2020-11-25 02:36:16,366 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:16,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7757 states to 7728 states and 8882 transitions.
[2020-11-25 02:36:16,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1714
[2020-11-25 02:36:16,382 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1714
[2020-11-25 02:36:16,382 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7728 states and 8882 transitions.
[2020-11-25 02:36:16,387 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:16,387 INFO  L728         BuchiCegarLoop]: Abstraction has 7728 states and 8882 transitions.
[2020-11-25 02:36:16,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7728 states and 8882 transitions.
[2020-11-25 02:36:16,428 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7728 to 7636.
[2020-11-25 02:36:16,428 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7636 states.
[2020-11-25 02:36:16,436 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7636 states to 7636 states and 8790 transitions.
[2020-11-25 02:36:16,436 INFO  L751         BuchiCegarLoop]: Abstraction has 7636 states and 8790 transitions.
[2020-11-25 02:36:16,436 INFO  L631         BuchiCegarLoop]: Abstraction has 7636 states and 8790 transitions.
[2020-11-25 02:36:16,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:36:16,436 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7636 states and 8790 transitions.
[2020-11-25 02:36:16,444 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:16,444 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:16,444 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:16,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:16,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:16,452 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:16,452 INFO  L82        PathProgramCache]: Analyzing trace with hash -402843462, now seen corresponding path program 1 times
[2020-11-25 02:36:16,453 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:16,464 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:16,742 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 9 proven. 25 refuted. 0 times theorem prover too weak. 971 trivial. 0 not checked.
[2020-11-25 02:36:16,742 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:16,742 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:36:16,743 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:16,743 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:36:16,743 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:36:16,743 INFO  L87              Difference]: Start difference. First operand 7636 states and 8790 transitions. cyclomatic complexity: 1158 Second operand 9 states.
[2020-11-25 02:36:18,042 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:18,042 INFO  L93              Difference]: Finished difference Result 7782 states and 8949 transitions.
[2020-11-25 02:36:18,042 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:36:18,042 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7782 states and 8949 transitions.
[2020-11-25 02:36:18,060 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:18,075 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7782 states to 7739 states and 8895 transitions.
[2020-11-25 02:36:18,075 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1714
[2020-11-25 02:36:18,076 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1714
[2020-11-25 02:36:18,076 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7739 states and 8895 transitions.
[2020-11-25 02:36:18,080 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:18,080 INFO  L728         BuchiCegarLoop]: Abstraction has 7739 states and 8895 transitions.
[2020-11-25 02:36:18,084 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7739 states and 8895 transitions.
[2020-11-25 02:36:18,121 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7739 to 7636.
[2020-11-25 02:36:18,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7636 states.
[2020-11-25 02:36:18,130 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7636 states to 7636 states and 8790 transitions.
[2020-11-25 02:36:18,130 INFO  L751         BuchiCegarLoop]: Abstraction has 7636 states and 8790 transitions.
[2020-11-25 02:36:18,130 INFO  L631         BuchiCegarLoop]: Abstraction has 7636 states and 8790 transitions.
[2020-11-25 02:36:18,130 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:36:18,130 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7636 states and 8790 transitions.
[2020-11-25 02:36:18,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:18,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:18,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:18,140 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:18,140 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:18,145 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:18,145 INFO  L82        PathProgramCache]: Analyzing trace with hash -126460187, now seen corresponding path program 1 times
[2020-11-25 02:36:18,146 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:18,160 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:18,341 INFO  L134       CoverageAnalysis]: Checked inductivity of 980 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 962 trivial. 0 not checked.
[2020-11-25 02:36:18,341 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:18,341 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:36:18,341 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:18,341 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:36:18,341 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:36:18,342 INFO  L87              Difference]: Start difference. First operand 7636 states and 8790 transitions. cyclomatic complexity: 1158 Second operand 9 states.
[2020-11-25 02:36:19,766 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:19,766 INFO  L93              Difference]: Finished difference Result 7789 states and 8961 transitions.
[2020-11-25 02:36:19,766 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:36:19,766 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7789 states and 8961 transitions.
[2020-11-25 02:36:19,781 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:19,796 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7789 states to 7732 states and 8885 transitions.
[2020-11-25 02:36:19,796 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1714
[2020-11-25 02:36:19,797 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1714
[2020-11-25 02:36:19,797 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7732 states and 8885 transitions.
[2020-11-25 02:36:19,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:19,801 INFO  L728         BuchiCegarLoop]: Abstraction has 7732 states and 8885 transitions.
[2020-11-25 02:36:19,805 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7732 states and 8885 transitions.
[2020-11-25 02:36:19,840 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7732 to 7642.
[2020-11-25 02:36:19,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7642 states.
[2020-11-25 02:36:19,848 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7642 states to 7642 states and 8795 transitions.
[2020-11-25 02:36:19,849 INFO  L751         BuchiCegarLoop]: Abstraction has 7642 states and 8795 transitions.
[2020-11-25 02:36:19,849 INFO  L631         BuchiCegarLoop]: Abstraction has 7642 states and 8795 transitions.
[2020-11-25 02:36:19,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:36:19,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7642 states and 8795 transitions.
[2020-11-25 02:36:19,857 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:19,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:19,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:19,859 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:19,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L5687]  COND TRUE   __tmp__DType[this] == MinterRole
[L5688]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5688]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5689]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND TRUE   DType[this] == ERC20Pausable
[L4419]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4419]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4420]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:19,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:19,864 INFO  L82        PathProgramCache]: Analyzing trace with hash 2117771139, now seen corresponding path program 1 times
[2020-11-25 02:36:19,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:19,884 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:20,052 INFO  L134       CoverageAnalysis]: Checked inductivity of 994 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 962 trivial. 0 not checked.
[2020-11-25 02:36:20,052 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:20,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:36:20,053 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:20,053 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:36:20,053 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:36:20,053 INFO  L87              Difference]: Start difference. First operand 7642 states and 8795 transitions. cyclomatic complexity: 1157 Second operand 4 states.
[2020-11-25 02:36:20,325 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:20,325 INFO  L93              Difference]: Finished difference Result 8597 states and 9965 transitions.
[2020-11-25 02:36:20,325 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:36:20,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8597 states and 9965 transitions.
[2020-11-25 02:36:20,343 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 02:36:20,359 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8597 states to 8299 states and 9641 transitions.
[2020-11-25 02:36:20,360 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1819
[2020-11-25 02:36:20,360 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1819
[2020-11-25 02:36:20,360 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8299 states and 9641 transitions.
[2020-11-25 02:36:20,365 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:20,365 INFO  L728         BuchiCegarLoop]: Abstraction has 8299 states and 9641 transitions.
[2020-11-25 02:36:20,369 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8299 states and 9641 transitions.
[2020-11-25 02:36:20,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8299 to 7738.
[2020-11-25 02:36:20,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7738 states.
[2020-11-25 02:36:20,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7738 states to 7738 states and 8932 transitions.
[2020-11-25 02:36:20,414 INFO  L751         BuchiCegarLoop]: Abstraction has 7738 states and 8932 transitions.
[2020-11-25 02:36:20,414 INFO  L631         BuchiCegarLoop]: Abstraction has 7738 states and 8932 transitions.
[2020-11-25 02:36:20,415 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:36:20,415 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7738 states and 8932 transitions.
[2020-11-25 02:36:20,422 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:20,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:20,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:20,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:20,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5720]  COND TRUE   DType[this] == MinterRole
[L5721]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5721]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5722]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:20,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:20,429 INFO  L82        PathProgramCache]: Analyzing trace with hash -80391850, now seen corresponding path program 1 times
[2020-11-25 02:36:20,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:20,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:20,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1025 trivial. 0 not checked.
[2020-11-25 02:36:20,639 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:20,639 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:36:20,640 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:20,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:36:20,640 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:36:20,640 INFO  L87              Difference]: Start difference. First operand 7738 states and 8932 transitions. cyclomatic complexity: 1198 Second operand 8 states.
[2020-11-25 02:36:20,769 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:20,769 INFO  L93              Difference]: Finished difference Result 7765 states and 8961 transitions.
[2020-11-25 02:36:20,769 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:36:20,769 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7765 states and 8961 transitions.
[2020-11-25 02:36:20,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:20,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7765 states to 7733 states and 8925 transitions.
[2020-11-25 02:36:20,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 02:36:20,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 02:36:20,796 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7733 states and 8925 transitions.
[2020-11-25 02:36:20,800 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:20,800 INFO  L728         BuchiCegarLoop]: Abstraction has 7733 states and 8925 transitions.
[2020-11-25 02:36:20,804 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7733 states and 8925 transitions.
[2020-11-25 02:36:20,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7733 to 7733.
[2020-11-25 02:36:20,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7733 states.
[2020-11-25 02:36:20,842 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7733 states to 7733 states and 8925 transitions.
[2020-11-25 02:36:20,843 INFO  L751         BuchiCegarLoop]: Abstraction has 7733 states and 8925 transitions.
[2020-11-25 02:36:20,843 INFO  L631         BuchiCegarLoop]: Abstraction has 7733 states and 8925 transitions.
[2020-11-25 02:36:20,843 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:36:20,843 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7733 states and 8925 transitions.
[2020-11-25 02:36:20,850 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:20,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:20,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:20,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:20,852 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:20,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:20,856 INFO  L82        PathProgramCache]: Analyzing trace with hash -1349496961, now seen corresponding path program 1 times
[2020-11-25 02:36:20,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:20,870 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:21,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 1021 backedges. 12 proven. 11 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 02:36:21,033 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:21,033 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:36:21,033 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:21,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:36:21,034 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:36:21,034 INFO  L87              Difference]: Start difference. First operand 7733 states and 8925 transitions. cyclomatic complexity: 1196 Second operand 8 states.
[2020-11-25 02:36:21,165 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:21,165 INFO  L93              Difference]: Finished difference Result 7766 states and 8965 transitions.
[2020-11-25 02:36:21,166 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:36:21,166 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7766 states and 8965 transitions.
[2020-11-25 02:36:21,179 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:21,192 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7766 states to 7733 states and 8924 transitions.
[2020-11-25 02:36:21,192 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 02:36:21,193 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 02:36:21,193 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7733 states and 8924 transitions.
[2020-11-25 02:36:21,196 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:21,196 INFO  L728         BuchiCegarLoop]: Abstraction has 7733 states and 8924 transitions.
[2020-11-25 02:36:21,200 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7733 states and 8924 transitions.
[2020-11-25 02:36:21,230 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7733 to 7733.
[2020-11-25 02:36:21,230 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7733 states.
[2020-11-25 02:36:21,238 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7733 states to 7733 states and 8924 transitions.
[2020-11-25 02:36:21,238 INFO  L751         BuchiCegarLoop]: Abstraction has 7733 states and 8924 transitions.
[2020-11-25 02:36:21,238 INFO  L631         BuchiCegarLoop]: Abstraction has 7733 states and 8924 transitions.
[2020-11-25 02:36:21,238 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:36:21,238 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7733 states and 8924 transitions.
[2020-11-25 02:36:21,245 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:21,246 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:21,246 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:21,247 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:21,247 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:21,251 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:21,251 INFO  L82        PathProgramCache]: Analyzing trace with hash 789775151, now seen corresponding path program 1 times
[2020-11-25 02:36:21,252 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:21,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:21,499 INFO  L134       CoverageAnalysis]: Checked inductivity of 1023 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 02:36:21,499 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:21,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:36:21,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:21,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:36:21,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:36:21,501 INFO  L87              Difference]: Start difference. First operand 7733 states and 8924 transitions. cyclomatic complexity: 1195 Second operand 9 states.
[2020-11-25 02:36:21,643 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:21,643 INFO  L93              Difference]: Finished difference Result 7776 states and 8973 transitions.
[2020-11-25 02:36:21,643 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:36:21,643 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7776 states and 8973 transitions.
[2020-11-25 02:36:21,656 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:21,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7776 states to 7729 states and 8918 transitions.
[2020-11-25 02:36:21,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 02:36:21,670 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 02:36:21,670 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7729 states and 8918 transitions.
[2020-11-25 02:36:21,673 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:21,674 INFO  L728         BuchiCegarLoop]: Abstraction has 7729 states and 8918 transitions.
[2020-11-25 02:36:21,678 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7729 states and 8918 transitions.
[2020-11-25 02:36:21,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7729 to 7729.
[2020-11-25 02:36:21,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7729 states.
[2020-11-25 02:36:21,717 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7729 states to 7729 states and 8918 transitions.
[2020-11-25 02:36:21,717 INFO  L751         BuchiCegarLoop]: Abstraction has 7729 states and 8918 transitions.
[2020-11-25 02:36:21,717 INFO  L631         BuchiCegarLoop]: Abstraction has 7729 states and 8918 transitions.
[2020-11-25 02:36:21,717 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:36:21,717 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7729 states and 8918 transitions.
[2020-11-25 02:36:21,725 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:21,725 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:21,725 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:21,727 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:21,727 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4423]  COND TRUE   DType[this] == ERC20
[L4424]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4424]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4425]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:21,732 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:21,733 INFO  L82        PathProgramCache]: Analyzing trace with hash -2059965574, now seen corresponding path program 1 times
[2020-11-25 02:36:21,734 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:21,749 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:21,914 INFO  L134       CoverageAnalysis]: Checked inductivity of 1023 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 02:36:21,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:21,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:36:21,915 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:21,915 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:36:21,915 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:36:21,916 INFO  L87              Difference]: Start difference. First operand 7729 states and 8918 transitions. cyclomatic complexity: 1193 Second operand 9 states.
[2020-11-25 02:36:22,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:22,062 INFO  L93              Difference]: Finished difference Result 7759 states and 8953 transitions.
[2020-11-25 02:36:22,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:36:22,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7759 states and 8953 transitions.
[2020-11-25 02:36:22,075 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,088 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7759 states to 7705 states and 8889 transitions.
[2020-11-25 02:36:22,088 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 02:36:22,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 02:36:22,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7705 states and 8889 transitions.
[2020-11-25 02:36:22,092 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:22,092 INFO  L728         BuchiCegarLoop]: Abstraction has 7705 states and 8889 transitions.
[2020-11-25 02:36:22,098 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7705 states and 8889 transitions.
[2020-11-25 02:36:22,130 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7705 to 7705.
[2020-11-25 02:36:22,130 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7705 states.
[2020-11-25 02:36:22,138 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7705 states to 7705 states and 8889 transitions.
[2020-11-25 02:36:22,138 INFO  L751         BuchiCegarLoop]: Abstraction has 7705 states and 8889 transitions.
[2020-11-25 02:36:22,138 INFO  L631         BuchiCegarLoop]: Abstraction has 7705 states and 8889 transitions.
[2020-11-25 02:36:22,138 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:36:22,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7705 states and 8889 transitions.
[2020-11-25 02:36:22,146 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,146 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:22,146 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:22,147 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:22,147 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND FALSE  !(DType[this] == OMToken)
[L5414]  COND TRUE   DType[this] == ERC20Pausable
[L5415]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4418]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4423]  COND TRUE   DType[this] == ERC20
[L4424]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4424]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4425]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5415]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5416]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:22,151 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:22,151 INFO  L82        PathProgramCache]: Analyzing trace with hash 1037346384, now seen corresponding path program 1 times
[2020-11-25 02:36:22,152 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:22,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:22,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 1035 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1035 trivial. 0 not checked.
[2020-11-25 02:36:22,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:22,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:36:22,346 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:22,346 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:36:22,346 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:36:22,347 INFO  L87              Difference]: Start difference. First operand 7705 states and 8889 transitions. cyclomatic complexity: 1188 Second operand 6 states.
[2020-11-25 02:36:22,438 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:22,438 INFO  L93              Difference]: Finished difference Result 7745 states and 8927 transitions.
[2020-11-25 02:36:22,438 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:36:22,438 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7745 states and 8927 transitions.
[2020-11-25 02:36:22,451 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,463 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7745 states to 7685 states and 8861 transitions.
[2020-11-25 02:36:22,463 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1768
[2020-11-25 02:36:22,464 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1768
[2020-11-25 02:36:22,464 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7685 states and 8861 transitions.
[2020-11-25 02:36:22,467 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:22,467 INFO  L728         BuchiCegarLoop]: Abstraction has 7685 states and 8861 transitions.
[2020-11-25 02:36:22,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7685 states and 8861 transitions.
[2020-11-25 02:36:22,502 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7685 to 7685.
[2020-11-25 02:36:22,502 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7685 states.
[2020-11-25 02:36:22,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7685 states to 7685 states and 8861 transitions.
[2020-11-25 02:36:22,510 INFO  L751         BuchiCegarLoop]: Abstraction has 7685 states and 8861 transitions.
[2020-11-25 02:36:22,510 INFO  L631         BuchiCegarLoop]: Abstraction has 7685 states and 8861 transitions.
[2020-11-25 02:36:22,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:36:22,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7685 states and 8861 transitions.
[2020-11-25 02:36:22,518 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:22,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:22,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:22,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:22,523 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:22,523 INFO  L82        PathProgramCache]: Analyzing trace with hash -2042800379, now seen corresponding path program 1 times
[2020-11-25 02:36:22,524 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:22,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:22,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1025 trivial. 0 not checked.
[2020-11-25 02:36:22,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:22,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:36:22,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:22,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:36:22,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:36:22,700 INFO  L87              Difference]: Start difference. First operand 7685 states and 8861 transitions. cyclomatic complexity: 1180 Second operand 8 states.
[2020-11-25 02:36:22,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:22,820 INFO  L93              Difference]: Finished difference Result 7706 states and 8884 transitions.
[2020-11-25 02:36:22,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:36:22,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7706 states and 8884 transitions.
[2020-11-25 02:36:22,832 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7706 states to 7674 states and 8848 transitions.
[2020-11-25 02:36:22,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1768
[2020-11-25 02:36:22,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1768
[2020-11-25 02:36:22,846 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7674 states and 8848 transitions.
[2020-11-25 02:36:22,849 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:22,849 INFO  L728         BuchiCegarLoop]: Abstraction has 7674 states and 8848 transitions.
[2020-11-25 02:36:22,853 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7674 states and 8848 transitions.
[2020-11-25 02:36:22,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7674 to 7674.
[2020-11-25 02:36:22,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7674 states.
[2020-11-25 02:36:22,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7674 states to 7674 states and 8848 transitions.
[2020-11-25 02:36:22,891 INFO  L751         BuchiCegarLoop]: Abstraction has 7674 states and 8848 transitions.
[2020-11-25 02:36:22,891 INFO  L631         BuchiCegarLoop]: Abstraction has 7674 states and 8848 transitions.
[2020-11-25 02:36:22,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:36:22,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7674 states and 8848 transitions.
[2020-11-25 02:36:22,898 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:22,898 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:22,898 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:22,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:22,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND FALSE  !(DType[this] == OMToken)
[L4408]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4413]  COND TRUE   DType[this] == ERC20Mintable
[L4414]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4414]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4415]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:22,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:22,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 1092224872, now seen corresponding path program 1 times
[2020-11-25 02:36:22,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:22,921 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:23,154 INFO  L134       CoverageAnalysis]: Checked inductivity of 1035 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1035 trivial. 0 not checked.
[2020-11-25 02:36:23,154 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:23,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:36:23,155 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:23,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:36:23,155 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:36:23,155 INFO  L87              Difference]: Start difference. First operand 7674 states and 8848 transitions. cyclomatic complexity: 1178 Second operand 7 states.
[2020-11-25 02:36:23,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:23,270 INFO  L93              Difference]: Finished difference Result 7738 states and 8910 transitions.
[2020-11-25 02:36:23,270 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:36:23,270 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7738 states and 8910 transitions.
[2020-11-25 02:36:23,283 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:23,295 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7738 states to 7594 states and 8736 transitions.
[2020-11-25 02:36:23,295 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1752
[2020-11-25 02:36:23,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1752
[2020-11-25 02:36:23,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7594 states and 8736 transitions.
[2020-11-25 02:36:23,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:23,300 INFO  L728         BuchiCegarLoop]: Abstraction has 7594 states and 8736 transitions.
[2020-11-25 02:36:23,304 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7594 states and 8736 transitions.
[2020-11-25 02:36:23,333 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7594 to 7594.
[2020-11-25 02:36:23,333 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7594 states.
[2020-11-25 02:36:23,341 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7594 states to 7594 states and 8736 transitions.
[2020-11-25 02:36:23,341 INFO  L751         BuchiCegarLoop]: Abstraction has 7594 states and 8736 transitions.
[2020-11-25 02:36:23,341 INFO  L631         BuchiCegarLoop]: Abstraction has 7594 states and 8736 transitions.
[2020-11-25 02:36:23,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:36:23,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7594 states and 8736 transitions.
[2020-11-25 02:36:23,348 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:23,348 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:23,348 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:23,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:23,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:23,353 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:23,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 825147857, now seen corresponding path program 1 times
[2020-11-25 02:36:23,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:23,376 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:23,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 1035 backedges. 24 proven. 4 refuted. 0 times theorem prover too weak. 1007 trivial. 0 not checked.
[2020-11-25 02:36:23,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:23,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 02:36:23,654 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:23,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 02:36:23,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 02:36:23,654 INFO  L87              Difference]: Start difference. First operand 7594 states and 8736 transitions. cyclomatic complexity: 1146 Second operand 16 states.
[2020-11-25 02:36:27,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:27,995 INFO  L93              Difference]: Finished difference Result 7693 states and 8862 transitions.
[2020-11-25 02:36:27,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:36:27,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7693 states and 8862 transitions.
[2020-11-25 02:36:28,010 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:28,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7693 states to 7693 states and 8862 transitions.
[2020-11-25 02:36:28,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 02:36:28,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 02:36:28,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7693 states and 8862 transitions.
[2020-11-25 02:36:28,028 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:28,028 INFO  L728         BuchiCegarLoop]: Abstraction has 7693 states and 8862 transitions.
[2020-11-25 02:36:28,032 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7693 states and 8862 transitions.
[2020-11-25 02:36:28,064 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7693 to 7650.
[2020-11-25 02:36:28,064 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7650 states.
[2020-11-25 02:36:28,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7650 states to 7650 states and 8814 transitions.
[2020-11-25 02:36:28,072 INFO  L751         BuchiCegarLoop]: Abstraction has 7650 states and 8814 transitions.
[2020-11-25 02:36:28,072 INFO  L631         BuchiCegarLoop]: Abstraction has 7650 states and 8814 transitions.
[2020-11-25 02:36:28,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:36:28,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7650 states and 8814 transitions.
[2020-11-25 02:36:28,080 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:28,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:28,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:28,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:28,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND TRUE   choice == 22
[L9764]              gas := gas - 21000;
[L9765]  COND TRUE   gas >= 0
[L9766]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9767]              assume msgvalue_MSG == 0;
[L9768]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1641]              havoc __exception;
[L1642]              revert := false;
[L1643]  COND FALSE  !(__exception)
[L1670]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5455]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5455]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5456]  COND FALSE  !(revert)
[L5459]  COND FALSE  !(DType[this] == OMToken)
[L5464]  COND TRUE   DType[this] == ERC20Pausable
[L5465]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4338]              __var_1 := null;
[L4339]  COND FALSE  !(!(spender_s302 != null))
[L4343]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4344]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4345]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4346]              assert { :EventEmitted "Approval_ERC20" } true;
[L4347]              __ret_0_ := true;
[L5465]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5466]  COND FALSE  !(revert)
[L5472]              __ret_0_ := __var_29;
[L1670]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1671]              assume !revert && gas >= 0;
[L9768]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:28,086 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:28,087 INFO  L82        PathProgramCache]: Analyzing trace with hash -942769673, now seen corresponding path program 1 times
[2020-11-25 02:36:28,087 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:28,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:28,318 INFO  L134       CoverageAnalysis]: Checked inductivity of 1106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1105 trivial. 0 not checked.
[2020-11-25 02:36:28,318 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:28,318 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:36:28,319 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:28,319 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:36:28,319 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:36:28,319 INFO  L87              Difference]: Start difference. First operand 7650 states and 8814 transitions. cyclomatic complexity: 1170 Second operand 6 states.
[2020-11-25 02:36:28,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:28,497 INFO  L93              Difference]: Finished difference Result 7690 states and 8850 transitions.
[2020-11-25 02:36:28,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:36:28,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7690 states and 8850 transitions.
[2020-11-25 02:36:28,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:28,524 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7690 states to 7630 states and 8786 transitions.
[2020-11-25 02:36:28,524 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1756
[2020-11-25 02:36:28,525 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1756
[2020-11-25 02:36:28,525 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7630 states and 8786 transitions.
[2020-11-25 02:36:28,529 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:28,529 INFO  L728         BuchiCegarLoop]: Abstraction has 7630 states and 8786 transitions.
[2020-11-25 02:36:28,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7630 states and 8786 transitions.
[2020-11-25 02:36:28,563 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7630 to 7630.
[2020-11-25 02:36:28,563 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7630 states.
[2020-11-25 02:36:28,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7630 states to 7630 states and 8786 transitions.
[2020-11-25 02:36:28,571 INFO  L751         BuchiCegarLoop]: Abstraction has 7630 states and 8786 transitions.
[2020-11-25 02:36:28,571 INFO  L631         BuchiCegarLoop]: Abstraction has 7630 states and 8786 transitions.
[2020-11-25 02:36:28,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 02:36:28,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7630 states and 8786 transitions.
[2020-11-25 02:36:28,579 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:28,579 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:28,579 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:28,580 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:28,580 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND TRUE   choice == 22
[L9764]              gas := gas - 21000;
[L9765]  COND TRUE   gas >= 0
[L9766]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9767]              assume msgvalue_MSG == 0;
[L9768]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1641]              havoc __exception;
[L1642]              revert := false;
[L1643]  COND FALSE  !(__exception)
[L1670]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5455]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5455]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5456]  COND FALSE  !(revert)
[L5459]  COND TRUE   DType[this] == OMToken
[L5460]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4338]              __var_1 := null;
[L4339]  COND FALSE  !(!(spender_s302 != null))
[L4343]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4344]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4345]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4346]              assert { :EventEmitted "Approval_ERC20" } true;
[L4347]              __ret_0_ := true;
[L5460]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5461]  COND FALSE  !(revert)
[L5472]              __ret_0_ := __var_29;
[L1670]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1671]              assume !revert && gas >= 0;
[L9768]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:28,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:28,585 INFO  L82        PathProgramCache]: Analyzing trace with hash 384765031, now seen corresponding path program 1 times
[2020-11-25 02:36:28,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:28,607 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:28,965 INFO  L134       CoverageAnalysis]: Checked inductivity of 1106 backedges. 30 proven. 4 refuted. 0 times theorem prover too weak. 1072 trivial. 0 not checked.
[2020-11-25 02:36:28,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:36:28,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 02:36:28,966 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:28,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 02:36:28,966 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=374, Unknown=0, NotChecked=0, Total=420
[2020-11-25 02:36:28,967 INFO  L87              Difference]: Start difference. First operand 7630 states and 8786 transitions. cyclomatic complexity: 1162 Second operand 21 states.
[2020-11-25 02:36:35,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:35,671 INFO  L93              Difference]: Finished difference Result 7695 states and 8903 transitions.
[2020-11-25 02:36:35,671 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 02:36:35,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7695 states and 8903 transitions.
[2020-11-25 02:36:35,720 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:35,735 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7695 states to 7695 states and 8903 transitions.
[2020-11-25 02:36:35,735 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1764
[2020-11-25 02:36:35,736 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1764
[2020-11-25 02:36:35,736 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7695 states and 8903 transitions.
[2020-11-25 02:36:35,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:35,740 INFO  L728         BuchiCegarLoop]: Abstraction has 7695 states and 8903 transitions.
[2020-11-25 02:36:35,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7695 states and 8903 transitions.
[2020-11-25 02:36:35,778 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7695 to 7650.
[2020-11-25 02:36:35,778 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7650 states.
[2020-11-25 02:36:35,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7650 states to 7650 states and 8852 transitions.
[2020-11-25 02:36:35,787 INFO  L751         BuchiCegarLoop]: Abstraction has 7650 states and 8852 transitions.
[2020-11-25 02:36:35,787 INFO  L631         BuchiCegarLoop]: Abstraction has 7650 states and 8852 transitions.
[2020-11-25 02:36:35,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 02:36:35,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7650 states and 8852 transitions.
[2020-11-25 02:36:35,794 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:35,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:35,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:35,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:35,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND FALSE  !(choice == 10)
[L9845]  COND FALSE  !(choice == 9)
[L9851]  COND FALSE  !(choice == 8)
[L9857]  COND FALSE  !(choice == 7)
[L9863]  COND FALSE  !(choice == 6)
[L9869]  COND FALSE  !(choice == 5)
[L9875]  COND FALSE  !(choice == 4)
[L9881]  COND FALSE  !(choice == 3)
[L9888]  COND FALSE  !(choice == 2)
[L9895]  COND TRUE   choice == 1
[L9896]              gas := gas - 21000;
[L9897]  COND TRUE   gas >= 0
[L9898]              assume value_s1198 >= 0 && value_s1198 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9899]              assume msgvalue_MSG == 0;
[L9900]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2636]              havoc __exception;
[L2637]              revert := false;
[L2638]  COND FALSE  !(__exception)
[L2665]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6103]  COND FALSE  !(DType[this] == OMToken)
[L6108]  COND TRUE   DType[this] == ERC20Burnable
[L6109]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L4712]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4712]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4713]  COND FALSE  !(revert)
[L4716]              sum__allowed1[account_s621] := sum__allowed1[account_s621] - _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4717]              _allowed_ERC20[this][account_s621][msgsender_MSG] := __var_16;
[L4718]              sum__allowed1[account_s621] := sum__allowed1[account_s621] + _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4719]  COND FALSE  !(DType[this] == OMToken)
[L4724]  COND TRUE   DType[this] == ERC20Burnable
[L4725]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4649]              __var_13 := null;
[L4650]  COND FALSE  !(!(account_s579 != null))
[L4654]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4654]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4655]  COND FALSE  !(revert)
[L4658]              _totalSupply_ERC20[this] := __var_14;
[L4659]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4659]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4660]  COND FALSE  !(revert)
[L4663]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s579];
[L4664]              _balances_ERC20[this][account_s579] := __var_15;
[L4665]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s579];
[L4666]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4725]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4726]  COND FALSE  !(revert)
[L4747]              assert { :EventEmitted "Approval_ERC20" } true;
[L6109]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6110]  COND FALSE  !(revert)
[L2665]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2666]              assume !revert && gas >= 0;
[L9900]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:35,818 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:35,818 INFO  L82        PathProgramCache]: Analyzing trace with hash -2109702646, now seen corresponding path program 1 times
[2020-11-25 02:36:35,818 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:35,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:36,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 1122 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1121 trivial. 0 not checked.
[2020-11-25 02:36:36,046 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:36,046 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:36:36,047 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:36,047 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:36:36,047 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:36:36,047 INFO  L87              Difference]: Start difference. First operand 7650 states and 8852 transitions. cyclomatic complexity: 1212 Second operand 6 states.
[2020-11-25 02:36:36,132 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:36,132 INFO  L93              Difference]: Finished difference Result 7686 states and 8884 transitions.
[2020-11-25 02:36:36,132 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:36:36,132 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7686 states and 8884 transitions.
[2020-11-25 02:36:36,145 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:36,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7686 states to 7630 states and 8824 transitions.
[2020-11-25 02:36:36,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1752
[2020-11-25 02:36:36,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1752
[2020-11-25 02:36:36,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7630 states and 8824 transitions.
[2020-11-25 02:36:36,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:36,163 INFO  L728         BuchiCegarLoop]: Abstraction has 7630 states and 8824 transitions.
[2020-11-25 02:36:36,167 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7630 states and 8824 transitions.
[2020-11-25 02:36:36,200 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7630 to 7630.
[2020-11-25 02:36:36,200 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7630 states.
[2020-11-25 02:36:36,208 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7630 states to 7630 states and 8824 transitions.
[2020-11-25 02:36:36,208 INFO  L751         BuchiCegarLoop]: Abstraction has 7630 states and 8824 transitions.
[2020-11-25 02:36:36,208 INFO  L631         BuchiCegarLoop]: Abstraction has 7630 states and 8824 transitions.
[2020-11-25 02:36:36,208 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 02:36:36,208 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7630 states and 8824 transitions.
[2020-11-25 02:36:36,215 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:36,216 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:36,216 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:36,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:36,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND FALSE  !(choice == 10)
[L9845]  COND FALSE  !(choice == 9)
[L9851]  COND FALSE  !(choice == 8)
[L9857]  COND FALSE  !(choice == 7)
[L9863]  COND FALSE  !(choice == 6)
[L9869]  COND FALSE  !(choice == 5)
[L9875]  COND FALSE  !(choice == 4)
[L9881]  COND FALSE  !(choice == 3)
[L9888]  COND FALSE  !(choice == 2)
[L9895]  COND TRUE   choice == 1
[L9896]              gas := gas - 21000;
[L9897]  COND TRUE   gas >= 0
[L9898]              assume value_s1198 >= 0 && value_s1198 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9899]              assume msgvalue_MSG == 0;
[L9900]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2636]              havoc __exception;
[L2637]              revert := false;
[L2638]  COND FALSE  !(__exception)
[L2665]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6103]  COND TRUE   DType[this] == OMToken
[L6104]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L4712]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4712]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4713]  COND FALSE  !(revert)
[L4716]              sum__allowed1[account_s621] := sum__allowed1[account_s621] - _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4717]              _allowed_ERC20[this][account_s621][msgsender_MSG] := __var_16;
[L4718]              sum__allowed1[account_s621] := sum__allowed1[account_s621] + _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4719]  COND FALSE  !(DType[this] == OMToken)
[L4724]  COND FALSE  !(DType[this] == ERC20Burnable)
[L4729]  COND TRUE   DType[this] == ERC20Mintable
[L4730]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4649]              __var_13 := null;
[L4650]  COND FALSE  !(!(account_s579 != null))
[L4654]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4654]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4655]  COND FALSE  !(revert)
[L4658]              _totalSupply_ERC20[this] := __var_14;
[L4659]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4659]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4660]  COND FALSE  !(revert)
[L4663]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s579];
[L4664]              _balances_ERC20[this][account_s579] := __var_15;
[L4665]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s579];
[L4666]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4730]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4731]  COND FALSE  !(revert)
[L4747]              assert { :EventEmitted "Approval_ERC20" } true;
[L6104]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6105]  COND FALSE  !(revert)
[L2665]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2666]              assume !revert && gas >= 0;
[L9900]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:36,221 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:36,221 INFO  L82        PathProgramCache]: Analyzing trace with hash 1140034348, now seen corresponding path program 1 times
[2020-11-25 02:36:36,222 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:36,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:36,453 INFO  L134       CoverageAnalysis]: Checked inductivity of 1122 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1121 trivial. 0 not checked.
[2020-11-25 02:36:36,453 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:36,454 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:36:36,454 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:36,454 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:36:36,454 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:36:36,454 INFO  L87              Difference]: Start difference. First operand 7630 states and 8824 transitions. cyclomatic complexity: 1204 Second operand 7 states.
[2020-11-25 02:36:36,555 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:36,555 INFO  L93              Difference]: Finished difference Result 7686 states and 8876 transitions.
[2020-11-25 02:36:36,555 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:36:36,555 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7686 states and 8876 transitions.
[2020-11-25 02:36:36,568 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:36,582 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7686 states to 7614 states and 8800 transitions.
[2020-11-25 02:36:36,582 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1748
[2020-11-25 02:36:36,582 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1748
[2020-11-25 02:36:36,582 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7614 states and 8800 transitions.
[2020-11-25 02:36:36,586 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:36,586 INFO  L728         BuchiCegarLoop]: Abstraction has 7614 states and 8800 transitions.
[2020-11-25 02:36:36,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7614 states and 8800 transitions.
[2020-11-25 02:36:36,623 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7614 to 7614.
[2020-11-25 02:36:36,623 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7614 states.
[2020-11-25 02:36:36,632 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7614 states to 7614 states and 8800 transitions.
[2020-11-25 02:36:36,632 INFO  L751         BuchiCegarLoop]: Abstraction has 7614 states and 8800 transitions.
[2020-11-25 02:36:36,632 INFO  L631         BuchiCegarLoop]: Abstraction has 7614 states and 8800 transitions.
[2020-11-25 02:36:36,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 02:36:36,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7614 states and 8800 transitions.
[2020-11-25 02:36:36,639 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:36:36,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:36:36,639 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:36:36,640 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:36:36,640 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND FALSE  !(choice == 18)
[L9795]  COND FALSE  !(choice == 17)
[L9802]  COND FALSE  !(choice == 16)
[L9809]  COND FALSE  !(choice == 15)
[L9815]  COND FALSE  !(choice == 14)
[L9821]  COND FALSE  !(choice == 13)
[L9827]  COND FALSE  !(choice == 12)
[L9833]  COND FALSE  !(choice == 11)
[L9839]  COND FALSE  !(choice == 10)
[L9845]  COND FALSE  !(choice == 9)
[L9851]  COND FALSE  !(choice == 8)
[L9857]  COND FALSE  !(choice == 7)
[L9863]  COND FALSE  !(choice == 6)
[L9869]  COND FALSE  !(choice == 5)
[L9875]  COND FALSE  !(choice == 4)
[L9881]  COND FALSE  !(choice == 3)
[L9888]  COND FALSE  !(choice == 2)
[L9895]  COND TRUE   choice == 1
[L9896]              gas := gas - 21000;
[L9897]  COND TRUE   gas >= 0
[L9898]              assume value_s1198 >= 0 && value_s1198 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9899]              assume msgvalue_MSG == 0;
[L9900]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2636]              havoc __exception;
[L2637]              revert := false;
[L2638]  COND FALSE  !(__exception)
[L2665]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6103]  COND TRUE   DType[this] == OMToken
[L6104]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L4712]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4712]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s621][msgsender_MSG], value_s621);
[L4713]  COND FALSE  !(revert)
[L4716]              sum__allowed1[account_s621] := sum__allowed1[account_s621] - _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4717]              _allowed_ERC20[this][account_s621][msgsender_MSG] := __var_16;
[L4718]              sum__allowed1[account_s621] := sum__allowed1[account_s621] + _allowed_ERC20[this][account_s621][msgsender_MSG];
[L4719]  COND TRUE   DType[this] == OMToken
[L4720]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4649]              __var_13 := null;
[L4650]  COND FALSE  !(!(account_s579 != null))
[L4654]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4654]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s579);
[L4655]  COND FALSE  !(revert)
[L4658]              _totalSupply_ERC20[this] := __var_14;
[L4659]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4659]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s579], value_s579);
[L4660]  COND FALSE  !(revert)
[L4663]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s579];
[L4664]              _balances_ERC20[this][account_s579] := __var_15;
[L4665]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s579];
[L4666]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4720]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s621, value_s621);
[L4721]  COND FALSE  !(revert)
[L4747]              assert { :EventEmitted "Approval_ERC20" } true;
[L6104]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L6105]  COND FALSE  !(revert)
[L2665]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L2666]              assume !revert && gas >= 0;
[L9900]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s1198, value_s1198);
[L9923]  RET         call CorralChoice_OMToken(this);
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND TRUE   choice == 21
[L9771]              gas := gas - 21000;
[L9772]  COND TRUE   gas >= 0
[L9773]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]              assume msgvalue_MSG == 0;
[L9775]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s937 == to_s937 && (value_s937 > _balances_ERC20[this][from_s937] || value_s937 > _allowed_ERC20[this][from_s937][msgsender_MSG])) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1577]              havoc __exception;
[L1578]              revert := false;
[L1579]  COND FALSE  !(__exception)
[L1606]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5405]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5405]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5406]  COND FALSE  !(revert)
[L5409]  COND TRUE   DType[this] == OMToken
[L5410]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4396]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4396]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4397]  COND FALSE  !(revert)
[L4400]              sum__allowed1[from_s351] := sum__allowed1[from_s351] - _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4401]              _allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4402]              sum__allowed1[from_s351] := sum__allowed1[from_s351] + _allowed_ERC20[this][from_s351][msgsender_MSG];
[L4403]  COND TRUE   DType[this] == OMToken
[L4404]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4404]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4405]  COND FALSE  !(revert)
[L4431]              assert { :EventEmitted "Approval_ERC20" } true;
[L4432]              __ret_0_ := true;
[L5410]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5411]  COND FALSE  !(revert)
[L5422]              __ret_0_ := __var_27;
[L1606]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1607]              assume !revert && gas >= 0;
[L9775]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:36:36,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:36:36,645 INFO  L82        PathProgramCache]: Analyzing trace with hash -1320187267, now seen corresponding path program 1 times
[2020-11-25 02:36:36,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:36:36,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:36:36,945 INFO  L134       CoverageAnalysis]: Checked inductivity of 1122 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1122 trivial. 0 not checked.
[2020-11-25 02:36:36,945 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:36:36,945 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 02:36:36,946 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:36:36,946 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:36:36,946 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=104, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:36:36,946 INFO  L87              Difference]: Start difference. First operand 7614 states and 8800 transitions. cyclomatic complexity: 1196 Second operand 12 states.
[2020-11-25 02:36:38,616 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:36:38,616 INFO  L93              Difference]: Finished difference Result 4164 states and 4808 transitions.
[2020-11-25 02:36:38,616 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 02:36:38,616 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4164 states and 4808 transitions.
[2020-11-25 02:36:38,624 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:36:38,624 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4164 states to 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 02:36:38,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 02:36:38,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:36:38,624 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 02:36:38,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 02:36:38,624 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:36:38,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 02:36:38,627 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:36:38 BasicIcfg
[2020-11-25 02:36:38,628 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:36:38,628 INFO  L168              Benchmark]: Toolchain (without parser) took 32878.78 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.9 GB). Free memory was 924.5 MB in the beginning and 1.3 GB in the end (delta: -344.3 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,629 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,629 INFO  L168              Benchmark]: Boogie Preprocessor took 155.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,629 INFO  L168              Benchmark]: UtopiaSpecLang took 79.87 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,629 INFO  L168              Benchmark]: Boogie Printer took 27.87 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.7 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,629 INFO  L168              Benchmark]: RCFGBuilder took 1433.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 886.7 MB in the beginning and 814.4 MB in the end (delta: 72.3 MB). Peak memory consumption was 175.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,630 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.97 ms. Allocated memory is still 1.1 GB. Free memory was 814.4 MB in the beginning and 810.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,630 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3012.89 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 469.2 MB). Free memory was 810.9 MB in the beginning and 1.2 GB in the end (delta: -391.8 MB). Peak memory consumption was 386.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,630 INFO  L168              Benchmark]: BlockEncodingV2 took 224.01 ms. Allocated memory is still 1.6 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 135.1 MB). Peak memory consumption was 135.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,631 INFO  L168              Benchmark]: BuchiAutomizer took 27900.98 ms. Allocated memory was 1.6 GB in the beginning and 3.9 GB in the end (delta: 2.4 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -216.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:36:38,633 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9260 locations, 17149 edges
  - StatisticsResult: Encoded RCFG
    9079 locations, 16672 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 155.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 79.87 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 27.87 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.7 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1433.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 886.7 MB in the beginning and 814.4 MB in the end (delta: 72.3 MB). Peak memory consumption was 175.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.97 ms. Allocated memory is still 1.1 GB. Free memory was 814.4 MB in the beginning and 810.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3012.89 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 469.2 MB). Free memory was 810.9 MB in the beginning and 1.2 GB in the end (delta: -391.8 MB). Peak memory consumption was 386.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 224.01 ms. Allocated memory is still 1.6 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 135.1 MB). Peak memory consumption was 135.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 27900.98 ms. Allocated memory was 1.6 GB in the beginning and 3.9 GB in the end (delta: 2.4 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -216.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3602 locations, 5214 edges
  - StatisticsResult: BuchiProgram size
    9260 locations, 17149 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 25 terminating modules (25 trivial, 0 deterministic, 0 nondeterministic). 25 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 27.8s and 26 iterations.  TraceHistogramMax:9. Analysis of lassos took 5.4s. Construction of modules took 14.3s. BÃ¼chi inclusion checks took 5.5s. Highest rank in rank-based complementation 0. Minimization of det autom 25. Minimization of nondet autom 0. Automata minimization 1.2s AutomataMinimizationTime, 24 MinimizatonAttempts, 2167 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 7738 states and ocurred in iteration 12.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 137978 SDtfs, 51625 SDslu, 604208 SDs, 0 SdLazy, 197765 SolverSat, 7121 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 14.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU25 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Pausable0) ==> ( <>(fail_transferFrom_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
