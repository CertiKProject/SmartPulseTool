This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:24:57,330 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:24:57,331 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:24:57,339 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:24:57,339 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:24:57,340 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:24:57,340 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:24:57,341 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:24:57,342 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:24:57,343 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:24:57,343 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:24:57,343 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:24:57,344 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:24:57,344 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:24:57,345 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:24:57,345 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:24:57,346 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:24:57,346 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:24:57,348 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:24:57,348 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:24:57,349 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:24:57,349 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:24:57,351 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:24:57,351 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:24:57,351 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:24:57,352 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:24:57,352 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:24:57,352 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:24:57,352 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:24:57,353 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:24:57,353 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:24:57,353 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:24:57,354 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:24:57,354 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:24:57,354 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:24:57,355 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:24:57,355 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:24:57,355 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:24:57,355 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:24:57,356 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:24:57,356 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:24:57,356 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:24:57,364 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:24:57,364 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:24:57,365 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:24:57,365 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:24:57,365 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:24:57,366 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:24:57,366 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:24:57,366 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:24:57,366 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:24:57,367 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:24:57,368 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:24:57,368 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:24:57,368 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:24:57,386 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:24:57,401 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:24:57,405 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:24:57,406 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:24:57,406 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:24:57,407 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl
[2020-11-25 14:24:57,407 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl'
[2020-11-25 14:24:57,480 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:24:57,482 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:24:57,482 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:24:57,482 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:24:57,482 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:24:57,499 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,501 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,527 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,528 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,545 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,554 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,560 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,568 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:24:57,569 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:24:57,569 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:24:57,571 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:24:57,574 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/1) ...
[2020-11-25 14:24:57,592 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DUCATOProtocolToken.allowance(owner, spender), allowed_DUCATOProtocolToken[this][owner][spender] >= 0 && allowed_DUCATOProtocolToken[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.allowance(owner, spender), return == allowed_DUCATOProtocolToken[this][owner][spender] &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:24:57,597 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DUCATOProtocolToken.allowance(owner, spender), allowed_DUCATOProtocolToken[this][owner][spender] >= 0 && allowed_DUCATOProtocolToken[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.allowance(owner, spender), return == allowed_DUCATOProtocolToken[this][owner][spender] &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:24:57,604 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DUCATOProtocolToken.allowance(owner, spender), allowed_DUCATOProtocolToken[this][owner][spender] >= 0 && allowed_DUCATOProtocolToken[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.allowance(owner, spender), return == allowed_DUCATOProtocolToken[this][owner][spender] &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:24:57,610 INFO  L636   opiaSpecLangObserver]: Parsed ( allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532]>=0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[tokenOwner_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[spender_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[tokenOwner_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[spender_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:24:57,613 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( remaining_s532==allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] && _totalSupply_DUCATOProtocolToken[this]==( old(_totalSupply_DUCATOProtocolToken[this]) ) ) && balances_DUCATOProtocolToken[this]==( old(balances_DUCATOProtocolToken[this]) ) ) && allowed_DUCATOProtocolToken[this]==( old(allowed_DUCATOProtocolToken[this]) ) ) && symbol_DUCATOProtocolToken[this]==( old(symbol_DUCATOProtocolToken[this]) ) ) && name_DUCATOProtocolToken[this]==( old(name_DUCATOProtocolToken[this]) ) ) && decimals_DUCATOProtocolToken[this]==( old(decimals_DUCATOProtocolToken[this]) ) ) && _stopTrade_DUCATOProtocolToken[this]==( old(_stopTrade_DUCATOProtocolToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[remaining_s532,<IMPLEMENTATION_OUTPARAM,allowance~address~address_DUCATOProtocolToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[tokenOwner_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],[IdentifierExpression[spender_s532,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_DUCATOProtocolToken>]]]]]]
[2020-11-25 14:24:57,617 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DUCATOProtocolToken.allowance(owner, spender), allowed_DUCATOProtocolToken[this][owner][spender] >= 0 && allowed_DUCATOProtocolToken[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.allowance(owner, spender), return == allowed_DUCATOProtocolToken[this][owner][spender] &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:24:57,617 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_DUCATOProtocolToken0) ==> ( <>AP(success_allowance_DUCATOProtocolToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:24:57,624 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:24:57 PropertyContainer
[2020-11-25 14:24:57,624 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:24:57,625 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:24:57,625 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:24:57,625 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:24:57,626 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/2) ...
[2020-11-25 14:24:57,626 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:24:57,626 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:24:57,638 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:24:57" (2/2) ...
[2020-11-25 14:24:57,638 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:24:57,639 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:24:57,639 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:24:57,639 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:24:57,639 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/2) ...
[2020-11-25 14:24:57,692 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:24:57,693 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:24:57,693 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:24:57,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:24:57,693 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,693 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,694 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,694 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:24:57,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:24:57,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:24:57,695 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:24:57,695 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:24:57,695 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:24:57,695 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:24:57,695 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:24:57,696 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:24:57,696 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:24:57,696 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:24:57,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:24:57,696 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 14:24:57,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:24:57,697 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 14:24:57,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 14:24:57,697 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 14:24:57,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 14:24:57,697 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:24:57,697 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:24:57,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:24:57,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,699 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:24:57,700 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:24:57,701 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken
[2020-11-25 14:24:57,701 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:24:57,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:24:57,702 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:24:57,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:24:57,702 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:24:57,702 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:24:57,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:24:57,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,704 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 14:24:57,705 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,706 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,707 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:24:57,708 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:24:57,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:24:57,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 14:24:57,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:24:57,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:24:57,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:24:57,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:24:57,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:24:58,157 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:24:58,158 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:24:58,158 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:24:58,272 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:24:58,272 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 14:24:58,274 INFO  L202        PluginConnector]: Adding new model DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:24:58 BoogieIcfgContainer
[2020-11-25 14:24:58,274 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:24:57" (2/2) ...
[2020-11-25 14:24:58,274 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:24:58,274 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@f6450a8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:24:58, skipping insertion in model container
[2020-11-25 14:24:58,274 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:24:58,275 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:24:58,275 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:24:58,276 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:24:58,276 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/3) ...
[2020-11-25 14:24:58,277 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@27f46b04 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:24:58, skipping insertion in model container
[2020-11-25 14:24:58,277 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:24:57" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:24:58,316 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:24:58 NWAContainer
[2020-11-25 14:24:58,316 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:24:58,316 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:24:58,316 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:24:58,317 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:24:58,318 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:24:58" (3/4) ...
[2020-11-25 14:24:58,318 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@52145cf6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:24:58, skipping insertion in model container
[2020-11-25 14:24:58,319 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:24:58" (4/4) ...
[2020-11-25 14:24:58,321 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:24:58,325 INFO  L110   BuchiProductObserver]: Initial RCFG 1244 locations, 1546 edges
[2020-11-25 14:24:58,325 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:24:58,334 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:24:59,546 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:24:59,550 INFO  L110   BuchiProductObserver]: BuchiProgram size 2930 locations, 4980 edges
[2020-11-25 14:24:59,550 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:24:59 BoogieIcfgContainer
[2020-11-25 14:24:59,550 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:24:59,550 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:24:59,550 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:24:59,552 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:24:59,552 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:24:59" (1/1) ...
[2020-11-25 14:24:59,617 INFO  L313           BlockEncoder]: Initial Icfg 2930 locations, 4980 edges
[2020-11-25 14:24:59,618 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:24:59,618 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:24:59,618 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:24:59,619 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:24:59,629 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 13 locations because of local infeasibility
[2020-11-25 14:24:59,636 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 14:24:59,646 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:24:59,650 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:24:59,652 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:24:59,652 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:24:59,655 INFO  L313           BlockEncoder]: Encoded RCFG 2892 locations, 4886 edges
[2020-11-25 14:24:59,656 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:24:59 BasicIcfg
[2020-11-25 14:24:59,656 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:24:59,656 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:24:59,656 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:24:59,658 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:24:59,658 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,658 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:24:57" (1/6) ...
[2020-11-25 14:24:59,660 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e95703b and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:24:59, skipping insertion in model container
[2020-11-25 14:24:59,660 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,660 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:24:57" (2/6) ...
[2020-11-25 14:24:59,660 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e95703b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:24:59, skipping insertion in model container
[2020-11-25 14:24:59,660 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,660 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:24:58" (3/6) ...
[2020-11-25 14:24:59,660 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e95703b and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:24:59, skipping insertion in model container
[2020-11-25 14:24:59,660 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,660 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:24:58" (4/6) ...
[2020-11-25 14:24:59,660 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e95703b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:24:59, skipping insertion in model container
[2020-11-25 14:24:59,660 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,661 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:24:59" (5/6) ...
[2020-11-25 14:24:59,661 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e95703b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:24:59, skipping insertion in model container
[2020-11-25 14:24:59,661 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:24:59,661 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:24:59" (6/6) ...
[2020-11-25 14:24:59,662 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_allowance.bpl_BEv2
[2020-11-25 14:24:59,693 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:24:59,693 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:24:59,694 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:24:59,694 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:24:59,694 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:24:59,694 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:24:59,694 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:24:59,694 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:24:59,694 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:24:59,721 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2892 states.
[2020-11-25 14:24:59,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:24:59,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:59,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:59,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:59,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:59,778 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:24:59,778 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2892 states.
[2020-11-25 14:24:59,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:24:59,793 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:59,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:59,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:59,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND TRUE   revert
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND TRUE   revert
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:59,827 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:59,827 INFO  L82        PathProgramCache]: Analyzing trace with hash -1610433107, now seen corresponding path program 1 times
[2020-11-25 14:24:59,832 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:59,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:59,905 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:24:59,907 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:24:59,907 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:25:00,019 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:00,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:25:00,036 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:25:00,038 INFO  L87              Difference]: Start difference. First operand 2892 states. Second operand 4 states.
[2020-11-25 14:25:00,340 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:00,340 INFO  L93              Difference]: Finished difference Result 2002 states and 2231 transitions.
[2020-11-25 14:25:00,340 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:25:00,341 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2002 states and 2231 transitions.
[2020-11-25 14:25:00,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:00,365 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2002 states to 2002 states and 2231 transitions.
[2020-11-25 14:25:00,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:25:00,368 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 578
[2020-11-25 14:25:00,368 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2002 states and 2231 transitions.
[2020-11-25 14:25:00,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:00,374 INFO  L728         BuchiCegarLoop]: Abstraction has 2002 states and 2231 transitions.
[2020-11-25 14:25:00,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2002 states and 2231 transitions.
[2020-11-25 14:25:00,430 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2002 to 2002.
[2020-11-25 14:25:00,430 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2002 states.
[2020-11-25 14:25:00,434 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2002 states to 2002 states and 2231 transitions.
[2020-11-25 14:25:00,435 INFO  L751         BuchiCegarLoop]: Abstraction has 2002 states and 2231 transitions.
[2020-11-25 14:25:00,435 INFO  L631         BuchiCegarLoop]: Abstraction has 2002 states and 2231 transitions.
[2020-11-25 14:25:00,435 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:25:00,435 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2002 states and 2231 transitions.
[2020-11-25 14:25:00,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:00,441 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:00,441 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:00,443 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:00,443 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND TRUE   revert
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND FALSE  !(__exception)
[L861]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2154]  COND TRUE   !(_stopTrade_DUCATOProtocolToken[this] != true)
[L2155]              revert := true;
[L861]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L862]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((remaining_s532 == allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND FALSE  !(__exception)
[L861]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2154]  COND TRUE   !(_stopTrade_DUCATOProtocolToken[this] != true)
[L2155]              revert := true;
[L861]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L862]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((remaining_s532 == allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:00,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:00,446 INFO  L82        PathProgramCache]: Analyzing trace with hash 1403111271, now seen corresponding path program 1 times
[2020-11-25 14:25:00,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:00,456 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:00,482 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:00,482 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:00,482 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:25:00,483 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:00,483 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:25:00,484 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:25:00,484 INFO  L87              Difference]: Start difference. First operand 2002 states and 2231 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 14:25:00,821 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:00,821 INFO  L93              Difference]: Finished difference Result 2970 states and 3395 transitions.
[2020-11-25 14:25:00,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:25:00,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2970 states and 3395 transitions.
[2020-11-25 14:25:00,835 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:25:00,848 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2970 states to 2820 states and 3223 transitions.
[2020-11-25 14:25:00,848 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 775
[2020-11-25 14:25:00,849 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 785
[2020-11-25 14:25:00,849 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2820 states and 3223 transitions.
[2020-11-25 14:25:00,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:00,854 INFO  L728         BuchiCegarLoop]: Abstraction has 2820 states and 3223 transitions.
[2020-11-25 14:25:00,856 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2820 states and 3223 transitions.
[2020-11-25 14:25:00,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2820 to 2032.
[2020-11-25 14:25:00,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2032 states.
[2020-11-25 14:25:00,881 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2032 states to 2032 states and 2199 transitions.
[2020-11-25 14:25:00,881 INFO  L751         BuchiCegarLoop]: Abstraction has 2032 states and 2199 transitions.
[2020-11-25 14:25:00,881 INFO  L631         BuchiCegarLoop]: Abstraction has 2032 states and 2199 transitions.
[2020-11-25 14:25:00,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:25:00,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2032 states and 2199 transitions.
[2020-11-25 14:25:00,885 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:00,885 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:00,885 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:00,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:00,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND FALSE  !(__exception)
[L861]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2154]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2158]              remaining_s532 := allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532];
[L861]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L862]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((remaining_s532 == allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND FALSE  !(__exception)
[L861]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2154]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2158]              remaining_s532 := allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532];
[L861]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L862]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((remaining_s532 == allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:00,890 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:00,890 INFO  L82        PathProgramCache]: Analyzing trace with hash -65814512, now seen corresponding path program 1 times
[2020-11-25 14:25:00,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:00,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:00,939 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:00,939 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:00,939 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:25:00,940 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:00,940 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:25:00,940 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:25:00,940 INFO  L87              Difference]: Start difference. First operand 2032 states and 2199 transitions. cyclomatic complexity: 169 Second operand 4 states.
[2020-11-25 14:25:00,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:00,988 INFO  L93              Difference]: Finished difference Result 2033 states and 2198 transitions.
[2020-11-25 14:25:00,989 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:25:00,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2033 states and 2198 transitions.
[2020-11-25 14:25:00,995 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:01,001 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2033 states to 2022 states and 2187 transitions.
[2020-11-25 14:25:01,001 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 14:25:01,001 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 14:25:01,002 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2022 states and 2187 transitions.
[2020-11-25 14:25:01,003 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:01,003 INFO  L728         BuchiCegarLoop]: Abstraction has 2022 states and 2187 transitions.
[2020-11-25 14:25:01,005 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2022 states and 2187 transitions.
[2020-11-25 14:25:01,019 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2022 to 2020.
[2020-11-25 14:25:01,019 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2020 states.
[2020-11-25 14:25:01,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2020 states to 2020 states and 2185 transitions.
[2020-11-25 14:25:01,021 INFO  L751         BuchiCegarLoop]: Abstraction has 2020 states and 2185 transitions.
[2020-11-25 14:25:01,021 INFO  L631         BuchiCegarLoop]: Abstraction has 2020 states and 2185 transitions.
[2020-11-25 14:25:01,021 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:25:01,021 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2020 states and 2185 transitions.
[2020-11-25 14:25:01,025 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:01,025 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:01,025 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:01,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:01,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]              revert := true;
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]              revert := true;
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:01,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:01,030 INFO  L82        PathProgramCache]: Analyzing trace with hash -1247755818, now seen corresponding path program 1 times
[2020-11-25 14:25:01,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:01,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:01,089 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:01,089 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:01,089 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 14:25:01,089 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:01,089 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 14:25:01,090 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 14:25:01,090 INFO  L87              Difference]: Start difference. First operand 2020 states and 2185 transitions. cyclomatic complexity: 167 Second operand 11 states.
[2020-11-25 14:25:02,410 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:02,411 INFO  L93              Difference]: Finished difference Result 3395 states and 3754 transitions.
[2020-11-25 14:25:02,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 14:25:02,411 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3395 states and 3754 transitions.
[2020-11-25 14:25:02,420 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 14:25:02,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3395 states to 3395 states and 3754 transitions.
[2020-11-25 14:25:02,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 14:25:02,431 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 14:25:02,431 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3395 states and 3754 transitions.
[2020-11-25 14:25:02,434 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:02,434 INFO  L728         BuchiCegarLoop]: Abstraction has 3395 states and 3754 transitions.
[2020-11-25 14:25:02,436 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3395 states and 3754 transitions.
[2020-11-25 14:25:02,460 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3395 to 2458.
[2020-11-25 14:25:02,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2458 states.
[2020-11-25 14:25:02,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2458 states to 2458 states and 2707 transitions.
[2020-11-25 14:25:02,463 INFO  L751         BuchiCegarLoop]: Abstraction has 2458 states and 2707 transitions.
[2020-11-25 14:25:02,463 INFO  L631         BuchiCegarLoop]: Abstraction has 2458 states and 2707 transitions.
[2020-11-25 14:25:02,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:25:02,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2458 states and 2707 transitions.
[2020-11-25 14:25:02,466 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 14:25:02,466 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:02,466 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:02,468 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:02,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND FALSE  !(!(__tmp___stopTrade_DUCATOProtocolToken[this] != true))
[L2148]              remaining_s532 := __tmp__allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532];
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND FALSE  !(!(__tmp___stopTrade_DUCATOProtocolToken[this] != true))
[L2148]              remaining_s532 := __tmp__allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532];
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:02,470 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:02,471 INFO  L82        PathProgramCache]: Analyzing trace with hash -1429907779, now seen corresponding path program 1 times
[2020-11-25 14:25:02,471 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:02,486 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:02,516 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:02,516 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:02,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:25:02,517 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:02,517 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:25:02,517 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:25:02,517 INFO  L87              Difference]: Start difference. First operand 2458 states and 2707 transitions. cyclomatic complexity: 253 Second operand 6 states.
[2020-11-25 14:25:02,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:02,848 INFO  L93              Difference]: Finished difference Result 3058 states and 3417 transitions.
[2020-11-25 14:25:02,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 14:25:02,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3058 states and 3417 transitions.
[2020-11-25 14:25:02,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 14:25:02,864 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3058 states to 2567 states and 2919 transitions.
[2020-11-25 14:25:02,864 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 736
[2020-11-25 14:25:02,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 736
[2020-11-25 14:25:02,865 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2567 states and 2919 transitions.
[2020-11-25 14:25:02,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:02,867 INFO  L728         BuchiCegarLoop]: Abstraction has 2567 states and 2919 transitions.
[2020-11-25 14:25:02,869 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2567 states and 2919 transitions.
[2020-11-25 14:25:02,881 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2567 to 1618.
[2020-11-25 14:25:02,882 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1618 states.
[2020-11-25 14:25:02,883 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1618 states to 1618 states and 1754 transitions.
[2020-11-25 14:25:02,883 INFO  L751         BuchiCegarLoop]: Abstraction has 1618 states and 1754 transitions.
[2020-11-25 14:25:02,883 INFO  L631         BuchiCegarLoop]: Abstraction has 1618 states and 1754 transitions.
[2020-11-25 14:25:02,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:25:02,883 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1618 states and 1754 transitions.
[2020-11-25 14:25:02,885 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:02,885 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:02,885 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:02,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:02,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_DUCATOProtocolToken0 := false;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND TRUE   choice == 4
[L3420]              gas := gas - 21000;
[L3421]  COND TRUE   gas >= 0
[L3422]              assume msgvalue_MSG == 0;
[L3423]  CALL        call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L503]               havoc __exception;
[L504]               revert := false;
[L505]   COND FALSE  !(__exception)
[L528]   CALL        call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1904]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L1908]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1912]              _stopTrade_DUCATOProtocolToken[this] := true;
[L528]   RET         call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L529]               assume !revert && gas >= 0;
[L3423]  RET         call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]              revert := true;
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_DUCATOProtocolToken0 := true;
[L2]                 call_allowance_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]              revert := true;
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:02,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:02,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 1735057745, now seen corresponding path program 1 times
[2020-11-25 14:25:02,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:02,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:02,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:02,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:02,995 INFO  L82        PathProgramCache]: Analyzing trace with hash 769128094, now seen corresponding path program 1 times
[2020-11-25 14:25:02,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:03,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:03,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:03,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:03,015 INFO  L82        PathProgramCache]: Analyzing trace with hash -496538802, now seen corresponding path program 1 times
[2020-11-25 14:25:03,016 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:03,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:03,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 14:25:03,302 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 210
Garbage collection #1: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2503 to 5003
[2020-11-25 14:25:03,619 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 206
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-11-25 14:25:03,803 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 269
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-11-25 14:25:04,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 14:25:04,984 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 206
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 14:25:06,316 WARN  L188               SmtUtils]: Spent 1.16 s on a formula simplification. DAG size of input: 562 DAG size of output: 547
Garbage collection #1: 227 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 227 to 449
Garbage collection #2: 449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 449 to 887
Garbage collection #3: 887 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 887 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 14:25:06,553 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 286
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 14:25:06,918 WARN  L188               SmtUtils]: Spent 281.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 287
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 14:25:07,053 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 283
[2020-11-25 14:25:07,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:07,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:07,091 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:25:07 BasicIcfg
[2020-11-25 14:25:07,091 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:25:07,091 INFO  L168              Benchmark]: Toolchain (without parser) took 9610.41 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 889.2 MB). Free memory was 940.6 MB in the beginning and 1.5 GB in the end (delta: -576.1 MB). Peak memory consumption was 930.0 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,092 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,092 INFO  L168              Benchmark]: Boogie Preprocessor took 86.40 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,092 INFO  L168              Benchmark]: UtopiaSpecLang took 55.83 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,093 INFO  L168              Benchmark]: Boogie Printer took 13.68 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,093 INFO  L168              Benchmark]: RCFGBuilder took 635.75 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,093 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.49 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,094 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1233.91 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 228.6 MB). Free memory was 824.2 MB in the beginning and 1.2 GB in the end (delta: -364.9 MB). Peak memory consumption was 209.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,094 INFO  L168              Benchmark]: BlockEncodingV2 took 105.48 ms. Allocated memory is still 1.3 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 58.4 MB). Peak memory consumption was 58.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,094 INFO  L168              Benchmark]: BuchiAutomizer took 7434.98 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 660.6 MB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -385.9 MB). Peak memory consumption was 891.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:07,096 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2930 locations, 4980 edges
  - StatisticsResult: Encoded RCFG
    2892 locations, 4886 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 86.40 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 55.83 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.68 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 635.75 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.49 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1233.91 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 228.6 MB). Free memory was 824.2 MB in the beginning and 1.2 GB in the end (delta: -364.9 MB). Peak memory consumption was 209.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 105.48 ms. Allocated memory is still 1.3 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 58.4 MB). Peak memory consumption was 58.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7434.98 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 660.6 MB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -385.9 MB). Peak memory consumption was 891.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1244 locations, 1546 edges
  - StatisticsResult: BuchiProgram size
    2930 locations, 4980 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.5 modules have a trivial ranking function, the largest among these consists of 11 locations. The remainder module has 1618 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.3s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 4.6s. Construction of modules took 1.6s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 2676 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 2458 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12376 SDtfs, 13347 SDslu, 17086 SDs, 0 SdLazy, 19977 SolverSat, 2719 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1405682712) = (new DUCATOProtocolToken)({from : 1405682714});
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
DUCATOProtocolToken(1405682712).stopTrade.gas(3979002)({from : 1405682714});
[L503]               havoc __exception;
[L504]               revert := false;
[L505]   COND FALSE  !(__exception)
[L528]   CALL        call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1904]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L1908]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1912]              _stopTrade_DUCATOProtocolToken[this] := true;
[L528]   RET         call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L529]               assume !revert && gas >= 0;
[L3423]  RET         call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
DUCATOProtocolToken(1405682712).allowance~address~address.gas(3979003)({from : 1405682725, tokenOwner : 1405682702, spender : 1405682722});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_allowance_DUCATOProtocolToken0 := true;
[L2]                call_allowance_DUCATOProtocolToken0 := false;
[L2]                revert := revert_hold;
[L836]              havoc __exception;
[L837]              revert := false;
[L838]   COND TRUE  __exception
[L839]              __tmp__Balance := Balance;
[L840]              __tmp__DType := DType;
[L841]              __tmp__Alloc := Alloc;
[L842]              __tmp__balance_ADDR := balance_ADDR;
[L843]              __tmp__M_Ref_int := M_Ref_int;
[L844]              __tmp__sum_balances0 := sum_balances0;
[L845]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]              __tmp__sum_allowed1 := sum_allowed1;
[L848]              __tmp__Length := Length;
[L849]              __tmp__now := now;
[L850]              __tmp__owner_Owned := owner_Owned;
[L851]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL       call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE  !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]             revert := true;
[L858]   RET        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]              assume revert || gas < 0;
[L3372]  RET        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);

Loop:
DUCATOProtocolToken(1405682712).allowance~address~address.gas(3979001)({from : 1405682717, tokenOwner : 1405682710, spender : 1405682715});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] >= 0 && allowed_DUCATOProtocolToken[this][tokenOwner_s532][spender_s532] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_allowance_DUCATOProtocolToken0 := true;
[L2]                call_allowance_DUCATOProtocolToken0 := false;
[L2]                revert := revert_hold;
[L836]              havoc __exception;
[L837]              revert := false;
[L838]   COND TRUE  __exception
[L839]              __tmp__Balance := Balance;
[L840]              __tmp__DType := DType;
[L841]              __tmp__Alloc := Alloc;
[L842]              __tmp__balance_ADDR := balance_ADDR;
[L843]              __tmp__M_Ref_int := M_Ref_int;
[L844]              __tmp__sum_balances0 := sum_balances0;
[L845]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]              __tmp__sum_allowed1 := sum_allowed1;
[L848]              __tmp__Length := Length;
[L849]              __tmp__now := now;
[L850]              __tmp__owner_Owned := owner_Owned;
[L851]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL       call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE  !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]             revert := true;
[L858]   RET        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]              assume revert || gas < 0;
[L3372]  RET        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
