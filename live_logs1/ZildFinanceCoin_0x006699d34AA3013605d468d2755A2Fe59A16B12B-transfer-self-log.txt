This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 10:52:02,448 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 10:52:02,450 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 10:52:02,460 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 10:52:02,460 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 10:52:02,461 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 10:52:02,462 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 10:52:02,463 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 10:52:02,465 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 10:52:02,465 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 10:52:02,466 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 10:52:02,466 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 10:52:02,467 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 10:52:02,468 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 10:52:02,469 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 10:52:02,469 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 10:52:02,470 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 10:52:02,471 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 10:52:02,472 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 10:52:02,473 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 10:52:02,474 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 10:52:02,475 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 10:52:02,476 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 10:52:02,477 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 10:52:02,477 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 10:52:02,477 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 10:52:02,477 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 10:52:02,478 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 10:52:02,478 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 10:52:02,478 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 10:52:02,479 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 10:52:02,479 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 10:52:02,480 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 10:52:02,480 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 10:52:02,481 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 10:52:02,481 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 10:52:02,482 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 10:52:02,482 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 10:52:02,482 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 10:52:02,483 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 10:52:02,483 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 10:52:02,483 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 10:52:02,491 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 10:52:02,491 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 10:52:02,492 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 10:52:02,492 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 10:52:02,492 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 10:52:02,492 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 10:52:02,492 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 10:52:02,493 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 10:52:02,493 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 10:52:02,493 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 10:52:02,494 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 10:52:02,494 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 10:52:02,517 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 10:52:02,530 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 10:52:02,532 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 10:52:02,534 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 10:52:02,534 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 10:52:02,534 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl
[2020-11-25 10:52:02,535 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl'
[2020-11-25 10:52:02,629 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 10:52:02,630 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 10:52:02,631 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 10:52:02,631 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 10:52:02,631 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 10:52:02,647 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,648 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,681 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,682 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,703 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,714 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,723 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,735 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 10:52:02,736 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 10:52:02,736 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 10:52:02,738 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 10:52:02,742 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/1) ...
[2020-11-25 10:52:02,763 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ZildFinanceCoin.transfer(to, value), msg.sender == to && value <= _balances_ZildFinanceCoin[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][to] >= 0 && _balances_ZildFinanceCoin[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][msg.sender] >= 0 &&  _balances_ZildFinanceCoin[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ZildFinanceCoin.transfer(to, value), return == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this]) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this]) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this]) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this]) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this]) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this]) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this]) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this]) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 10:52:02,769 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ZildFinanceCoin.transfer(to, value), msg.sender == to && value <= _balances_ZildFinanceCoin[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][to] >= 0 && _balances_ZildFinanceCoin[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][msg.sender] >= 0 &&  _balances_ZildFinanceCoin[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ZildFinanceCoin.transfer(to, value), return == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this]) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this]) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this]) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this]) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this]) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this]) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this]) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this]) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 10:52:02,777 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ZildFinanceCoin.transfer(to, value), msg.sender == to && value <= _balances_ZildFinanceCoin[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][to] >= 0 && _balances_ZildFinanceCoin[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][msg.sender] >= 0 &&  _balances_ZildFinanceCoin[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ZildFinanceCoin.transfer(to, value), return == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this]) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this]) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this]) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this]) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this]) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this]) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this]) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this]) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 10:52:02,784 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s629 && amount_s629<=_balances_ZildFinanceCoin[this][msg.sender] ) && amount_s629>=0 ) && amount_s629<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZildFinanceCoin[this][to_s629]>=0 ) && _balances_ZildFinanceCoin[this][to_s629]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZildFinanceCoin[this][msg.sender]>=0 ) && _balances_ZildFinanceCoin[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>],IdentifierExpression[to_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],[IdentifierExpression[to_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],[IdentifierExpression[to_s629,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 10:52:02,787 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply_ZildFinanceCoin[this]==( old(totalSupply_ZildFinanceCoin[this]) ) ) && _balances_ZildFinanceCoin[this]==( old(_balances_ZildFinanceCoin[this]) ) ) && _allowances_ZildFinanceCoin[this]==( old(_allowances_ZildFinanceCoin[this]) ) ) && allowBurn_ZildFinanceCoin[this]==( old(allowBurn_ZildFinanceCoin[this]) ) ) && tokenDestroyed_ZildFinanceCoin[this]==( old(tokenDestroyed_ZildFinanceCoin[this]) ) ) && founder_ZildFinanceCoin[this]==( old(founder_ZildFinanceCoin[this]) ) ) && founderLockupStartTime_ZildFinanceCoin[this]==( old(founderLockupStartTime_ZildFinanceCoin[this]) ) ) && founderReleasedAmount_ZildFinanceCoin[this]==( old(founderReleasedAmount_ZildFinanceCoin[this]) ) ) && frozenAccount_ZildFinanceCoin[this]==( old(frozenAccount_ZildFinanceCoin[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ZildFinanceCoin>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowBurn_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowBurn_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[tokenDestroyed_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[tokenDestroyed_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[founder_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[founder_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[founderLockupStartTime_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[founderLockupStartTime_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[founderReleasedAmount_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[founderReleasedAmount_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ZildFinanceCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZildFinanceCoin>]]]]]]
[2020-11-25 10:52:02,794 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ZildFinanceCoin.transfer(to, value), msg.sender == to && value <= _balances_ZildFinanceCoin[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][to] >= 0 && _balances_ZildFinanceCoin[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZildFinanceCoin[this][msg.sender] >= 0 &&  _balances_ZildFinanceCoin[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ZildFinanceCoin.transfer(to, value), return == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this]) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this]) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this]) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this]) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this]) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this]) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this]) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this]) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 10:52:02,795 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ZildFinanceCoin0) ==> ( <>AP(success_transfer_ZildFinanceCoin0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 10:52:02,807 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:52:02 PropertyContainer
[2020-11-25 10:52:02,807 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 10:52:02,807 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 10:52:02,807 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 10:52:02,807 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 10:52:02,808 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/2) ...
[2020-11-25 10:52:02,809 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 10:52:02,809 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 10:52:02,829 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:52:02" (2/2) ...
[2020-11-25 10:52:02,830 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 10:52:02,830 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 10:52:02,830 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 10:52:02,830 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 10:52:02,831 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/2) ...
[2020-11-25 10:52:02,889 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 10:52:02,889 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:52:02,889 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 10:52:02,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,890 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,891 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 10:52:02,891 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 10:52:02,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 10:52:02,891 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 10:52:02,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 10:52:02,891 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 10:52:02,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 10:52:02,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 10:52:02,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 10:52:02,892 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ZildFinanceCoin_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZildFinanceCoin_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure release_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZildFinanceCoin
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,894 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure changeFounder~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeFounder~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure setFurnace~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFurnace~address_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZildFinanceCoin
[2020-11-25 10:52:02,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure allowBurn_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowBurn_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenDestroyed_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenDestroyed_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupAmount_ZildFinanceCoin
[2020-11-25 10:52:02,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupAmount_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupCliff_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupCliff_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseInterval_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseInterval_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseAmount_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseAmount_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure MarketingAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure MarketingAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FurnaceAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure FurnaceAllocation_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L130     BoogieDeclarations]: Found specification of procedure founder_ZildFinanceCoin
[2020-11-25 10:52:02,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure founder_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure founderLockupStartTime_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderLockupStartTime_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure founderReleasedAmount_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderReleasedAmount_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ZildFinanceCoin
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 10:52:02,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZildFinanceCoin
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,899 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 10:52:02,900 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure ZildFinanceCoin_ZildFinanceCoin__success
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure ZildFinanceCoin_ZildFinanceCoin__fail
[2020-11-25 10:52:02,901 INFO  L130     BoogieDeclarations]: Found specification of procedure release_ZildFinanceCoin__success
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure release_ZildFinanceCoin__fail
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,902 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure changeFounder~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure changeFounder~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,903 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure setFurnace~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure setFurnace~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ZildFinanceCoin__success
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ZildFinanceCoin__fail
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZildFinanceCoin__success
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZildFinanceCoin__fail
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZildFinanceCoin__success
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZildFinanceCoin__fail
[2020-11-25 10:52:02,904 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZildFinanceCoin__fail
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZildFinanceCoin__fail
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure allowBurn_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure allowBurn_ZildFinanceCoin__fail
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenDestroyed_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenDestroyed_ZildFinanceCoin__fail
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupCliff_ZildFinanceCoin__success
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderLockupCliff_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseInterval_ZildFinanceCoin__success
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseInterval_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FounderReleaseAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure MarketingAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure MarketingAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FurnaceAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure FurnaceAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,906 INFO  L130     BoogieDeclarations]: Found specification of procedure founder_ZildFinanceCoin__success
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure founder_ZildFinanceCoin__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure founderLockupStartTime_ZildFinanceCoin__success
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure founderLockupStartTime_ZildFinanceCoin__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure founderReleasedAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure founderReleasedAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 10:52:02,907 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 10:52:02,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 10:52:02,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZildFinanceCoin_ZildFinanceCoin__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZildFinanceCoin_ZildFinanceCoin__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_ZildFinanceCoin__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_ZildFinanceCoin__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeFounder~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeFounder~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFurnace~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFurnace~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZildFinanceCoin__fail
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZildFinanceCoin__success
[2020-11-25 10:52:02,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZildFinanceCoin__success
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZildFinanceCoin__success
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZildFinanceCoin__success
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowBurn_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowBurn_ZildFinanceCoin__success
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenDestroyed_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenDestroyed_ZildFinanceCoin__success
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupCliff_ZildFinanceCoin__fail
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderLockupCliff_ZildFinanceCoin__success
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseInterval_ZildFinanceCoin__fail
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseInterval_ZildFinanceCoin__success
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure FounderReleaseAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure MarketingAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure MarketingAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FurnaceAllocation_ZildFinanceCoin__fail
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FurnaceAllocation_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founder_ZildFinanceCoin__fail
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founder_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderLockupStartTime_ZildFinanceCoin__fail
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderLockupStartTime_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderReleasedAmount_ZildFinanceCoin__fail
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure founderReleasedAmount_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ZildFinanceCoin__fail
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ZildFinanceCoin__success
[2020-11-25 10:52:02,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 10:52:02,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 10:52:02,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 10:52:02,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 10:52:02,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZildFinanceCoin
[2020-11-25 10:52:02,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 10:52:02,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 10:52:02,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 10:52:03,470 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:52:03,471 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:52:03,471 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:52:03,729 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 10:52:03,730 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 10:52:03,732 INFO  L202        PluginConnector]: Adding new model ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:52:03 BoogieIcfgContainer
[2020-11-25 10:52:03,732 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:52:02" (2/2) ...
[2020-11-25 10:52:03,732 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 10:52:03,732 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@655d292 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:52:03, skipping insertion in model container
[2020-11-25 10:52:03,733 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 10:52:03,733 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 10:52:03,733 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 10:52:03,734 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 10:52:03,735 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/3) ...
[2020-11-25 10:52:03,735 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1c00ebc6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:52:03, skipping insertion in model container
[2020-11-25 10:52:03,735 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:52:02" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 10:52:03,774 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:52:03 NWAContainer
[2020-11-25 10:52:03,774 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 10:52:03,774 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 10:52:03,774 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 10:52:03,775 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 10:52:03,776 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:52:03" (3/4) ...
[2020-11-25 10:52:03,777 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4b7cef8d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:52:03, skipping insertion in model container
[2020-11-25 10:52:03,777 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:52:03" (4/4) ...
[2020-11-25 10:52:03,780 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 10:52:03,784 INFO  L110   BuchiProductObserver]: Initial RCFG 2555 locations, 3154 edges
[2020-11-25 10:52:03,785 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 10:52:03,798 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 10:52:05,110 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 10:52:05,117 INFO  L110   BuchiProductObserver]: BuchiProgram size 5976 locations, 10094 edges
[2020-11-25 10:52:05,117 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:52:05 BoogieIcfgContainer
[2020-11-25 10:52:05,117 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 10:52:05,118 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 10:52:05,118 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 10:52:05,119 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 10:52:05,120 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:52:05" (1/1) ...
[2020-11-25 10:52:05,223 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s162, b_s162, -1417195012);
[2020-11-25 10:52:05,224 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s162, b_s162, -1417195012);
[2020-11-25 10:52:05,241 INFO  L313           BlockEncoder]: Initial Icfg 5976 locations, 10094 edges
[2020-11-25 10:52:05,241 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 10:52:05,241 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 10:52:05,241 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 10:52:05,242 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 10:52:05,253 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 11 locations because of local infeasibility
[2020-11-25 10:52:05,266 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 10:52:05,279 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 10:52:05,283 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 10:52:05,286 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 10:52:05,287 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 10:52:05,289 INFO  L313           BlockEncoder]: Encoded RCFG 5938 locations, 9997 edges
[2020-11-25 10:52:05,290 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:52:05 BasicIcfg
[2020-11-25 10:52:05,290 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 10:52:05,290 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 10:52:05,290 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 10:52:05,292 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 10:52:05,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:52:02" (1/6) ...
[2020-11-25 10:52:05,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a5fa10c and model type ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:52:05, skipping insertion in model container
[2020-11-25 10:52:05,294 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,295 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:52:02" (2/6) ...
[2020-11-25 10:52:05,295 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a5fa10c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:52:05, skipping insertion in model container
[2020-11-25 10:52:05,295 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,295 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:52:03" (3/6) ...
[2020-11-25 10:52:05,295 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a5fa10c and model type ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:52:05, skipping insertion in model container
[2020-11-25 10:52:05,295 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,295 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:52:03" (4/6) ...
[2020-11-25 10:52:05,295 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a5fa10c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:52:05, skipping insertion in model container
[2020-11-25 10:52:05,295 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,295 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:52:05" (5/6) ...
[2020-11-25 10:52:05,295 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a5fa10c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 10:52:05, skipping insertion in model container
[2020-11-25 10:52:05,296 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:52:05,296 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:52:05" (6/6) ...
[2020-11-25 10:52:05,296 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZildFinanceCoin_0x006699d34AA3013605d468d2755A2Fe59A16B12B_transfer-self.bpl_BEv2
[2020-11-25 10:52:05,335 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 10:52:05,336 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 10:52:05,336 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 10:52:05,336 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 10:52:05,336 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 10:52:05,336 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 10:52:05,336 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 10:52:05,336 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 10:52:05,336 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 10:52:05,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5938 states.
[2020-11-25 10:52:05,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:05,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:05,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:05,480 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:05,480 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:05,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 10:52:05,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5938 states.
[2020-11-25 10:52:05,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:05,509 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:05,509 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:05,511 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:05,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND TRUE   revert
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND TRUE   choice == 31
[L6279]              gas := gas - 21000;
[L6280]  COND FALSE  !(gas >= 0)
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:05,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:05,524 INFO  L82        PathProgramCache]: Analyzing trace with hash 1549560328, now seen corresponding path program 1 times
[2020-11-25 10:52:05,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:05,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:05,596 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:05,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:05,598 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 10:52:05,904 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:05,913 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 10:52:05,913 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 10:52:05,914 INFO  L87              Difference]: Start difference. First operand 5938 states. Second operand 4 states.
[2020-11-25 10:52:06,517 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:06,518 INFO  L93              Difference]: Finished difference Result 4964 states and 5475 transitions.
[2020-11-25 10:52:06,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 10:52:06,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4964 states and 5475 transitions.
[2020-11-25 10:52:06,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:06,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4964 states to 4964 states and 5475 transitions.
[2020-11-25 10:52:06,591 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 10:52:06,595 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 10:52:06,596 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4964 states and 5475 transitions.
[2020-11-25 10:52:06,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:06,608 INFO  L728         BuchiCegarLoop]: Abstraction has 4964 states and 5475 transitions.
[2020-11-25 10:52:06,627 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4964 states and 5475 transitions.
[2020-11-25 10:52:06,687 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4964 to 4964.
[2020-11-25 10:52:06,688 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4964 states.
[2020-11-25 10:52:06,695 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4964 states to 4964 states and 5475 transitions.
[2020-11-25 10:52:06,695 INFO  L751         BuchiCegarLoop]: Abstraction has 4964 states and 5475 transitions.
[2020-11-25 10:52:06,695 INFO  L631         BuchiCegarLoop]: Abstraction has 4964 states and 5475 transitions.
[2020-11-25 10:52:06,695 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 10:52:06,695 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4964 states and 5475 transitions.
[2020-11-25 10:52:06,707 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:06,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:06,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:06,709 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:06,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND TRUE   revert
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND TRUE   !(to_s629 != null)
[L4348]              revert := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND TRUE   !(to_s629 != null)
[L4348]              revert := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:06,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:06,713 INFO  L82        PathProgramCache]: Analyzing trace with hash 454921497, now seen corresponding path program 1 times
[2020-11-25 10:52:06,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:06,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:06,749 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:06,749 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:06,749 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:52:06,750 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:06,751 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:52:06,751 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:52:06,751 INFO  L87              Difference]: Start difference. First operand 4964 states and 5475 transitions. cyclomatic complexity: 513 Second operand 3 states.
[2020-11-25 10:52:06,839 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:06,839 INFO  L93              Difference]: Finished difference Result 6146 states and 6939 transitions.
[2020-11-25 10:52:06,840 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:52:06,840 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6146 states and 6939 transitions.
[2020-11-25 10:52:06,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:52:06,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6146 states to 6146 states and 6939 transitions.
[2020-11-25 10:52:06,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1874
[2020-11-25 10:52:06,886 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1874
[2020-11-25 10:52:06,886 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6146 states and 6939 transitions.
[2020-11-25 10:52:06,892 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:06,892 INFO  L728         BuchiCegarLoop]: Abstraction has 6146 states and 6939 transitions.
[2020-11-25 10:52:06,898 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6146 states and 6939 transitions.
[2020-11-25 10:52:06,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6146 to 5280.
[2020-11-25 10:52:06,943 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5280 states.
[2020-11-25 10:52:06,950 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5280 states to 5280 states and 5857 transitions.
[2020-11-25 10:52:06,950 INFO  L751         BuchiCegarLoop]: Abstraction has 5280 states and 5857 transitions.
[2020-11-25 10:52:06,950 INFO  L631         BuchiCegarLoop]: Abstraction has 5280 states and 5857 transitions.
[2020-11-25 10:52:06,950 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 10:52:06,951 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5280 states and 5857 transitions.
[2020-11-25 10:52:06,958 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:06,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:06,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:06,960 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:06,960 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND TRUE   !(_founder_s499 != null)
[L4136]              revert := true;
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND TRUE   !(to_s629 != null)
[L4348]              revert := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND TRUE   !(to_s629 != null)
[L4348]              revert := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:06,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:06,963 INFO  L82        PathProgramCache]: Analyzing trace with hash -1764475305, now seen corresponding path program 1 times
[2020-11-25 10:52:06,964 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:06,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:06,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:06,999 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:07,000 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:52:07,000 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:07,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:52:07,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:52:07,000 INFO  L87              Difference]: Start difference. First operand 5280 states and 5857 transitions. cyclomatic complexity: 579 Second operand 3 states.
[2020-11-25 10:52:07,072 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:07,073 INFO  L93              Difference]: Finished difference Result 6146 states and 6801 transitions.
[2020-11-25 10:52:07,073 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:52:07,073 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6146 states and 6801 transitions.
[2020-11-25 10:52:07,092 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:52:07,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6146 states to 5840 states and 6429 transitions.
[2020-11-25 10:52:07,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1789
[2020-11-25 10:52:07,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1843
[2020-11-25 10:52:07,119 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5840 states and 6429 transitions.
[2020-11-25 10:52:07,127 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:07,127 INFO  L728         BuchiCegarLoop]: Abstraction has 5840 states and 6429 transitions.
[2020-11-25 10:52:07,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5840 states and 6429 transitions.
[2020-11-25 10:52:07,198 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5840 to 5066.
[2020-11-25 10:52:07,199 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5066 states.
[2020-11-25 10:52:07,204 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5066 states to 5066 states and 5439 transitions.
[2020-11-25 10:52:07,204 INFO  L751         BuchiCegarLoop]: Abstraction has 5066 states and 5439 transitions.
[2020-11-25 10:52:07,204 INFO  L631         BuchiCegarLoop]: Abstraction has 5066 states and 5439 transitions.
[2020-11-25 10:52:07,204 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 10:52:07,204 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5066 states and 5439 transitions.
[2020-11-25 10:52:07,211 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:07,211 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:07,211 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:07,213 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:07,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND TRUE   !(to_s629 != null)
[L4324]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND TRUE   !(to_s629 != null)
[L4324]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:07,220 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:07,220 INFO  L82        PathProgramCache]: Analyzing trace with hash -1663967986, now seen corresponding path program 1 times
[2020-11-25 10:52:07,221 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:07,234 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:07,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:07,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:07,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 10:52:07,287 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:07,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 10:52:07,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 10:52:07,287 INFO  L87              Difference]: Start difference. First operand 5066 states and 5439 transitions. cyclomatic complexity: 375 Second operand 6 states.
[2020-11-25 10:52:07,364 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:07,364 INFO  L93              Difference]: Finished difference Result 5178 states and 5558 transitions.
[2020-11-25 10:52:07,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 10:52:07,364 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5178 states and 5558 transitions.
[2020-11-25 10:52:07,375 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:07,391 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5178 states to 5170 states and 5550 transitions.
[2020-11-25 10:52:07,392 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1619
[2020-11-25 10:52:07,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1619
[2020-11-25 10:52:07,392 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5170 states and 5550 transitions.
[2020-11-25 10:52:07,397 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:07,397 INFO  L728         BuchiCegarLoop]: Abstraction has 5170 states and 5550 transitions.
[2020-11-25 10:52:07,403 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5170 states and 5550 transitions.
[2020-11-25 10:52:07,445 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5170 to 5157.
[2020-11-25 10:52:07,445 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5157 states.
[2020-11-25 10:52:07,450 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5157 states to 5157 states and 5535 transitions.
[2020-11-25 10:52:07,450 INFO  L751         BuchiCegarLoop]: Abstraction has 5157 states and 5535 transitions.
[2020-11-25 10:52:07,450 INFO  L631         BuchiCegarLoop]: Abstraction has 5157 states and 5535 transitions.
[2020-11-25 10:52:07,450 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 10:52:07,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5157 states and 5535 transitions.
[2020-11-25 10:52:07,456 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:07,456 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:07,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:07,458 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:07,458 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:07,462 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:07,462 INFO  L82        PathProgramCache]: Analyzing trace with hash -1083636616, now seen corresponding path program 1 times
[2020-11-25 10:52:07,463 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:07,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:07,542 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:07,543 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:07,543 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 10:52:07,543 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:07,543 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 10:52:07,543 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 10:52:07,543 INFO  L87              Difference]: Start difference. First operand 5157 states and 5535 transitions. cyclomatic complexity: 380 Second operand 11 states.
[2020-11-25 10:52:09,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:09,986 INFO  L93              Difference]: Finished difference Result 9153 states and 9899 transitions.
[2020-11-25 10:52:09,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 10:52:09,987 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9153 states and 9899 transitions.
[2020-11-25 10:52:10,004 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 10:52:10,025 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9153 states to 9140 states and 9884 transitions.
[2020-11-25 10:52:10,025 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2926
[2020-11-25 10:52:10,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2926
[2020-11-25 10:52:10,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9140 states and 9884 transitions.
[2020-11-25 10:52:10,032 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:10,032 INFO  L728         BuchiCegarLoop]: Abstraction has 9140 states and 9884 transitions.
[2020-11-25 10:52:10,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9140 states and 9884 transitions.
[2020-11-25 10:52:10,089 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9140 to 7018.
[2020-11-25 10:52:10,089 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7018 states.
[2020-11-25 10:52:10,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7018 states to 7018 states and 7741 transitions.
[2020-11-25 10:52:10,097 INFO  L751         BuchiCegarLoop]: Abstraction has 7018 states and 7741 transitions.
[2020-11-25 10:52:10,097 INFO  L631         BuchiCegarLoop]: Abstraction has 7018 states and 7741 transitions.
[2020-11-25 10:52:10,097 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 10:52:10,097 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7018 states and 7741 transitions.
[2020-11-25 10:52:10,106 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:10,106 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:10,106 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:10,107 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:10,107 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629]
[L4332]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629]
[L4332]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:10,110 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:10,110 INFO  L82        PathProgramCache]: Analyzing trace with hash -622102057, now seen corresponding path program 1 times
[2020-11-25 10:52:10,111 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:10,122 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:10,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:10,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:10,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 10:52:10,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:10,186 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 10:52:10,186 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=8, Invalid=12, Unknown=0, NotChecked=0, Total=20
[2020-11-25 10:52:10,186 INFO  L87              Difference]: Start difference. First operand 7018 states and 7741 transitions. cyclomatic complexity: 727 Second operand 5 states.
[2020-11-25 10:52:10,255 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:10,255 INFO  L93              Difference]: Finished difference Result 7050 states and 7779 transitions.
[2020-11-25 10:52:10,255 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 10:52:10,255 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7050 states and 7779 transitions.
[2020-11-25 10:52:10,272 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:10,289 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7050 states to 7050 states and 7779 transitions.
[2020-11-25 10:52:10,289 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2197
[2020-11-25 10:52:10,290 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2197
[2020-11-25 10:52:10,290 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7050 states and 7779 transitions.
[2020-11-25 10:52:10,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:10,294 INFO  L728         BuchiCegarLoop]: Abstraction has 7050 states and 7779 transitions.
[2020-11-25 10:52:10,299 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7050 states and 7779 transitions.
[2020-11-25 10:52:10,345 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7050 to 7018.
[2020-11-25 10:52:10,345 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7018 states.
[2020-11-25 10:52:10,354 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7018 states to 7018 states and 7741 transitions.
[2020-11-25 10:52:10,354 INFO  L751         BuchiCegarLoop]: Abstraction has 7018 states and 7741 transitions.
[2020-11-25 10:52:10,354 INFO  L631         BuchiCegarLoop]: Abstraction has 7018 states and 7741 transitions.
[2020-11-25 10:52:10,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 10:52:10,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7018 states and 7741 transitions.
[2020-11-25 10:52:10,363 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:10,363 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:10,363 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:10,365 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:10,365 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND FALSE  !(!(to_s629 != null))
[L4351]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4355]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][to_s629])
[L4359]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4359]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4360]  COND FALSE  !(revert)
[L4363]              __ret_0_ := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND FALSE  !(!(to_s629 != null))
[L4351]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4355]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][to_s629])
[L4359]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4359]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4360]  COND FALSE  !(revert)
[L4363]              __ret_0_ := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:10,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:10,369 INFO  L82        PathProgramCache]: Analyzing trace with hash 1142611975, now seen corresponding path program 1 times
[2020-11-25 10:52:10,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:10,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:10,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:10,809 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:10,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 10:52:10,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:10,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 10:52:10,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=202, Unknown=0, NotChecked=0, Total=240
[2020-11-25 10:52:10,810 INFO  L87              Difference]: Start difference. First operand 7018 states and 7741 transitions. cyclomatic complexity: 727 Second operand 16 states.
[2020-11-25 10:52:16,443 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:16,444 INFO  L93              Difference]: Finished difference Result 7114 states and 7864 transitions.
[2020-11-25 10:52:16,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 10:52:16,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7114 states and 7864 transitions.
[2020-11-25 10:52:16,458 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 10:52:16,473 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7114 states to 7102 states and 7850 transitions.
[2020-11-25 10:52:16,473 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2218
[2020-11-25 10:52:16,473 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2218
[2020-11-25 10:52:16,473 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7102 states and 7850 transitions.
[2020-11-25 10:52:16,477 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:16,478 INFO  L728         BuchiCegarLoop]: Abstraction has 7102 states and 7850 transitions.
[2020-11-25 10:52:16,481 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7102 states and 7850 transitions.
[2020-11-25 10:52:16,524 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7102 to 7074.
[2020-11-25 10:52:16,524 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7074 states.
[2020-11-25 10:52:16,533 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7074 states to 7074 states and 7796 transitions.
[2020-11-25 10:52:16,533 INFO  L751         BuchiCegarLoop]: Abstraction has 7074 states and 7796 transitions.
[2020-11-25 10:52:16,533 INFO  L631         BuchiCegarLoop]: Abstraction has 7074 states and 7796 transitions.
[2020-11-25 10:52:16,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 10:52:16,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7074 states and 7796 transitions.
[2020-11-25 10:52:16,543 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:16,543 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:16,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:16,544 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:16,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND TRUE   !(from_s861 != null)
[L4577]              revert := true;
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND TRUE   revert
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND FALSE  !(!(to_s629 != null))
[L4351]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4355]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][to_s629])
[L4359]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4359]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4360]  COND FALSE  !(revert)
[L4363]              __ret_0_ := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:16,548 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:16,548 INFO  L82        PathProgramCache]: Analyzing trace with hash 736792533, now seen corresponding path program 1 times
[2020-11-25 10:52:16,548 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:16,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:16,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:16,623 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:16,623 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 10:52:16,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:16,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 10:52:16,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 10:52:16,623 INFO  L87              Difference]: Start difference. First operand 7074 states and 7796 transitions. cyclomatic complexity: 726 Second operand 6 states.
[2020-11-25 10:52:16,678 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:16,678 INFO  L93              Difference]: Finished difference Result 7098 states and 7829 transitions.
[2020-11-25 10:52:16,679 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 10:52:16,679 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7098 states and 7829 transitions.
[2020-11-25 10:52:16,691 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:16,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7098 states to 7078 states and 7808 transitions.
[2020-11-25 10:52:16,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2213
[2020-11-25 10:52:16,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2213
[2020-11-25 10:52:16,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7078 states and 7808 transitions.
[2020-11-25 10:52:16,708 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:16,709 INFO  L728         BuchiCegarLoop]: Abstraction has 7078 states and 7808 transitions.
[2020-11-25 10:52:16,712 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7078 states and 7808 transitions.
[2020-11-25 10:52:16,748 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7078 to 7078.
[2020-11-25 10:52:16,748 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7078 states.
[2020-11-25 10:52:16,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7078 states to 7078 states and 7808 transitions.
[2020-11-25 10:52:16,756 INFO  L751         BuchiCegarLoop]: Abstraction has 7078 states and 7808 transitions.
[2020-11-25 10:52:16,756 INFO  L631         BuchiCegarLoop]: Abstraction has 7078 states and 7808 transitions.
[2020-11-25 10:52:16,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 10:52:16,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7078 states and 7808 transitions.
[2020-11-25 10:52:16,763 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:16,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:16,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:16,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:16,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND TRUE   !(b_s69 <= a_s69)
[L3781]              revert := true;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND TRUE   revert
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND TRUE   revert
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND TRUE   !(b_s69 <= a_s69)
[L3781]              revert := true;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND TRUE   revert
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND TRUE   revert
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:16,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:16,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 1752662877, now seen corresponding path program 1 times
[2020-11-25 10:52:16,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:16,778 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:16,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:16,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:16,820 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 10:52:16,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:16,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 10:52:16,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 10:52:16,821 INFO  L87              Difference]: Start difference. First operand 7078 states and 7808 transitions. cyclomatic complexity: 734 Second operand 8 states.
[2020-11-25 10:52:17,622 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:17,622 INFO  L93              Difference]: Finished difference Result 7320 states and 8080 transitions.
[2020-11-25 10:52:17,622 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 10:52:17,622 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7320 states and 8080 transitions.
[2020-11-25 10:52:17,636 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 10:52:17,651 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7320 states to 7320 states and 8080 transitions.
[2020-11-25 10:52:17,651 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2328
[2020-11-25 10:52:17,652 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2328
[2020-11-25 10:52:17,652 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7320 states and 8080 transitions.
[2020-11-25 10:52:17,656 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:17,656 INFO  L728         BuchiCegarLoop]: Abstraction has 7320 states and 8080 transitions.
[2020-11-25 10:52:17,660 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7320 states and 8080 transitions.
[2020-11-25 10:52:17,691 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7320 to 6338.
[2020-11-25 10:52:17,691 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6338 states.
[2020-11-25 10:52:17,697 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6338 states to 6338 states and 6914 transitions.
[2020-11-25 10:52:17,697 INFO  L751         BuchiCegarLoop]: Abstraction has 6338 states and 6914 transitions.
[2020-11-25 10:52:17,697 INFO  L631         BuchiCegarLoop]: Abstraction has 6338 states and 6914 transitions.
[2020-11-25 10:52:17,698 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 10:52:17,698 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6338 states and 6914 transitions.
[2020-11-25 10:52:17,704 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:52:17,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:17,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:17,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:17,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND FALSE  !(!(b_s69 <= a_s69))
[L3784]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3785]              __ret_0_ := c_s69;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND FALSE  !(revert)
[L4584]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4585]              __tmp___balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4586]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4587]  CALL        call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3734]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3735]  COND TRUE   !(c_s26 >= a_s26)
[L3736]              revert := true;
[L4587]  RET         call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4588]  COND TRUE   revert
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND TRUE   revert
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND TRUE   choice == 31
[L6279]              gas := gas - 21000;
[L6280]  COND FALSE  !(gas >= 0)
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:17,707 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:17,707 INFO  L82        PathProgramCache]: Analyzing trace with hash -1057030829, now seen corresponding path program 1 times
[2020-11-25 10:52:17,708 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:17,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:18,359 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:18,359 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:18,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [31] imperfect sequences [] total 31
[2020-11-25 10:52:18,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:18,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:52:18,360 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=82, Invalid=910, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:52:18,360 INFO  L87              Difference]: Start difference. First operand 6338 states and 6914 transitions. cyclomatic complexity: 580 Second operand 32 states.
[2020-11-25 10:52:35,722 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:35,722 INFO  L93              Difference]: Finished difference Result 6470 states and 7163 transitions.
[2020-11-25 10:52:35,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 10:52:35,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6470 states and 7163 transitions.
[2020-11-25 10:52:35,734 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 10:52:35,747 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6470 states to 6470 states and 7163 transitions.
[2020-11-25 10:52:35,747 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1795
[2020-11-25 10:52:35,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1795
[2020-11-25 10:52:35,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6470 states and 7163 transitions.
[2020-11-25 10:52:35,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:35,751 INFO  L728         BuchiCegarLoop]: Abstraction has 6470 states and 7163 transitions.
[2020-11-25 10:52:35,755 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6470 states and 7163 transitions.
[2020-11-25 10:52:35,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6470 to 6395.
[2020-11-25 10:52:35,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6395 states.
[2020-11-25 10:52:35,792 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6395 states to 6395 states and 7024 transitions.
[2020-11-25 10:52:35,792 INFO  L751         BuchiCegarLoop]: Abstraction has 6395 states and 7024 transitions.
[2020-11-25 10:52:35,792 INFO  L631         BuchiCegarLoop]: Abstraction has 6395 states and 7024 transitions.
[2020-11-25 10:52:35,792 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 10:52:35,792 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6395 states and 7024 transitions.
[2020-11-25 10:52:35,799 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 10:52:35,799 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:35,799 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:35,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:35,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND FALSE  !(!(b_s69 <= a_s69))
[L3784]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3785]              __ret_0_ := c_s69;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND FALSE  !(revert)
[L4584]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4585]              __tmp___balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4586]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4587]  CALL        call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3734]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3735]  COND FALSE  !(!(c_s26 >= a_s26))
[L3739]              __ret_0_ := c_s26;
[L4587]  RET         call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4588]  COND FALSE  !(revert)
[L4591]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][to_s861];
[L4592]              __tmp___balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4593]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][to_s861];
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND FALSE  !(revert)
[L4339]              __ret_0_ := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND FALSE  !(!(b_s69 <= a_s69))
[L3784]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3785]              __ret_0_ := c_s69;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND FALSE  !(revert)
[L4584]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4585]              __tmp___balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4586]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4587]  CALL        call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3734]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3735]  COND FALSE  !(!(c_s26 >= a_s26))
[L3739]              __ret_0_ := c_s26;
[L4587]  RET         call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4588]  COND FALSE  !(revert)
[L4591]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][to_s861];
[L4592]              __tmp___balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4593]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][to_s861];
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND FALSE  !(revert)
[L4339]              __ret_0_ := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:35,803 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:35,803 INFO  L82        PathProgramCache]: Analyzing trace with hash 717502927, now seen corresponding path program 1 times
[2020-11-25 10:52:35,804 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:35,813 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:35,842 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:52:35,842 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:35,842 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 10:52:35,842 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:35,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 10:52:35,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 10:52:35,842 INFO  L87              Difference]: Start difference. First operand 6395 states and 7024 transitions. cyclomatic complexity: 637 Second operand 5 states.
[2020-11-25 10:52:36,402 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:36,402 INFO  L93              Difference]: Finished difference Result 7692 states and 8795 transitions.
[2020-11-25 10:52:36,402 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 10:52:36,402 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7692 states and 8795 transitions.
[2020-11-25 10:52:36,421 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 10:52:36,437 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7692 states to 5706 states and 6781 transitions.
[2020-11-25 10:52:36,437 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1003
[2020-11-25 10:52:36,437 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1003
[2020-11-25 10:52:36,438 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5706 states and 6781 transitions.
[2020-11-25 10:52:36,441 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:36,441 INFO  L728         BuchiCegarLoop]: Abstraction has 5706 states and 6781 transitions.
[2020-11-25 10:52:36,444 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5706 states and 6781 transitions.
[2020-11-25 10:52:36,471 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5706 to 4526.
[2020-11-25 10:52:36,471 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4526 states.
[2020-11-25 10:52:36,476 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4526 states to 4526 states and 5100 transitions.
[2020-11-25 10:52:36,476 INFO  L751         BuchiCegarLoop]: Abstraction has 4526 states and 5100 transitions.
[2020-11-25 10:52:36,476 INFO  L631         BuchiCegarLoop]: Abstraction has 4526 states and 5100 transitions.
[2020-11-25 10:52:36,476 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 10:52:36,476 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4526 states and 5100 transitions.
[2020-11-25 10:52:36,481 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:52:36,481 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:36,481 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:36,482 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:36,482 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND FALSE  !(__exception)
[L963]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4346]              __var_12 := null;
[L4347]  COND FALSE  !(!(to_s629 != null))
[L4351]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4355]  COND FALSE  !(!!frozenAccount_ZildFinanceCoin[this][to_s629])
[L4359]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4359]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4360]  COND FALSE  !(revert)
[L4363]              __ret_0_ := true;
[L963]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L964]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && totalSupply_ZildFinanceCoin[this] == old(totalSupply_ZildFinanceCoin[this])) && _balances_ZildFinanceCoin[this] == old(_balances_ZildFinanceCoin[this])) && _allowances_ZildFinanceCoin[this] == old(_allowances_ZildFinanceCoin[this])) && allowBurn_ZildFinanceCoin[this] == old(allowBurn_ZildFinanceCoin[this])) && tokenDestroyed_ZildFinanceCoin[this] == old(tokenDestroyed_ZildFinanceCoin[this])) && founder_ZildFinanceCoin[this] == old(founder_ZildFinanceCoin[this])) && founderLockupStartTime_ZildFinanceCoin[this] == old(founderLockupStartTime_ZildFinanceCoin[this])) && founderReleasedAmount_ZildFinanceCoin[this] == old(founderReleasedAmount_ZildFinanceCoin[this])) && frozenAccount_ZildFinanceCoin[this] == old(frozenAccount_ZildFinanceCoin[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG])
[L4331]  COND FALSE  !(!!__tmp__frozenAccount_ZildFinanceCoin[this][to_s629])
[L4335]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4575]              __var_19 := null;
[L4576]  COND FALSE  !(!(from_s861 != null))
[L4580]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3780]  COND FALSE  !(!(b_s69 <= a_s69))
[L3784]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3785]              __ret_0_ := c_s69;
[L4580]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4581]  COND FALSE  !(revert)
[L4584]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4585]              __tmp___balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4586]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZildFinanceCoin[this][from_s861];
[L4587]  CALL        call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3734]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3735]  COND TRUE   !(c_s26 >= a_s26)
[L3736]              revert := true;
[L4587]  RET         call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4588]  COND TRUE   revert
[L4335]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s629, amount_s629);
[L4336]  COND TRUE   revert
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND TRUE   choice == 31
[L6279]              gas := gas - 21000;
[L6280]  COND FALSE  !(gas >= 0)
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:36,485 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:36,485 INFO  L82        PathProgramCache]: Analyzing trace with hash -1154685138, now seen corresponding path program 1 times
[2020-11-25 10:52:36,486 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:36,507 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:52:36,619 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 10:52:36,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:52:36,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 10:52:36,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:52:36,620 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 10:52:36,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 10:52:36,620 INFO  L87              Difference]: Start difference. First operand 4526 states and 5100 transitions. cyclomatic complexity: 583 Second operand 14 states.
[2020-11-25 10:52:38,613 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:52:38,613 INFO  L93              Difference]: Finished difference Result 4585 states and 5165 transitions.
[2020-11-25 10:52:38,613 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 10:52:38,613 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4585 states and 5165 transitions.
[2020-11-25 10:52:38,621 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:52:38,630 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4585 states to 4585 states and 5165 transitions.
[2020-11-25 10:52:38,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 829
[2020-11-25 10:52:38,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 829
[2020-11-25 10:52:38,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4585 states and 5165 transitions.
[2020-11-25 10:52:38,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:52:38,632 INFO  L728         BuchiCegarLoop]: Abstraction has 4585 states and 5165 transitions.
[2020-11-25 10:52:38,635 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4585 states and 5165 transitions.
[2020-11-25 10:52:38,647 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4585 to 3350.
[2020-11-25 10:52:38,647 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3350 states.
[2020-11-25 10:52:38,650 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3350 states to 3350 states and 3664 transitions.
[2020-11-25 10:52:38,650 INFO  L751         BuchiCegarLoop]: Abstraction has 3350 states and 3664 transitions.
[2020-11-25 10:52:38,650 INFO  L631         BuchiCegarLoop]: Abstraction has 3350 states and 3664 transitions.
[2020-11-25 10:52:38,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 10:52:38,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3350 states and 3664 transitions.
[2020-11-25 10:52:38,653 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:52:38,653 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:52:38,653 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:52:38,655 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:52:38,655 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ZildFinanceCoin0 := false;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]     CALL        call main();
[L6478]              assume null == 0;
[L6479]  CALL        call this := FreshRefGenerator__success();
[L3693]              havoc newRef;
[L3694]              assume Alloc[newRef] == false;
[L3695]              Alloc[newRef] := true;
[L3696]              assume newRef != null;
[L6479]  RET         call this := FreshRefGenerator__success();
[L6480]              assume now >= 0;
[L6481]              assume DType[this] == ZildFinanceCoin;
[L6482]              assume msgvalue_MSG == 0;
[L6483]              gas := gas - 53000;
[L6484]  CALL        call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L6485]              assume !revert && gas >= 0;
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND FALSE  !(choice == 27)
[L6309]  COND FALSE  !(choice == 26)
[L6315]  COND FALSE  !(choice == 25)
[L6322]  COND FALSE  !(choice == 24)
[L6329]  COND FALSE  !(choice == 23)
[L6335]  COND FALSE  !(choice == 22)
[L6341]  COND FALSE  !(choice == 21)
[L6347]  COND FALSE  !(choice == 20)
[L6353]  COND FALSE  !(choice == 19)
[L6359]  COND FALSE  !(choice == 18)
[L6365]  COND FALSE  !(choice == 17)
[L6371]  COND FALSE  !(choice == 16)
[L6377]  COND FALSE  !(choice == 15)
[L6383]  COND FALSE  !(choice == 14)
[L6389]  COND FALSE  !(choice == 13)
[L6395]  COND FALSE  !(choice == 12)
[L6401]  COND FALSE  !(choice == 11)
[L6407]  COND FALSE  !(choice == 10)
[L6413]  COND FALSE  !(choice == 9)
[L6419]  COND FALSE  !(choice == 8)
[L6425]  COND FALSE  !(choice == 7)
[L6431]  COND FALSE  !(choice == 6)
[L6437]  COND FALSE  !(choice == 5)
[L6444]  COND FALSE  !(choice == 4)
[L6450]  COND FALSE  !(choice == 3)
[L6456]  COND FALSE  !(choice == 2)
[L6462]  COND TRUE   choice == 1
[L6463]              gas := gas - 21000;
[L6464]  COND TRUE   gas >= 0
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call freezeAccount~address~bool_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L1610]              havoc __exception;
[L1611]              revert := false;
[L1612]  COND FALSE  !(__exception)
[L1649]  CALL        call freezeAccount~address~bool_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L4817]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]  COND FALSE  !(!(msgsender_MSG == _owner_Ownable[this]))
[L4817]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L4821]              __var_30 := null;
[L4822]  COND TRUE   _target_s1036 != null
[L4823]              frozenAccount_ZildFinanceCoin[this][_target_s1036] := _bool_s1036;
[L4824]              assert { :EventEmitted "FrozenFunds_ZildFinanceCoin" } true;
[L1649]  RET         call freezeAccount~address~bool_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L1650]              assume !revert && gas >= 0;
[L6466]  RET         call freezeAccount~address~bool_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

Loop:
[L6488]  CALL        call CorralChoice_ZildFinanceCoin(this);
[L6218]              havoc msgsender_MSG;
[L6219]              havoc msgvalue_MSG;
[L6220]              havoc choice;
[L6221]              havoc __ret_0_owner;
[L6222]              havoc __ret_0_isOwner;
[L6223]              havoc newOwner_s267;
[L6224]              havoc account_s586;
[L6225]              havoc __ret_0_balanceOf;
[L6226]              havoc to_s629;
[L6227]              havoc amount_s629;
[L6228]              havoc __ret_0_transfer;
[L6229]              havoc from_s723;
[L6230]              havoc to_s723;
[L6231]              havoc __ret_0_allowance;
[L6232]              havoc to_s742;
[L6233]              havoc amount_s742;
[L6234]              havoc __ret_0_approve;
[L6235]              havoc from_s813;
[L6236]              havoc to_s813;
[L6237]              havoc amount_s813;
[L6238]              havoc __ret_0_transferFrom;
[L6239]              havoc __ret_0_name;
[L6240]              havoc __ret_0_symbol;
[L6241]              havoc __ret_0_decimals;
[L6242]              havoc __ret_0_totalSupply;
[L6243]              havoc __ret_0_allowBurn;
[L6244]              havoc __ret_0_tokenDestroyed;
[L6245]              havoc __ret_0_FounderAllocation;
[L6246]              havoc __ret_0_FounderLockupAmount;
[L6247]              havoc __ret_0_FounderLockupCliff;
[L6248]              havoc __ret_0_FounderReleaseInterval;
[L6249]              havoc __ret_0_FounderReleaseAmount;
[L6250]              havoc __ret_0_MarketingAllocation;
[L6251]              havoc __ret_0_FurnaceAllocation;
[L6252]              havoc __ret_0_founder;
[L6253]              havoc __ret_0_founderLockupStartTime;
[L6254]              havoc __ret_0_founderReleasedAmount;
[L6255]              havoc arg1039_s0;
[L6256]              havoc __ret_0_frozenAccount;
[L6257]              havoc _founder_s499;
[L6258]              havoc _marketing_s499;
[L6259]              havoc _value_s645;
[L6260]              havoc __ret_0_burn;
[L6261]              havoc _founder_s929;
[L6262]              havoc minter_s970;
[L6263]              havoc furnace_s1008;
[L6264]              havoc _target_s1036;
[L6265]              havoc _bool_s1036;
[L6266]              havoc tmpNow;
[L6267]              havoc gas;
[L6268]              assume gas > 4000000 && gas <= 8000000;
[L6269]              tmpNow := now;
[L6270]              havoc now;
[L6271]              assume now > tmpNow;
[L6272]              assume msgsender_MSG != null;
[L6273]              assume DType[msgsender_MSG] != SafeMath;
[L6274]              assume DType[msgsender_MSG] != Ownable;
[L6275]              assume DType[msgsender_MSG] != IERC20;
[L6276]              assume DType[msgsender_MSG] != ZildFinanceCoin;
[L6277]              Alloc[msgsender_MSG] := true;
[L6278]  COND FALSE  !(choice == 31)
[L6284]  COND FALSE  !(choice == 30)
[L6290]  COND FALSE  !(choice == 29)
[L6296]  COND FALSE  !(choice == 28)
[L6302]  COND TRUE   choice == 27
[L6303]              gas := gas - 21000;
[L6304]  COND TRUE   gas >= 0
[L6305]              assume amount_s629 >= 0 && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6306]              assume msgvalue_MSG == 0;
[L6307]  CALL        call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L6488]  RET         call CorralChoice_ZildFinanceCoin(this);

[2020-11-25 10:52:38,658 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:38,659 INFO  L82        PathProgramCache]: Analyzing trace with hash -2123274295, now seen corresponding path program 1 times
[2020-11-25 10:52:38,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:38,678 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:38,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:38,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:38,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -1636026805, now seen corresponding path program 1 times
[2020-11-25 10:52:38,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:38,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:38,776 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:38,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:52:38,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 925686147, now seen corresponding path program 1 times
[2020-11-25 10:52:38,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:52:38,806 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:38,826 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 10:52:39,201 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification that was a NOOP. DAG size: 340
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4273 to 8543
[2020-11-25 10:52:39,382 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification that was a NOOP. DAG size: 266
[2020-11-25 10:52:39,868 WARN  L188               SmtUtils]: Spent 483.00 ms on a formula simplification. DAG size of input: 319 DAG size of output: 301
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 10:52:40,195 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 404
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 10:52:40,345 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification that was a NOOP. DAG size: 319
[2020-11-25 10:52:40,493 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 319
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 10:52:40,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 10:52:40,918 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 211
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 10:52:41,099 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 261
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
[2020-11-25 10:52:41,410 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 248 DAG size of output: 243
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 10:52:41,576 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification that was a NOOP. DAG size: 259
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 10:52:41,884 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 215
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 10:52:42,203 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification that was a NOOP. DAG size: 427
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 10:52:42,480 WARN  L188               SmtUtils]: Spent 271.00 ms on a formula simplification that was a NOOP. DAG size: 379
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #4: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 10:52:42,800 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 339 DAG size of output: 248
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 10:52:43,044 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification that was a NOOP. DAG size: 376
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 10:52:43,211 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification that was a NOOP. DAG size: 299
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 10:52:43,463 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 340
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 10:52:43,702 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 266
[2020-11-25 10:52:44,171 WARN  L188               SmtUtils]: Spent 466.00 ms on a formula simplification. DAG size of input: 318 DAG size of output: 301
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 10:52:44,449 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification that was a NOOP. DAG size: 404
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 10:52:44,595 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 319
[2020-11-25 10:52:47,980 WARN  L188               SmtUtils]: Spent 3.38 s on a formula simplification. DAG size of input: 893 DAG size of output: 878
Garbage collection #1: 367 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 367 to 733
Garbage collection #2: 733 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 733 to 1459
Garbage collection #3: 1459 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1459 to 2917
Garbage collection #4: 2917 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2917 to 5827
Garbage collection #5: 5827 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5827 to 11633
Garbage collection #6: 11633 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11633 to 23251
Garbage collection #7: 23251 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 23251 to 46499
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 10:52:48,442 WARN  L188               SmtUtils]: Spent 419.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 289
[2020-11-25 10:52:48,865 WARN  L188               SmtUtils]: Spent 392.00 ms on a formula simplification that was a NOOP. DAG size: 451
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 10:52:49,048 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification that was a NOOP. DAG size: 289
[2020-11-25 10:52:49,938 WARN  L188               SmtUtils]: Spent 889.00 ms on a formula simplification. DAG size of input: 453 DAG size of output: 452
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 10:52:50,377 WARN  L188               SmtUtils]: Spent 433.00 ms on a formula simplification that was a NOOP. DAG size: 448
[2020-11-25 10:52:50,397 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:50,421 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 10:52:50,431 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:52:50 BasicIcfg
[2020-11-25 10:52:50,431 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 10:52:50,431 INFO  L168              Benchmark]: Toolchain (without parser) took 47801.55 ms. Allocated memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: 1.9 GB). Free memory was 929.8 MB in the beginning and 889.5 MB in the end (delta: 40.3 MB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,432 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,432 INFO  L168              Benchmark]: Boogie Preprocessor took 104.49 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,432 INFO  L168              Benchmark]: UtopiaSpecLang took 71.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,432 INFO  L168              Benchmark]: Boogie Printer took 22.72 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,433 INFO  L168              Benchmark]: RCFGBuilder took 902.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 752.7 MB in the end (delta: 155.7 MB). Peak memory consumption was 155.7 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,433 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.30 ms. Allocated memory is still 1.0 GB. Free memory was 752.7 MB in the beginning and 749.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,433 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1343.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 749.1 MB in the beginning and 776.7 MB in the end (delta: -27.7 MB). Peak memory consumption was 173.2 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,434 INFO  L168              Benchmark]: BlockEncodingV2 took 171.95 ms. Allocated memory is still 1.2 GB. Free memory was 776.7 MB in the beginning and 689.7 MB in the end (delta: 87.0 MB). Peak memory consumption was 87.0 MB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,434 INFO  L168              Benchmark]: BuchiAutomizer took 45140.79 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.7 GB). Free memory was 689.7 MB in the beginning and 889.5 MB in the end (delta: -199.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 10:52:50,437 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5976 locations, 10094 edges
  - StatisticsResult: Encoded RCFG
    5938 locations, 9997 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 104.49 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.72 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 902.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 752.7 MB in the end (delta: 155.7 MB). Peak memory consumption was 155.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.30 ms. Allocated memory is still 1.0 GB. Free memory was 752.7 MB in the beginning and 749.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1343.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 749.1 MB in the beginning and 776.7 MB in the end (delta: -27.7 MB). Peak memory consumption was 173.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 171.95 ms. Allocated memory is still 1.2 GB. Free memory was 776.7 MB in the beginning and 689.7 MB in the end (delta: 87.0 MB). Peak memory consumption was 87.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 45140.79 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.7 GB). Free memory was 689.7 MB in the beginning and 889.5 MB in the end (delta: -199.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2555 locations, 3154 edges
  - StatisticsResult: BuchiProgram size
    5976 locations, 10094 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.12 modules have a trivial ranking function, the largest among these consists of 32 locations. The remainder module has 3350 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 45.0s and 13 iterations.  TraceHistogramMax:2. Analysis of lassos took 13.8s. Construction of modules took 23.9s. BÃ¼chi inclusion checks took 5.7s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 12 MinimizatonAttempts, 7307 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 7078 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 64283 SDtfs, 63786 SDslu, 172449 SDs, 0 SdLazy, 217129 SolverSat, 9935 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 23.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(99800000000000000000000001) = (new ZildFinanceCoin)({from : 99800000000000000000000010, _founder : 99800000000000000000000009, _marketing : 99800000000000000000000002});
[L673]               havoc __exception;
[L674]               revert := false;
[L675]   COND FALSE  !(__exception)
[L712]   CALL        call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4185]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3952]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]              assume msgsender_MSG != null;
[L3935]              Balance[this] := 0;
[L3936]              _owner_Ownable[this] := null;
[L3938]              _owner_Ownable[this] := msgsender_MSG;
[L3939]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3952]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3953]  COND FALSE  !(revert)
[L4185]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]              assume msgsender_MSG != null;
[L4025]              Balance[this] := 0;
[L4039]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4040]  COND FALSE  !(revert)
[L4189]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4190]  COND FALSE  !(revert)
[L4193]  CALL        call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4109]              assume msgsender_MSG != null;
[L4110]              Balance[this] := 0;
[L4111]              name_ZildFinanceCoin[this] := -1602093786;
[L4112]              symbol_ZildFinanceCoin[this] := -1963254244;
[L4113]              decimals_ZildFinanceCoin[this] := 18;
[L4114]              totalSupply_ZildFinanceCoin[this] := 99800000000000000000000000;
[L4115]              allowBurn_ZildFinanceCoin[this] := 21000000000000000000000000;
[L4116]              tokenDestroyed_ZildFinanceCoin[this] := 0;
[L4117]              FounderAllocation_ZildFinanceCoin[this] := 14970000000000000000000000;
[L4118]              FounderLockupAmount_ZildFinanceCoin[this] := 9980000000000000000000000;
[L4119]              FounderLockupCliff_ZildFinanceCoin[this] := 365;
[L4120]              FounderReleaseInterval_ZildFinanceCoin[this] := 30;
[L4121]              FounderReleaseAmount_ZildFinanceCoin[this] := 207916000000000000000000;
[L4122]              MarketingAllocation_ZildFinanceCoin[this] := 3490000000000000000000000;
[L4123]              FurnaceAllocation_ZildFinanceCoin[this] := 1500000000000000000000000;
[L4124]              __var_9 := null;
[L4125]              founder_ZildFinanceCoin[this] := null;
[L4126]              founderLockupStartTime_ZildFinanceCoin[this] := 0;
[L4127]              founderReleasedAmount_ZildFinanceCoin[this] := 0;
[L4128]              _balances_ZildFinanceCoin[this] := zeroRefintArr();
[L4129]              sum__balances0[this] := 0;
[L4130]              _allowances_ZildFinanceCoin[this] := zeroRefRefintArr();
[L4131]              sum__allowances1[this] := 0;
[L4132]              frozenAccount_ZildFinanceCoin[this] := zeroRefboolArr();
[L4134]              __var_5 := null;
[L4135]  COND FALSE  !(!(_founder_s499 != null))
[L4139]              __var_6 := null;
[L4140]  COND FALSE  !(!(_marketing_s499 != null))
[L4144]              founder_ZildFinanceCoin[this] := _founder_s499;
[L4145]              founderLockupStartTime_ZildFinanceCoin[this] := now;
[L4146]              __var_7 := this;
[L4147]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][this];
[L4148]              _balances_ZildFinanceCoin[this][this] := totalSupply_ZildFinanceCoin[this];
[L4149]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][this];
[L4150]              __var_8 := this;
[L4151]  CALL        call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4601]              __var_19 := null;
[L4602]  COND FALSE  !(!(from_s861 != null))
[L4606]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L3792]  COND FALSE  !(!(b_s69 <= a_s69))
[L3796]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3797]              __ret_0_ := c_s69;
[L4606]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][from_s861], amount_s861, -118631816);
[L4607]  COND FALSE  !(revert)
[L4610]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][from_s861];
[L4611]              _balances_ZildFinanceCoin[this][from_s861] := __var_20;
[L4612]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][from_s861];
[L4613]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L3746]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3747]  COND FALSE  !(!(c_s26 >= a_s26))
[L3751]              __ret_0_ := c_s26;
[L4613]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ZildFinanceCoin[this][to_s861], amount_s861);
[L4614]  COND FALSE  !(revert)
[L4617]              sum__balances0[this] := sum__balances0[this] - _balances_ZildFinanceCoin[this][to_s861];
[L4618]              _balances_ZildFinanceCoin[this][to_s861] := __var_21;
[L4619]              sum__balances0[this] := sum__balances0[this] + _balances_ZildFinanceCoin[this][to_s861];
[L4620]              assert { :EventEmitted "Transfer_ZildFinanceCoin" } true;
[L4151]  RET         call _transfer~address~address~uint256_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, this, _marketing_s499, MarketingAllocation_ZildFinanceCoin[this]);
[L4152]  COND FALSE  !(revert)
[L4193]  RET         call ZildFinanceCoin_ZildFinanceCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L4194]  COND FALSE  !(revert)
[L712]   RET         call ZildFinanceCoin_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
[L713]               assume !revert && gas >= 0;
[L6484]  RET         call ZildFinanceCoin_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _founder_s499, _marketing_s499);
ZildFinanceCoin(99800000000000000000000001).freezeAccount~address~bool.gas(3979002)({from : 99800000000000000000000010, _target : 99800000000000000000000003, _bool : true});
[L1610]              havoc __exception;
[L1611]              revert := false;
[L1612]  COND FALSE  !(__exception)
[L1649]  CALL        call freezeAccount~address~bool_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L4817]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6010]  COND FALSE  !(!(msgsender_MSG == _owner_Ownable[this]))
[L4817]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L4821]              __var_30 := null;
[L4822]  COND TRUE   _target_s1036 != null
[L4823]              frozenAccount_ZildFinanceCoin[this][_target_s1036] := _bool_s1036;
[L4824]              assert { :EventEmitted "FrozenFunds_ZildFinanceCoin" } true;
[L1649]  RET         call freezeAccount~address~bool_ZildFinanceCoin__success(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
[L1650]              assume !revert && gas >= 0;
[L6466]  RET         call freezeAccount~address~bool_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, _target_s1036, _bool_s1036);
ZildFinanceCoin(99800000000000000000000001).transfer~address~uint256.gas(3979003)({from : 99800000000000000000000003, to : 99800000000000000000000003, amount : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);

Loop:
ZildFinanceCoin(99800000000000000000000001).transfer~address~uint256.gas(3979001)({from : 99800000000000000000000003, to : 99800000000000000000000003, amount : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s629 && amount_s629 <= _balances_ZildFinanceCoin[this][msgsender_MSG]) && amount_s629 >= 0) && amount_s629 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][to_s629] >= 0) && _balances_ZildFinanceCoin[this][to_s629] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZildFinanceCoin[this][msgsender_MSG] >= 0) && _balances_ZildFinanceCoin[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZildFinanceCoin0 := true;
[L2]                 call_transfer_ZildFinanceCoin0 := false;
[L2]                 revert := revert_hold;
[L924]               havoc __exception;
[L925]               revert := false;
[L926]   COND TRUE   __exception
[L927]               __tmp__Balance := Balance;
[L928]               __tmp__DType := DType;
[L929]               __tmp__Alloc := Alloc;
[L930]               __tmp__balance_ADDR := balance_ADDR;
[L931]               __tmp__M_Ref_int := M_Ref_int;
[L932]               __tmp__sum__balances0 := sum__balances0;
[L933]               __tmp__alloc__allowances_ZildFinanceCoin_lvl0 := alloc__allowances_ZildFinanceCoin_lvl0;
[L934]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L935]               __tmp__sum__allowances1 := sum__allowances1;
[L936]               __tmp__M_Ref_bool := M_Ref_bool;
[L937]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L938]               __tmp__Length := Length;
[L939]               __tmp__now := now;
[L940]               __tmp___owner_Ownable := _owner_Ownable;
[L941]               __tmp__name_ZildFinanceCoin := name_ZildFinanceCoin;
[L942]               __tmp__symbol_ZildFinanceCoin := symbol_ZildFinanceCoin;
[L943]               __tmp__decimals_ZildFinanceCoin := decimals_ZildFinanceCoin;
[L944]               __tmp__totalSupply_ZildFinanceCoin := totalSupply_ZildFinanceCoin;
[L945]               __tmp__allowBurn_ZildFinanceCoin := allowBurn_ZildFinanceCoin;
[L946]               __tmp__tokenDestroyed_ZildFinanceCoin := tokenDestroyed_ZildFinanceCoin;
[L947]               __tmp__FounderAllocation_ZildFinanceCoin := FounderAllocation_ZildFinanceCoin;
[L948]               __tmp__FounderLockupAmount_ZildFinanceCoin := FounderLockupAmount_ZildFinanceCoin;
[L949]               __tmp__FounderLockupCliff_ZildFinanceCoin := FounderLockupCliff_ZildFinanceCoin;
[L950]               __tmp__FounderReleaseInterval_ZildFinanceCoin := FounderReleaseInterval_ZildFinanceCoin;
[L951]               __tmp__FounderReleaseAmount_ZildFinanceCoin := FounderReleaseAmount_ZildFinanceCoin;
[L952]               __tmp__MarketingAllocation_ZildFinanceCoin := MarketingAllocation_ZildFinanceCoin;
[L953]               __tmp__FurnaceAllocation_ZildFinanceCoin := FurnaceAllocation_ZildFinanceCoin;
[L954]               __tmp__founder_ZildFinanceCoin := founder_ZildFinanceCoin;
[L955]               __tmp__founderLockupStartTime_ZildFinanceCoin := founderLockupStartTime_ZildFinanceCoin;
[L956]               __tmp__founderReleasedAmount_ZildFinanceCoin := founderReleasedAmount_ZildFinanceCoin;
[L957]               __tmp___balances_ZildFinanceCoin := _balances_ZildFinanceCoin;
[L958]               __tmp___allowances_ZildFinanceCoin := _allowances_ZildFinanceCoin;
[L959]               __tmp__frozenAccount_ZildFinanceCoin := frozenAccount_ZildFinanceCoin;
[L960]   CALL        call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L4322]              __var_12 := null;
[L4323]  COND FALSE  !(!(to_s629 != null))
[L4327]  COND TRUE   !!__tmp__frozenAccount_ZildFinanceCoin[this][msgsender_MSG]
[L4328]              revert := true;
[L960]   RET         call __ret_0_ := transfer~address~uint256_ZildFinanceCoin__fail(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);
[L961]               assume revert || gas < 0;
[L6307]  RET         call __ret_0_transfer := transfer~address~uint256_ZildFinanceCoin(this, msgsender_MSG, msgvalue_MSG, to_s629, amount_s629);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
