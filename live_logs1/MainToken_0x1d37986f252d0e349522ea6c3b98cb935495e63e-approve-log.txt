This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:27:28,861 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:27:28,862 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:27:28,873 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:27:28,873 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:27:28,875 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:27:28,876 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:27:28,878 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:27:28,879 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:27:28,880 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:27:28,880 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:27:28,881 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:27:28,882 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:27:28,882 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:27:28,883 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:27:28,884 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:27:28,885 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:27:28,886 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:27:28,887 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:27:28,889 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:27:28,889 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:27:28,890 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:27:28,892 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:27:28,892 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:27:28,892 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:27:28,893 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:27:28,893 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:27:28,894 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:27:28,894 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:27:28,895 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:27:28,895 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:27:28,896 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:27:28,896 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:27:28,897 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:27:28,897 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:27:28,897 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:27:28,898 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:27:28,898 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:27:28,898 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:27:28,899 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:27:28,899 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:27:28,900 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:27:28,908 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:27:28,908 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:27:28,909 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:27:28,909 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:27:28,909 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:27:28,909 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:27:28,910 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:27:28,910 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:27:28,911 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:27:28,911 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:27:28,912 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:27:28,912 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:27:28,912 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:27:28,912 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:27:28,935 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:27:28,950 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:27:28,954 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:27:28,956 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:27:28,957 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:27:28,958 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl
[2020-11-24 21:27:28,958 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl'
[2020-11-24 21:27:29,140 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:27:29,142 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:27:29,142 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:27:29,142 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:27:29,142 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:27:29,159 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,161 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,214 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,215 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,257 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,283 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,308 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,334 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:27:29,335 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:27:29,335 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:27:29,337 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:27:29,341 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/1) ...
[2020-11-24 21:27:29,375 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:27:29,381 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:27:29,389 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:27:29,396 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s379 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-24 21:27:29,400 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s379]==_value_s379 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-24 21:27:29,410 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:27:29,410 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:27:29,436 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:27:29 PropertyContainer
[2020-11-24 21:27:29,436 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:27:29,436 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:27:29,437 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:27:29,437 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:27:29,438 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/2) ...
[2020-11-24 21:27:29,438 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:27:29,438 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:27:29,471 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:27:29" (2/2) ...
[2020-11-24 21:27:29,471 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:27:29,471 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:27:29,472 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:27:29,472 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:27:29,472 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/2) ...
[2020-11-24 21:27:29,528 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:27:29,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:27:29,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:27:29,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:27:29,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:27:29,528 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:27:29,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,529 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:27:29,530 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:27:29,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:27:29,530 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:27:29,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:27:29,530 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:27:29,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:27:29,530 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:27:29,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:27:29,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:27:29,531 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:27:29,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:27:29,532 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:27:29,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:27:29,532 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:27:29,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:27:29,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:27:29,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:27:29,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:27:29,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:27:29,533 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:27:29,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:27:29,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:27:29,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:27:29,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:27:29,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:27:29,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:27:29,535 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:27:29,535 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:27:29,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:27:29,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:27:29,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:27:29,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:27:29,536 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:27:29,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:27:29,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:27:29,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:27:29,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:27:29,537 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:27:29,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:27:29,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:27:29,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:27:29,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:27:29,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:27:29,538 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:27:29,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:27:29,539 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:27:29,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:27:29,539 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:27:29,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:27:29,539 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:27:29,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:27:29,539 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:27:29,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:27:29,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:27:29,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:27:29,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:27:29,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:27:29,540 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:27:29,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:27:29,541 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:27:29,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:27:29,541 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:27:29,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:27:29,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:27:29,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:27:29,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:27:29,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:27:29,541 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:27:29,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:27:29,542 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:27:29,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:27:29,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:27:29,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:27:29,546 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:27:29,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:27:29,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:27:29,549 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,550 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:27:29,551 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:27:29,552 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:27:29,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:27:29,554 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:27:29,555 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:27:29,556 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:27:29,557 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:27:29,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:27:29,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:27:29,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:27:29,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:27:29,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:27:29,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:27:29,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:27:29,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:27:29,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:27:29,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:27:29,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:27:29,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:27:29,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:27:29,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:27:29,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:27:29,572 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:27:29,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:27:30,335 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:27:30,335 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:27:30,335 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:27:30,785 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:27:31,155 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:27:31,155 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:27:31,158 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:27:31 BoogieIcfgContainer
[2020-11-24 21:27:31,158 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:27:29" (2/2) ...
[2020-11-24 21:27:31,158 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:27:31,159 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5634737d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:27:31, skipping insertion in model container
[2020-11-24 21:27:31,159 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:27:31,159 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:27:31,159 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:27:31,160 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:27:31,160 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/3) ...
[2020-11-24 21:27:31,160 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@759c2a95 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:27:31, skipping insertion in model container
[2020-11-24 21:27:31,160 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:27:29" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:27:31,196 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:27:31 NWAContainer
[2020-11-24 21:27:31,196 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:27:31,196 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:27:31,196 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:27:31,197 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:27:31,198 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:27:31" (3/4) ...
[2020-11-24 21:27:31,198 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@77ea76c9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:27:31, skipping insertion in model container
[2020-11-24 21:27:31,199 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:27:31" (4/4) ...
[2020-11-24 21:27:31,201 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:27:31,210 INFO  L110   BuchiProductObserver]: Initial RCFG 5260 locations, 7414 edges
[2020-11-24 21:27:31,210 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:27:31,225 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:27:35,446 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:27:35,463 INFO  L110   BuchiProductObserver]: BuchiProgram size 13184 locations, 24271 edges
[2020-11-24 21:27:35,463 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:27:35 BoogieIcfgContainer
[2020-11-24 21:27:35,463 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:27:35,463 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:27:35,463 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:27:35,465 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:27:35,465 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:27:35" (1/1) ...
[2020-11-24 21:27:35,680 INFO  L313           BlockEncoder]: Initial Icfg 13184 locations, 24271 edges
[2020-11-24 21:27:35,680 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:27:35,681 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:27:35,681 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:27:35,681 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:27:35,704 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:27:35,724 INFO  L70        RemoveSinkStates]: Removed 158 edges and 105 locations by removing sink states
[2020-11-24 21:27:35,747 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:27:35,754 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:27:35,762 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:27:35,762 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:27:35,768 INFO  L313           BlockEncoder]: Encoded RCFG 12982 locations, 23709 edges
[2020-11-24 21:27:35,768 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:27:35 BasicIcfg
[2020-11-24 21:27:35,769 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:27:35,769 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:27:35,769 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:27:35,770 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:27:35,771 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,771 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:27:29" (1/6) ...
[2020-11-24 21:27:35,772 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7af1bd4f and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:27:35, skipping insertion in model container
[2020-11-24 21:27:35,772 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,772 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:27:29" (2/6) ...
[2020-11-24 21:27:35,772 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7af1bd4f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:27:35, skipping insertion in model container
[2020-11-24 21:27:35,772 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,772 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:27:31" (3/6) ...
[2020-11-24 21:27:35,772 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7af1bd4f and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:27:35, skipping insertion in model container
[2020-11-24 21:27:35,772 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,773 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:27:31" (4/6) ...
[2020-11-24 21:27:35,773 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7af1bd4f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:27:35, skipping insertion in model container
[2020-11-24 21:27:35,773 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,773 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:27:35" (5/6) ...
[2020-11-24 21:27:35,773 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7af1bd4f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:27:35, skipping insertion in model container
[2020-11-24 21:27:35,773 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:27:35,773 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:27:35" (6/6) ...
[2020-11-24 21:27:35,774 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_approve.bpl_BEv2
[2020-11-24 21:27:35,804 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:27:35,805 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:27:35,805 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:27:35,805 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:27:35,805 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:27:35,805 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:27:35,805 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:27:35,805 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:27:35,805 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:27:35,886 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12982 states.
[2020-11-24 21:27:36,035 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:36,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:36,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:36,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:36,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:36,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:27:36,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12982 states.
[2020-11-24 21:27:36,087 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:36,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:36,087 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:36,089 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:36,089 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND TRUE   revert
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND TRUE   choice == 38
[L14132]              gas := gas - 21000;
[L14133]  COND FALSE  !(gas >= 0)
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:36,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:36,104 INFO  L82        PathProgramCache]: Analyzing trace with hash 1911384728, now seen corresponding path program 1 times
[2020-11-24 21:27:36,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:36,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:36,163 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:27:36,165 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:36,165 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:27:36,560 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:36,569 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:27:36,569 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:27:36,570 INFO  L87              Difference]: Start difference. First operand 12982 states. Second operand 4 states.
[2020-11-24 21:27:37,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:37,900 INFO  L93              Difference]: Finished difference Result 8082 states and 9483 transitions.
[2020-11-24 21:27:37,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:27:37,902 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8082 states and 9483 transitions.
[2020-11-24 21:27:37,936 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:37,975 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8082 states to 8078 states and 9475 transitions.
[2020-11-24 21:27:37,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:27:37,979 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-11-24 21:27:37,979 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8078 states and 9475 transitions.
[2020-11-24 21:27:37,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:37,998 INFO  L728         BuchiCegarLoop]: Abstraction has 8078 states and 9475 transitions.
[2020-11-24 21:27:38,019 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8078 states and 9475 transitions.
[2020-11-24 21:27:38,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8078 to 8078.
[2020-11-24 21:27:38,137 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8078 states.
[2020-11-24 21:27:38,155 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8078 states to 8078 states and 9475 transitions.
[2020-11-24 21:27:38,156 INFO  L751         BuchiCegarLoop]: Abstraction has 8078 states and 9475 transitions.
[2020-11-24 21:27:38,156 INFO  L631         BuchiCegarLoop]: Abstraction has 8078 states and 9475 transitions.
[2020-11-24 21:27:38,156 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:27:38,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8078 states and 9475 transitions.
[2020-11-24 21:27:38,173 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:38,173 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:38,173 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:38,176 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:38,176 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND TRUE   revert
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:38,181 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:38,181 INFO  L82        PathProgramCache]: Analyzing trace with hash -392235165, now seen corresponding path program 1 times
[2020-11-24 21:27:38,183 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:38,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:38,235 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:27:38,235 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:38,235 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:27:38,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:38,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:27:38,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:27:38,237 INFO  L87              Difference]: Start difference. First operand 8078 states and 9475 transitions. cyclomatic complexity: 1415 Second operand 3 states.
[2020-11-24 21:27:38,435 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:38,435 INFO  L93              Difference]: Finished difference Result 9534 states and 10923 transitions.
[2020-11-24 21:27:38,435 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:27:38,436 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9534 states and 10923 transitions.
[2020-11-24 21:27:38,462 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:27:38,508 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9534 states to 9534 states and 10923 transitions.
[2020-11-24 21:27:38,508 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2233
[2020-11-24 21:27:38,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2233
[2020-11-24 21:27:38,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9534 states and 10923 transitions.
[2020-11-24 21:27:38,520 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:38,520 INFO  L728         BuchiCegarLoop]: Abstraction has 9534 states and 10923 transitions.
[2020-11-24 21:27:38,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9534 states and 10923 transitions.
[2020-11-24 21:27:38,617 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9534 to 8438.
[2020-11-24 21:27:38,617 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8438 states.
[2020-11-24 21:27:38,628 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8438 states to 8438 states and 9561 transitions.
[2020-11-24 21:27:38,628 INFO  L751         BuchiCegarLoop]: Abstraction has 8438 states and 9561 transitions.
[2020-11-24 21:27:38,628 INFO  L631         BuchiCegarLoop]: Abstraction has 8438 states and 9561 transitions.
[2020-11-24 21:27:38,628 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:27:38,628 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8438 states and 9561 transitions.
[2020-11-24 21:27:38,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:38,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:38,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:38,647 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:38,647 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND TRUE   !!initialized_MainToken[this]
[L9406]               revert := true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND TRUE   revert
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND TRUE   revert
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:38,657 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:38,658 INFO  L82        PathProgramCache]: Analyzing trace with hash -213094436, now seen corresponding path program 1 times
[2020-11-24 21:27:38,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:38,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:39,296 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:27:39,296 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:39,296 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:27:39,297 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:39,297 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:27:39,298 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:27:39,298 INFO  L87              Difference]: Start difference. First operand 8438 states and 9561 transitions. cyclomatic complexity: 1141 Second operand 3 states.
[2020-11-24 21:27:39,424 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:39,424 INFO  L93              Difference]: Finished difference Result 9528 states and 10757 transitions.
[2020-11-24 21:27:39,424 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:27:39,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9528 states and 10757 transitions.
[2020-11-24 21:27:39,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:27:39,471 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9528 states to 9188 states and 10361 transitions.
[2020-11-24 21:27:39,471 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2110
[2020-11-24 21:27:39,472 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2139
[2020-11-24 21:27:39,473 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9188 states and 10361 transitions.
[2020-11-24 21:27:39,481 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:39,481 INFO  L728         BuchiCegarLoop]: Abstraction has 9188 states and 10361 transitions.
[2020-11-24 21:27:39,488 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9188 states and 10361 transitions.
[2020-11-24 21:27:39,546 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9188 to 8497.
[2020-11-24 21:27:39,546 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8497 states.
[2020-11-24 21:27:39,556 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8497 states to 8497 states and 9488 transitions.
[2020-11-24 21:27:39,556 INFO  L751         BuchiCegarLoop]: Abstraction has 8497 states and 9488 transitions.
[2020-11-24 21:27:39,556 INFO  L631         BuchiCegarLoop]: Abstraction has 8497 states and 9488 transitions.
[2020-11-24 21:27:39,556 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:27:39,556 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8497 states and 9488 transitions.
[2020-11-24 21:27:39,565 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:27:39,565 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:39,565 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:39,569 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:39,569 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:39,578 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:39,578 INFO  L82        PathProgramCache]: Analyzing trace with hash -246537506, now seen corresponding path program 1 times
[2020-11-24 21:27:39,579 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:39,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:40,461 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 45 proven. 0 refuted. 0 times theorem prover too weak. 9778 trivial. 0 not checked.
[2020-11-24 21:27:40,461 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:40,462 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:27:40,463 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:40,463 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:27:40,463 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:27:40,464 INFO  L87              Difference]: Start difference. First operand 8497 states and 9488 transitions. cyclomatic complexity: 1009 Second operand 16 states.
[2020-11-24 21:27:48,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:48,172 INFO  L93              Difference]: Finished difference Result 8673 states and 9699 transitions.
[2020-11-24 21:27:48,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:27:48,173 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8673 states and 9699 transitions.
[2020-11-24 21:27:48,188 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:27:48,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8673 states to 8673 states and 9699 transitions.
[2020-11-24 21:27:48,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2109
[2020-11-24 21:27:48,213 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2109
[2020-11-24 21:27:48,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8673 states and 9699 transitions.
[2020-11-24 21:27:48,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:48,220 INFO  L728         BuchiCegarLoop]: Abstraction has 8673 states and 9699 transitions.
[2020-11-24 21:27:48,227 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8673 states and 9699 transitions.
[2020-11-24 21:27:48,286 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8673 to 8626.
[2020-11-24 21:27:48,286 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8626 states.
[2020-11-24 21:27:48,296 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8626 states to 8626 states and 9638 transitions.
[2020-11-24 21:27:48,296 INFO  L751         BuchiCegarLoop]: Abstraction has 8626 states and 9638 transitions.
[2020-11-24 21:27:48,296 INFO  L631         BuchiCegarLoop]: Abstraction has 8626 states and 9638 transitions.
[2020-11-24 21:27:48,296 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:27:48,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8626 states and 9638 transitions.
[2020-11-24 21:27:48,305 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:27:48,305 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:48,305 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:48,309 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:48,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND TRUE   __exception
[L4187]               __tmp__Balance := Balance;
[L4188]               __tmp__DType := DType;
[L4189]               __tmp__Alloc := Alloc;
[L4190]               __tmp__balance_ADDR := balance_ADDR;
[L4191]               __tmp__M_Ref_int := M_Ref_int;
[L4192]               __tmp__sum_balances0 := sum_balances0;
[L4193]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4195]               __tmp__sum_allowed1 := sum_allowed1;
[L4196]               __tmp__M_int_int := M_int_int;
[L4197]               __tmp__sum_chains2 := sum_chains2;
[L4198]               __tmp__sum_freezings3 := sum_freezings3;
[L4199]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4200]               __tmp__Length := Length;
[L4201]               __tmp__now := now;
[L4202]               __tmp__balances_BasicToken := balances_BasicToken;
[L4203]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4204]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4205]               __tmp__owner_Ownable := owner_Ownable;
[L4206]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4207]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4208]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4209]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4210]               __tmp__paused_Pausable := paused_Pausable;
[L4211]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4212]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4213]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4214]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4215]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4216]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4217]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4218]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4219]               __tmp__initialized_MainToken := initialized_MainToken;
[L4220]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9154]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9000]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8966]               assume msgsender_MSG != null;
[L8967]               __tmp__Balance[this] := 0;
[L8968]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L8969]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8970]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8971]               __tmp__TOKEN_NAME_Consts[this] := -1051245219;
[L8972]               __tmp__TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8973]               __tmp__PAUSED_Consts[this] := false;
[L8974]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8975]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8976]               __tmp__CONTINUE_MINTING_Consts[this] := true;
[L9000]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9001]   COND FALSE  !(revert)
[L9154]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9155]   COND FALSE  !(revert)
[L9158]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L9158]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9159]   COND FALSE  !(revert)
[L9162]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L9162]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9163]   COND FALSE  !(revert)
[L9166]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L9166]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9167]   COND FALSE  !(revert)
[L9170]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L9170]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9171]   COND FALSE  !(revert)
[L9174]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L7334]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L7338]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L7338]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]   COND FALSE  !(revert)
[L7342]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7342]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7343]   COND FALSE  !(revert)
[L7346]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7303]               assume msgsender_MSG != null;
[L7304]               __tmp__Balance[this] := 0;
[L7305]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7306]               __tmp__sum_chains2[this] := 0;
[L7307]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7308]               __tmp__sum_freezings3[this] := 0;
[L7309]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7310]               __tmp__sum_freezingBalance4[this] := 0;
[L7346]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7347]   COND FALSE  !(revert)
[L9174]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9175]   COND FALSE  !(revert)
[L9178]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]               assume msgsender_MSG != null;
[L6963]               __tmp__Balance[this] := 0;
[L6964]               __tmp__owner_Ownable[this] := null;
[L6966]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6981]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L9178]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9182]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L7149]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L7153]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L7157]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7157]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7158]   COND FALSE  !(revert)
[L7161]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]               assume msgsender_MSG != null;
[L6963]               __tmp__Balance[this] := 0;
[L6964]               __tmp__owner_Ownable[this] := null;
[L6966]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6981]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7161]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7162]   COND FALSE  !(revert)
[L7165]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7128]               assume msgsender_MSG != null;
[L7129]               __tmp__Balance[this] := 0;
[L7130]               __tmp__mintingFinished_MintableToken[this] := false;
[L7165]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7166]   COND FALSE  !(revert)
[L9182]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9183]   COND FALSE  !(revert)
[L9186]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8757]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L8757]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8758]   COND FALSE  !(revert)
[L8761]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L8761]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L8762]   COND FALSE  !(revert)
[L8765]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L8765]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8766]   COND FALSE  !(revert)
[L8769]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L8769]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8770]   COND FALSE  !(revert)
[L8773]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L7334]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L7338]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L7338]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]   COND FALSE  !(revert)
[L7342]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7342]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7343]   COND FALSE  !(revert)
[L7346]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7303]               assume msgsender_MSG != null;
[L7304]               __tmp__Balance[this] := 0;
[L7305]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7306]               __tmp__sum_chains2[this] := 0;
[L7307]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7308]               __tmp__sum_freezings3[this] := 0;
[L7309]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7310]               __tmp__sum_freezingBalance4[this] := 0;
[L7346]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7347]   COND FALSE  !(revert)
[L8773]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8774]   COND FALSE  !(revert)
[L8777]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]               assume msgsender_MSG != null;
[L6963]               __tmp__Balance[this] := 0;
[L6964]               __tmp__owner_Ownable[this] := null;
[L6966]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6981]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L8777]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8778]   COND FALSE  !(revert)
[L8781]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L7149]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L7153]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L7157]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6727]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6683]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]   COND FALSE  !(revert)
[L6687]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6668]               assume msgsender_MSG != null;
[L6669]               __tmp__Balance[this] := 0;
[L6687]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6688]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6735]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]               assume msgsender_MSG != null;
[L6709]               __tmp__Balance[this] := 0;
[L6710]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6711]               __tmp__sum_allowed1[this] := 0;
[L6739]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7157]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7158]   COND FALSE  !(revert)
[L7161]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]               assume msgsender_MSG != null;
[L6963]               __tmp__Balance[this] := 0;
[L6964]               __tmp__owner_Ownable[this] := null;
[L6966]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6981]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7161]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7162]   COND FALSE  !(revert)
[L7165]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7128]               assume msgsender_MSG != null;
[L7129]               __tmp__Balance[this] := 0;
[L7130]               __tmp__mintingFinished_MintableToken[this] := false;
[L7165]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7166]   COND FALSE  !(revert)
[L8781]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8782]   COND FALSE  !(revert)
[L8785]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8742]               assume msgsender_MSG != null;
[L8743]               __tmp__Balance[this] := 0;
[L8785]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8786]   COND FALSE  !(revert)
[L9186]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9187]   COND FALSE  !(revert)
[L9190]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8521]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L8521]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8522]   COND FALSE  !(revert)
[L8525]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6406]               assume msgsender_MSG != null;
[L6407]               __tmp__Balance[this] := 0;
[L6421]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6554]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6558]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6533]               assume msgsender_MSG != null;
[L6534]               __tmp__Balance[this] := 0;
[L6535]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6536]               __tmp__sum_balances0[this] := 0;
[L6537]               __tmp__totalSupply__BasicToken[this] := 0;
[L6558]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L8525]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8526]   COND FALSE  !(revert)
[L8529]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8506]               assume msgsender_MSG != null;
[L8507]               __tmp__Balance[this] := 0;
[L8529]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8530]   COND FALSE  !(revert)
[L9190]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9191]   COND FALSE  !(revert)
[L9194]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8651]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]               assume msgsender_MSG != null;
[L6963]               __tmp__Balance[this] := 0;
[L6964]               __tmp__owner_Ownable[this] := null;
[L6966]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6981]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L8651]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8652]   COND FALSE  !(revert)
[L8655]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8634]               assume msgsender_MSG != null;
[L8635]               __tmp__Balance[this] := 0;
[L8636]               __tmp__paused_Pausable[this] := false;
[L8655]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8656]   COND FALSE  !(revert)
[L9194]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9195]   COND FALSE  !(revert)
[L9198]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9113]               assume msgsender_MSG != null;
[L9114]               __tmp__Balance[this] := 0;
[L9115]               __tmp__initialized_MainToken[this] := false;
[L9117]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9375]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9379]               __tmp__initialized_MainToken[this] := true;
[L9380]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9390]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9117]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   COND TRUE   __tmp__DType[this] == MainToken
[L9122]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7020]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12325]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7020]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   COND TRUE   __tmp__DType[this] == MainToken
[L7025]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7093]               __var_11 := null;
[L7094]   COND FALSE  !(!(_newOwner_s581 != null))
[L7098]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7025]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7026]   COND FALSE  !(revert)
[L9122]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9123]   COND FALSE  !(revert)
[L9198]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9199]   COND FALSE  !(revert)
[L4220]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4221]               assume revert || gas < 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND TRUE   __exception
[L883]                __tmp__Balance := Balance;
[L884]                __tmp__DType := DType;
[L885]                __tmp__Alloc := Alloc;
[L886]                __tmp__balance_ADDR := balance_ADDR;
[L887]                __tmp__M_Ref_int := M_Ref_int;
[L888]                __tmp__sum_balances0 := sum_balances0;
[L889]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L890]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L891]                __tmp__sum_allowed1 := sum_allowed1;
[L892]                __tmp__M_int_int := M_int_int;
[L893]                __tmp__sum_chains2 := sum_chains2;
[L894]                __tmp__sum_freezings3 := sum_freezings3;
[L895]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L896]                __tmp__Length := Length;
[L897]                __tmp__now := now;
[L898]                __tmp__balances_BasicToken := balances_BasicToken;
[L899]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L900]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L901]                __tmp__owner_Ownable := owner_Ownable;
[L902]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L903]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L904]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L905]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L906]                __tmp__paused_Pausable := paused_Pausable;
[L907]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L908]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L909]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L910]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L911]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L912]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L913]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L914]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L915]                __tmp__initialized_MainToken := initialized_MainToken;
[L916]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6856]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6857]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6858]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6859]               __ret_0_ := true;
[L916]    RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L917]                assume revert || gas < 0;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:48,317 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:48,317 INFO  L82        PathProgramCache]: Analyzing trace with hash 1414558897, now seen corresponding path program 1 times
[2020-11-24 21:27:48,318 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:48,349 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:48,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:27:48,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:48,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:27:48,835 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:48,836 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:27:48,836 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:27:48,836 INFO  L87              Difference]: Start difference. First operand 8626 states and 9638 transitions. cyclomatic complexity: 1032 Second operand 4 states.
[2020-11-24 21:27:49,302 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:49,302 INFO  L93              Difference]: Finished difference Result 10936 states and 12553 transitions.
[2020-11-24 21:27:49,302 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 21:27:49,302 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10936 states and 12553 transitions.
[2020-11-24 21:27:49,326 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-11-24 21:27:49,351 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10936 states to 10173 states and 11679 transitions.
[2020-11-24 21:27:49,351 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2437
[2020-11-24 21:27:49,352 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2446
[2020-11-24 21:27:49,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10173 states and 11679 transitions.
[2020-11-24 21:27:49,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:49,359 INFO  L728         BuchiCegarLoop]: Abstraction has 10173 states and 11679 transitions.
[2020-11-24 21:27:49,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10173 states and 11679 transitions.
[2020-11-24 21:27:49,417 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10173 to 8921.
[2020-11-24 21:27:49,417 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8921 states.
[2020-11-24 21:27:49,427 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8921 states to 8921 states and 10067 transitions.
[2020-11-24 21:27:49,427 INFO  L751         BuchiCegarLoop]: Abstraction has 8921 states and 10067 transitions.
[2020-11-24 21:27:49,427 INFO  L631         BuchiCegarLoop]: Abstraction has 8921 states and 10067 transitions.
[2020-11-24 21:27:49,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:27:49,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8921 states and 10067 transitions.
[2020-11-24 21:27:49,437 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:27:49,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:49,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:49,440 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:49,440 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND TRUE   __exception
[L883]                __tmp__Balance := Balance;
[L884]                __tmp__DType := DType;
[L885]                __tmp__Alloc := Alloc;
[L886]                __tmp__balance_ADDR := balance_ADDR;
[L887]                __tmp__M_Ref_int := M_Ref_int;
[L888]                __tmp__sum_balances0 := sum_balances0;
[L889]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L890]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L891]                __tmp__sum_allowed1 := sum_allowed1;
[L892]                __tmp__M_int_int := M_int_int;
[L893]                __tmp__sum_chains2 := sum_chains2;
[L894]                __tmp__sum_freezings3 := sum_freezings3;
[L895]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L896]                __tmp__Length := Length;
[L897]                __tmp__now := now;
[L898]                __tmp__balances_BasicToken := balances_BasicToken;
[L899]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L900]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L901]                __tmp__owner_Ownable := owner_Ownable;
[L902]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L903]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L904]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L905]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L906]                __tmp__paused_Pausable := paused_Pausable;
[L907]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L908]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L909]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L910]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L911]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L912]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L913]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L914]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L915]                __tmp__initialized_MainToken := initialized_MainToken;
[L916]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6856]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6857]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6858]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6859]               __ret_0_ := true;
[L916]    RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L917]                assume revert || gas < 0;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND TRUE   choice == 38
[L14132]              gas := gas - 21000;
[L14133]  COND TRUE   gas >= 0
[L14134]              assume msgvalue_MSG == 0;
[L14135]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L363]                havoc __exception;
[L364]                revert := false;
[L365]    COND FALSE  !(__exception)
[L402]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6584]               __ret_0_ := totalSupply__BasicToken[this];
[L402]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L403]                assume !revert && gas >= 0;
[L14135]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:49,447 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:49,448 INFO  L82        PathProgramCache]: Analyzing trace with hash -1482694819, now seen corresponding path program 1 times
[2020-11-24 21:27:49,448 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:49,476 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:50,025 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:27:50,025 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:50,025 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:27:50,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:50,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:27:50,026 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:27:50,026 INFO  L87              Difference]: Start difference. First operand 8921 states and 10067 transitions. cyclomatic complexity: 1166 Second operand 5 states.
[2020-11-24 21:27:51,287 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:51,287 INFO  L93              Difference]: Finished difference Result 9576 states and 10783 transitions.
[2020-11-24 21:27:51,287 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:27:51,287 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9576 states and 10783 transitions.
[2020-11-24 21:27:51,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:27:51,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9576 states to 6842 states and 7917 transitions.
[2020-11-24 21:27:51,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-24 21:27:51,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1335
[2020-11-24 21:27:51,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6842 states and 7917 transitions.
[2020-11-24 21:27:51,331 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:51,331 INFO  L728         BuchiCegarLoop]: Abstraction has 6842 states and 7917 transitions.
[2020-11-24 21:27:51,336 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6842 states and 7917 transitions.
[2020-11-24 21:27:51,365 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6842 to 5384.
[2020-11-24 21:27:51,365 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5384 states.
[2020-11-24 21:27:51,370 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5384 states to 5384 states and 6059 transitions.
[2020-11-24 21:27:51,370 INFO  L751         BuchiCegarLoop]: Abstraction has 5384 states and 6059 transitions.
[2020-11-24 21:27:51,370 INFO  L631         BuchiCegarLoop]: Abstraction has 5384 states and 6059 transitions.
[2020-11-24 21:27:51,370 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:27:51,370 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5384 states and 6059 transitions.
[2020-11-24 21:27:51,376 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:27:51,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:27:51,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:27:51,379 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:27:51,379 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND FALSE  !(choice == 33)
[L14170]  COND FALSE  !(choice == 32)
[L14177]  COND TRUE   choice == 31
[L14178]              gas := gas - 21000;
[L14179]  COND TRUE   gas >= 0
[L14180]              assume _subtractedValue_s497 >= 0 && _subtractedValue_s497 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14181]              assume msgvalue_MSG == 0;
[L14182]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1130]               havoc __exception;
[L1131]               revert := false;
[L1132]   COND FALSE  !(__exception)
[L1169]   CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L6940]               oldValue_s497 := allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L6941]   COND TRUE   _subtractedValue_s497 > oldValue_s497
[L6942]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L6943]               allowed_StandardToken[this][msgsender_MSG][_spender_s497] := 0;
[L6944]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L6954]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6955]               __ret_0_ := true;
[L1169]   RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1170]               assume !revert && gas >= 0;
[L14182]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L14389]  RET         call CorralChoice_MainToken(this);
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND FALSE  !(choice == 34)
[L14163]  COND TRUE   choice == 33
[L14164]              gas := gas - 21000;
[L14165]  COND TRUE   gas >= 0
[L14166]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14167]              assume msgvalue_MSG == 0;
[L14168]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L880]                havoc __exception;
[L881]                revert := false;
[L882]    COND FALSE  !(__exception)
[L919]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L6865]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6866]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L6867]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L6868]               assert { :EventEmitted "Approval_StandardToken" } true;
[L6869]               __ret_0_ := true;
[L919]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L920]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14168]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND TRUE   choice == 38
[L14132]              gas := gas - 21000;
[L14133]  COND FALSE  !(gas >= 0)
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:27:51,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:27:51,387 INFO  L82        PathProgramCache]: Analyzing trace with hash -1914838497, now seen corresponding path program 1 times
[2020-11-24 21:27:51,389 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:27:51,450 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:52,079 INFO  L134       CoverageAnalysis]: Checked inductivity of 9916 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9916 trivial. 0 not checked.
[2020-11-24 21:27:52,079 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:27:52,079 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:27:52,080 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:27:52,080 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:27:52,080 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:27:52,080 INFO  L87              Difference]: Start difference. First operand 5384 states and 6059 transitions. cyclomatic complexity: 690 Second operand 7 states.
[2020-11-24 21:27:52,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:27:52,953 INFO  L93              Difference]: Finished difference Result 2930 states and 3286 transitions.
[2020-11-24 21:27:52,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:27:52,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2930 states and 3286 transitions.
[2020-11-24 21:27:52,958 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:27:52,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2930 states to 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:27:52,958 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:27:52,958 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:27:52,958 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:27:52,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:27:52,958 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:27:52,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:27:52,961 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:27:52 BasicIcfg
[2020-11-24 21:27:52,961 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:27:52,962 INFO  L168              Benchmark]: Toolchain (without parser) took 23821.28 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 913.7 MB in the beginning and 1.6 GB in the end (delta: -678.1 MB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,963 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.27 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,963 INFO  L168              Benchmark]: Boogie Preprocessor took 192.80 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,963 INFO  L168              Benchmark]: UtopiaSpecLang took 101.04 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,964 INFO  L168              Benchmark]: Boogie Printer took 34.65 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,964 INFO  L168              Benchmark]: RCFGBuilder took 1687.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 177.2 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -219.2 MB). Peak memory consumption was 245.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,964 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.35 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,965 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4266.70 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 354.4 MB). Free memory was 1.1 GB in the beginning and 855.6 MB in the end (delta: 216.1 MB). Peak memory consumption was 804.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,965 INFO  L168              Benchmark]: BlockEncodingV2 took 305.28 ms. Allocated memory is still 1.6 GB. Free memory was 855.6 MB in the beginning and 673.6 MB in the end (delta: 182.1 MB). Peak memory consumption was 182.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,965 INFO  L168              Benchmark]: BuchiAutomizer took 17192.72 ms. Allocated memory was 1.6 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 673.6 MB in the beginning and 1.6 GB in the end (delta: -918.3 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-24 21:27:52,967 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13184 locations, 24271 edges
  - StatisticsResult: Encoded RCFG
    12982 locations, 23709 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.27 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 192.80 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 101.04 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 34.65 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1687.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 177.2 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -219.2 MB). Peak memory consumption was 245.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.35 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4266.70 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 354.4 MB). Free memory was 1.1 GB in the beginning and 855.6 MB in the end (delta: 216.1 MB). Peak memory consumption was 804.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 305.28 ms. Allocated memory is still 1.6 GB. Free memory was 855.6 MB in the beginning and 673.6 MB in the end (delta: 182.1 MB). Peak memory consumption was 182.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 17192.72 ms. Allocated memory was 1.6 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 673.6 MB in the beginning and 1.6 GB in the end (delta: -918.3 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5260 locations, 7414 edges
  - StatisticsResult: BuchiProgram size
    13184 locations, 24271 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 17.1s and 8 iterations.  TraceHistogramMax:38. Analysis of lassos took 3.8s. Construction of modules took 8.9s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 4544 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8921 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 58768 SDtfs, 54735 SDslu, 55100 SDs, 0 SdLazy, 109408 SolverSat, 9848 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
