This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:40:24,993 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:40:24,994 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:40:25,004 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:40:25,004 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:40:25,005 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:40:25,006 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:40:25,007 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:40:25,009 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:40:25,009 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:40:25,010 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:40:25,010 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:40:25,011 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:40:25,012 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:40:25,012 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:40:25,013 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:40:25,013 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:40:25,014 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:40:25,016 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:40:25,017 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:40:25,018 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:40:25,018 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:40:25,020 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:40:25,020 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:40:25,020 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:40:25,021 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:40:25,021 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:40:25,022 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:40:25,022 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:40:25,022 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:40:25,022 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:40:25,023 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:40:25,023 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:40:25,024 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:40:25,024 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:40:25,024 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:40:25,025 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:40:25,025 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:40:25,025 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:40:25,026 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:40:25,026 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:40:25,026 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:40:25,034 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:40:25,034 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:40:25,035 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:40:25,035 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:40:25,035 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:40:25,035 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:40:25,035 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:40:25,035 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:40:25,035 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:40:25,036 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:40:25,036 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:40:25,036 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:40:25,037 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:40:25,037 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:40:25,059 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:40:25,072 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:40:25,075 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:40:25,076 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:40:25,077 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:40:25,077 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl
[2020-11-25 18:40:25,077 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl'
[2020-11-25 18:40:25,227 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:40:25,228 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:40:25,229 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:40:25,229 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:40:25,229 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:40:25,245 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,246 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,295 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,295 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,336 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,352 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,371 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,393 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:40:25,394 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:40:25,394 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:40:25,397 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:40:25,401 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/1) ...
[2020-11-25 18:40:25,436 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ITAMToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ITAMToken.transferFrom)))
[2020-11-25 18:40:25,442 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ITAMToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ITAMToken.transferFrom)))
[2020-11-25 18:40:25,450 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ITAMToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ITAMToken.transferFrom)))
[2020-11-25 18:40:25,459 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s962!=_to_s962 && ( ( _value_s962>_balances_ERC20[this][_from_s962] || _value_s962>_allowed_ERC20[this][_from_s962][msg.sender] ) || ( _balances_ERC20[this][_to_s962] + _value_s962 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s962>=0 ) && _value_s962<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][_to_s962]>=0 ) && _balances_ERC20[this][_to_s962]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][_from_s962]>=0 ) && _balances_ERC20[this][_from_s962]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][_from_s962][msg.sender]>=0 ) && _allowed_ERC20[this][_from_s962][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>],IdentifierExpression[_to_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_to_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IdentifierExpression[_value_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_to_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_to_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[_from_s962,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ITAMToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:40:25,468 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ITAMToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ITAMToken.transferFrom)))
[2020-11-25 18:40:25,468 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ITAMToken0) ==> ( <>AP(fail_transferFrom_ITAMToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:40:25,491 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:40:25 PropertyContainer
[2020-11-25 18:40:25,492 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:40:25,492 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:40:25,492 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:40:25,492 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:40:25,493 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/2) ...
[2020-11-25 18:40:25,493 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:40:25,493 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:40:25,526 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:40:25" (2/2) ...
[2020-11-25 18:40:25,526 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:40:25,527 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:40:25,527 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:40:25,527 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:40:25,528 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/2) ...
[2020-11-25 18:40:25,580 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:40:25,580 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:40:25,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:40:25,581 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 18:40:25,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 18:40:25,582 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 18:40:25,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 18:40:25,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 18:40:25,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 18:40:25,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 18:40:25,583 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20__success
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 18:40:25,584 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 18:40:25,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 18:40:25,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure ITAMToken_ITAMToken_NoBaseCtor__success
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure ITAMToken_ITAMToken
[2020-11-25 18:40:25,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITAMToken_ITAMToken
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure setGameMaster~address_ITAMToken
[2020-11-25 18:40:25,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGameMaster~address_ITAMToken
[2020-11-25 18:40:25,585 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ITAMToken
[2020-11-25 18:40:25,586 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock_ITAMToken
[2020-11-25 18:40:25,586 INFO  L130     BoogieDeclarations]: Found specification of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken
[2020-11-25 18:40:25,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure addToBlackList~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToBlackList~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromBlackList~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromBlackList~address_ITAMToken
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ITAMToken__success
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawEther~uint256_ITAMToken
[2020-11-25 18:40:25,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawEther~uint256_ITAMToken
[2020-11-25 18:40:25,587 INFO  L130     BoogieDeclarations]: Found specification of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken
[2020-11-25 18:40:25,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _getItemAmount~uint64~uint64~address_ITAMToken__success
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnEther~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnEther~uint64~uint64_ITAMToken
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ITAMToken
[2020-11-25 18:40:25,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ITAMToken
[2020-11-25 18:40:25,588 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ITAMToken
[2020-11-25 18:40:25,589 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ITAMToken
[2020-11-25 18:40:25,589 INFO  L130     BoogieDeclarations]: Found specification of procedure firstMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure firstMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L130     BoogieDeclarations]: Found specification of procedure secondMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure secondMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L130     BoogieDeclarations]: Found specification of procedure thirdMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure thirdMaster_ITAMToken
[2020-11-25 18:40:25,589 INFO  L130     BoogieDeclarations]: Found specification of procedure decidedOwner~address~address_ITAMToken
[2020-11-25 18:40:25,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure decidedOwner~address~address_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_ITAMToken
[2020-11-25 18:40:25,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure gameMaster_ITAMToken
[2020-11-25 18:40:25,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure gameMaster_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure blackLists~address_ITAMToken
[2020-11-25 18:40:25,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure blackLists~address_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure unlockCount_ITAMToken
[2020-11-25 18:40:25,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlockCount_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleAddress_ITAMToken
[2020-11-25 18:40:25,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleAddress_ITAMToken
[2020-11-25 18:40:25,590 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,591 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleAddress_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleAddress_ITAMToken
[2020-11-25 18:40:25,591 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,591 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleAddress_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleAddress_ITAMToken
[2020-11-25 18:40:25,591 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleReleaseCap_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleReleaseCap_ITAMToken
[2020-11-25 18:40:25,591 INFO  L130     BoogieDeclarations]: Found specification of procedure teamAddress_ITAMToken
[2020-11-25 18:40:25,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamAddress_ITAMToken
[2020-11-25 18:40:25,592 INFO  L130     BoogieDeclarations]: Found specification of procedure teamReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,592 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorAddress_ITAMToken
[2020-11-25 18:40:25,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorAddress_ITAMToken
[2020-11-25 18:40:25,592 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,592 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingAddress_ITAMToken
[2020-11-25 18:40:25,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingAddress_ITAMToken
[2020-11-25 18:40:25,592 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoAddress_ITAMToken
[2020-11-25 18:40:25,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoAddress_ITAMToken
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoReleaseCaps~uint256_ITAMToken
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure inAppAddress_ITAMToken
[2020-11-25 18:40:25,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure inAppAddress_ITAMToken
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:40:25,593 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGameMaster_pre__success
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMaster_pre__success
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNotBlackList_pre__success
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 18:40:25,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ITAMToken
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,595 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 18:40:25,596 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20__fail
[2020-11-25 18:40:25,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ITAMToken_ITAMToken_NoBaseCtor__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ITAMToken_ITAMToken__success
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ITAMToken_ITAMToken__fail
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure setGameMaster~address_ITAMToken__success
[2020-11-25 18:40:25,598 INFO  L130     BoogieDeclarations]: Found specification of procedure setGameMaster~address_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock_ITAMToken__fail
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken__success
[2020-11-25 18:40:25,599 INFO  L130     BoogieDeclarations]: Found specification of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_ITAMToken__success
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure addToBlackList~address_ITAMToken__success
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure addToBlackList~address_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromBlackList~address_ITAMToken__success
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromBlackList~address_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawEther~uint256_ITAMToken__success
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawEther~uint256_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken__success
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken__fail
[2020-11-25 18:40:25,600 INFO  L130     BoogieDeclarations]: Found specification of procedure _getItemAmount~uint64~uint64~address_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnEther~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure purchaseItemOnEther~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ITAMToken__fail
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ITAMToken__success
[2020-11-25 18:40:25,601 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure firstMaster_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure firstMaster_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure secondMaster_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure secondMaster_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure thirdMaster_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure thirdMaster_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure decidedOwner~address~address_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure decidedOwner~address~address_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure gameMaster_ITAMToken__success
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure gameMaster_ITAMToken__fail
[2020-11-25 18:40:25,602 INFO  L130     BoogieDeclarations]: Found specification of procedure blackLists~address_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure blackLists~address_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure unlockCount_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure unlockCount_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure strategicSaleReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure privateSaleReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,603 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleReleaseCap_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure publicSaleReleaseCap_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure teamAddress_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure teamAddress_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure teamReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure teamReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorAddress_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorAddress_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure advisorReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,604 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingAddress_ITAMToken__success
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingAddress_ITAMToken__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure marketingReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoAddress_ITAMToken__success
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoAddress_ITAMToken__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ecoReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure inAppAddress_ITAMToken__success
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure inAppAddress_ITAMToken__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:40:25,605 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:40:25,606 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:40:25,606 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:40:25,606 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGameMaster_pre__fail
[2020-11-25 18:40:25,606 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMaster_pre__fail
[2020-11-25 18:40:25,606 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNotBlackList_pre__fail
[2020-11-25 18:40:25,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:40:25,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:40:25,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:40:25,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:40:25,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:40:25,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 18:40:25,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:40:25,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITAMToken_ITAMToken_NoBaseCtor__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITAMToken_ITAMToken_NoBaseCtor__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITAMToken_ITAMToken__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITAMToken_ITAMToken__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGameMaster~address_ITAMToken__fail
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGameMaster~address_ITAMToken__success
[2020-11-25 18:40:25,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAddresses~address~address~address~address~address~address~address~address_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_ITAMToken__fail
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_ITAMToken__success
[2020-11-25 18:40:25,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToBlackList~address_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToBlackList~address_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromBlackList~address_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromBlackList~address_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawEther~uint256_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawEther~uint256_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure createOrUpdateItem~uint64~arr~arr~arr_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getItemAmount~uint64~uint64~address_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getItemAmount~uint64~uint64~address_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnERC20~address~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnITAM~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnEther~uint64~uint64_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure purchaseItemOnEther~uint64~uint64_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure firstMaster_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure firstMaster_ITAMToken__success
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure secondMaster_ITAMToken__fail
[2020-11-25 18:40:25,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure secondMaster_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure thirdMaster_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure thirdMaster_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decidedOwner~address~address_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decidedOwner~address~address_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure gameMaster_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure gameMaster_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure blackLists~address_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure blackLists~address_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlockCount_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlockCount_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure strategicSaleReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure privateSaleReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleAddress_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleAddress_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleReleaseCap_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure publicSaleReleaseCap_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamAddress_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamAddress_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure teamReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorAddress_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorAddress_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure advisorReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingAddress_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingAddress_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure marketingReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoAddress_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoAddress_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoReleaseCaps~uint256_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ecoReleaseCaps~uint256_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure inAppAddress_ITAMToken__fail
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure inAppAddress_ITAMToken__success
[2020-11-25 18:40:25,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGameMaster_pre__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGameMaster_pre__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMaster_pre__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMaster_pre__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNotBlackList_pre__fail
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNotBlackList_pre__success
[2020-11-25 18:40:25,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ITAMToken
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:40:25,618 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:40:25,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:40:26,491 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:40:26,491 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:40:26,665 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:40:26,665 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 18:40:26,667 INFO  L202        PluginConnector]: Adding new model ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:40:26 BoogieIcfgContainer
[2020-11-25 18:40:26,668 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:40:25" (2/2) ...
[2020-11-25 18:40:26,668 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:40:26,668 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@78b232d1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:40:26, skipping insertion in model container
[2020-11-25 18:40:26,668 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:40:26,668 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:40:26,668 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:40:26,669 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:40:26,669 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/3) ...
[2020-11-25 18:40:26,670 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@53221acc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:40:26, skipping insertion in model container
[2020-11-25 18:40:26,670 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:40:25" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:40:26,700 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:40:26 NWAContainer
[2020-11-25 18:40:26,700 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:40:26,700 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:40:26,700 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:40:26,701 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:40:26,702 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:40:26" (3/4) ...
[2020-11-25 18:40:26,702 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@76b41370 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:40:26, skipping insertion in model container
[2020-11-25 18:40:26,702 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:40:26" (4/4) ...
[2020-11-25 18:40:26,704 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:40:26,711 INFO  L110   BuchiProductObserver]: Initial RCFG 6542 locations, 8020 edges
[2020-11-25 18:40:26,711 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:40:26,725 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:40:29,147 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:40:29,164 INFO  L110   BuchiProductObserver]: BuchiProgram size 14822 locations, 24987 edges
[2020-11-25 18:40:29,165 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:40:29 BoogieIcfgContainer
[2020-11-25 18:40:29,165 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:40:29,165 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:40:29,165 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:40:29,166 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:40:29,167 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:40:29" (1/1) ...
[2020-11-25 18:40:29,472 INFO  L313           BlockEncoder]: Initial Icfg 14822 locations, 24987 edges
[2020-11-25 18:40:29,472 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:40:29,473 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:40:29,473 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:40:29,474 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:40:29,496 INFO  L70    emoveInfeasibleEdges]: Removed 180 edges and 13 locations because of local infeasibility
[2020-11-25 18:40:29,523 INFO  L70        RemoveSinkStates]: Removed 252 edges and 145 locations by removing sink states
[2020-11-25 18:40:29,551 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:40:29,558 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:40:29,565 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:40:29,566 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:40:29,570 INFO  L313           BlockEncoder]: Encoded RCFG 14634 locations, 24511 edges
[2020-11-25 18:40:29,571 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:40:29 BasicIcfg
[2020-11-25 18:40:29,571 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:40:29,571 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:40:29,571 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:40:29,573 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:40:29,573 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,573 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:40:25" (1/6) ...
[2020-11-25 18:40:29,574 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4099a3f1 and model type ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:40:29, skipping insertion in model container
[2020-11-25 18:40:29,574 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,574 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:40:25" (2/6) ...
[2020-11-25 18:40:29,574 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4099a3f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:40:29, skipping insertion in model container
[2020-11-25 18:40:29,574 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,574 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:40:26" (3/6) ...
[2020-11-25 18:40:29,575 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4099a3f1 and model type ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:40:29, skipping insertion in model container
[2020-11-25 18:40:29,575 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,575 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:40:26" (4/6) ...
[2020-11-25 18:40:29,575 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4099a3f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:40:29, skipping insertion in model container
[2020-11-25 18:40:29,575 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,575 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:40:29" (5/6) ...
[2020-11-25 18:40:29,575 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4099a3f1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:40:29, skipping insertion in model container
[2020-11-25 18:40:29,576 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:40:29,576 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:40:29" (6/6) ...
[2020-11-25 18:40:29,576 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ITAMToken_0x3b4f7cb9e60362a49dd04eb0091a374d340e3efd_transferfrom-fail.bpl_BEv2
[2020-11-25 18:40:29,610 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:40:29,610 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:40:29,610 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:40:29,610 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:40:29,610 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:40:29,610 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:40:29,610 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:40:29,610 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:40:29,610 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:40:29,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14634 states.
[2020-11-25 18:40:29,802 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:40:29,802 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:29,802 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:29,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:29,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:29,811 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:40:29,811 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14634 states.
[2020-11-25 18:40:29,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:40:29,868 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:29,868 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:29,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:29,871 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND TRUE   revert
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND TRUE   choice == 45
[L14352]              gas := gas - 21000;
[L14353]  COND FALSE  !(gas >= 0)
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:29,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:29,887 INFO  L82        PathProgramCache]: Analyzing trace with hash -1012268261, now seen corresponding path program 1 times
[2020-11-25 18:40:29,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:29,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:29,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:40:29,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:29,960 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:40:30,532 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:30,541 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:40:30,541 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:40:30,542 INFO  L87              Difference]: Start difference. First operand 14634 states. Second operand 3 states.
[2020-11-25 18:40:31,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:31,125 INFO  L93              Difference]: Finished difference Result 13127 states and 15012 transitions.
[2020-11-25 18:40:31,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:40:31,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13127 states and 15012 transitions.
[2020-11-25 18:40:31,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:40:31,249 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13127 states to 13127 states and 15012 transitions.
[2020-11-25 18:40:31,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 18:40:31,251 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 329
[2020-11-25 18:40:31,251 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13127 states and 15012 transitions.
[2020-11-25 18:40:31,273 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:31,273 INFO  L728         BuchiCegarLoop]: Abstraction has 13127 states and 15012 transitions.
[2020-11-25 18:40:31,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13127 states and 15012 transitions.
[2020-11-25 18:40:31,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13127 to 13127.
[2020-11-25 18:40:31,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13127 states.
[2020-11-25 18:40:31,464 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13127 states to 13127 states and 15012 transitions.
[2020-11-25 18:40:31,465 INFO  L751         BuchiCegarLoop]: Abstraction has 13127 states and 15012 transitions.
[2020-11-25 18:40:31,465 INFO  L631         BuchiCegarLoop]: Abstraction has 13127 states and 15012 transitions.
[2020-11-25 18:40:31,465 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:40:31,465 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13127 states and 15012 transitions.
[2020-11-25 18:40:31,483 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:40:31,483 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:31,483 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:31,485 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:31,486 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND TRUE   revert
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND TRUE   revert
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND TRUE   revert
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:31,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:31,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 1483020158, now seen corresponding path program 1 times
[2020-11-25 18:40:31,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:31,509 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:31,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:40:31,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:31,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:40:31,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:31,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:40:31,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:40:31,548 INFO  L87              Difference]: Start difference. First operand 13127 states and 15012 transitions. cyclomatic complexity: 1895 Second operand 3 states.
[2020-11-25 18:40:31,779 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:31,779 INFO  L93              Difference]: Finished difference Result 15416 states and 17679 transitions.
[2020-11-25 18:40:31,779 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:40:31,780 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15416 states and 17679 transitions.
[2020-11-25 18:40:31,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:31,910 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15416 states to 15416 states and 17679 transitions.
[2020-11-25 18:40:31,910 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 441
[2020-11-25 18:40:31,911 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 441
[2020-11-25 18:40:31,911 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15416 states and 17679 transitions.
[2020-11-25 18:40:31,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:31,933 INFO  L728         BuchiCegarLoop]: Abstraction has 15416 states and 17679 transitions.
[2020-11-25 18:40:31,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15416 states and 17679 transitions.
[2020-11-25 18:40:32,112 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15416 to 14689.
[2020-11-25 18:40:32,113 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14689 states.
[2020-11-25 18:40:32,139 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14689 states to 14689 states and 16828 transitions.
[2020-11-25 18:40:32,139 INFO  L751         BuchiCegarLoop]: Abstraction has 14689 states and 16828 transitions.
[2020-11-25 18:40:32,139 INFO  L631         BuchiCegarLoop]: Abstraction has 14689 states and 16828 transitions.
[2020-11-25 18:40:32,139 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:40:32,139 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14689 states and 16828 transitions.
[2020-11-25 18:40:32,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:32,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:32,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:32,165 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:32,165 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND TRUE   !(cap_s528 > 0)
[L10582]              revert := true;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND TRUE   revert
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND TRUE   revert
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND TRUE   !!blackLists_ITAMToken[this][msgsender_MSG]
[L13805]              revert := true;
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND TRUE   revert
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND TRUE   !!blackLists_ITAMToken[this][msgsender_MSG]
[L13805]              revert := true;
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND TRUE   revert
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:32,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:32,169 INFO  L82        PathProgramCache]: Analyzing trace with hash 1906810718, now seen corresponding path program 1 times
[2020-11-25 18:40:32,169 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:32,186 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:32,250 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:40:32,250 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:32,250 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:40:32,251 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:32,251 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:40:32,251 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:40:32,251 INFO  L87              Difference]: Start difference. First operand 14689 states and 16828 transitions. cyclomatic complexity: 2149 Second operand 3 states.
[2020-11-25 18:40:32,400 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:32,400 INFO  L93              Difference]: Finished difference Result 15425 states and 17340 transitions.
[2020-11-25 18:40:32,400 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:40:32,400 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15425 states and 17340 transitions.
[2020-11-25 18:40:32,435 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:32,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15425 states to 14847 states and 16632 transitions.
[2020-11-25 18:40:32,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 411
[2020-11-25 18:40:32,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 411
[2020-11-25 18:40:32,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14847 states and 16632 transitions.
[2020-11-25 18:40:32,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:32,501 INFO  L728         BuchiCegarLoop]: Abstraction has 14847 states and 16632 transitions.
[2020-11-25 18:40:32,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14847 states and 16632 transitions.
[2020-11-25 18:40:32,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14847 to 14213.
[2020-11-25 18:40:32,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14213 states.
[2020-11-25 18:40:32,646 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14213 states to 14213 states and 15878 transitions.
[2020-11-25 18:40:32,647 INFO  L751         BuchiCegarLoop]: Abstraction has 14213 states and 15878 transitions.
[2020-11-25 18:40:32,647 INFO  L631         BuchiCegarLoop]: Abstraction has 14213 states and 15878 transitions.
[2020-11-25 18:40:32,647 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:40:32,647 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14213 states and 15878 transitions.
[2020-11-25 18:40:32,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:32,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:32,663 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:32,666 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:32,666 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:32,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:32,671 INFO  L82        PathProgramCache]: Analyzing trace with hash -1436699164, now seen corresponding path program 1 times
[2020-11-25 18:40:32,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:32,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:32,898 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-11-25 18:40:32,898 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:32,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 18:40:32,899 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:32,899 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 18:40:32,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=269, Unknown=0, NotChecked=0, Total=306
[2020-11-25 18:40:32,899 INFO  L87              Difference]: Start difference. First operand 14213 states and 15878 transitions. cyclomatic complexity: 1675 Second operand 18 states.
[2020-11-25 18:40:40,491 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:40,492 INFO  L93              Difference]: Finished difference Result 14561 states and 16300 transitions.
[2020-11-25 18:40:40,492 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 18:40:40,492 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14561 states and 16300 transitions.
[2020-11-25 18:40:40,515 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:40,547 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14561 states to 14561 states and 16300 transitions.
[2020-11-25 18:40:40,547 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 449
[2020-11-25 18:40:40,547 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 449
[2020-11-25 18:40:40,547 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14561 states and 16300 transitions.
[2020-11-25 18:40:40,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:40,556 INFO  L728         BuchiCegarLoop]: Abstraction has 14561 states and 16300 transitions.
[2020-11-25 18:40:40,566 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14561 states and 16300 transitions.
[2020-11-25 18:40:40,657 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14561 to 14330.
[2020-11-25 18:40:40,657 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14330 states.
[2020-11-25 18:40:40,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14330 states to 14330 states and 16015 transitions.
[2020-11-25 18:40:40,672 INFO  L751         BuchiCegarLoop]: Abstraction has 14330 states and 16015 transitions.
[2020-11-25 18:40:40,672 INFO  L631         BuchiCegarLoop]: Abstraction has 14330 states and 16015 transitions.
[2020-11-25 18:40:40,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:40:40,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14330 states and 16015 transitions.
[2020-11-25 18:40:40,686 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:40,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:40,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:40,689 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:40,689 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND TRUE   choice == 45
[L14352]              gas := gas - 21000;
[L14353]  COND TRUE   gas >= 0
[L14354]              assume _value_s941 >= 0 && _value_s941 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14355]              assume msgvalue_MSG == 0;
[L14356]  CALL        call __ret_0_transfer := transfer~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L2267]               havoc __exception;
[L2268]               revert := false;
[L2269]   COND FALSE  !(__exception)
[L2339]   CALL        call __ret_0_ := transfer~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10904]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10904]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10905]  COND FALSE  !(revert)
[L10908]  COND TRUE   DType[this] == ITAMToken
[L10909]  CALL        call __var_16 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10206]  COND TRUE   DType[this] == ITAMToken
[L10207]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s282, value_s282);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10207]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s282, value_s282);
[L10208]  COND FALSE  !(revert)
[L10224]              __ret_0_ := true;
[L10909]  RET         call __var_16 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10910]  COND FALSE  !(revert)
[L10916]              __ret_0_ := __var_16;
[L2339]   RET         call __ret_0_ := transfer~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L2340]               assume !revert && gas >= 0;
[L14356]  RET         call __ret_0_transfer := transfer~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L14673]  RET         call CorralChoice_ITAMToken(this);
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND FALSE  !(DType[this] == ITAMToken)
[L10331]  COND TRUE   DType[this] == ERC20Capped
[L10332]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10332]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10333]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND TRUE   choice == 45
[L14352]              gas := gas - 21000;
[L14353]  COND FALSE  !(gas >= 0)
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:40,694 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:40,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 1729565608, now seen corresponding path program 1 times
[2020-11-25 18:40:40,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:40,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:40,813 INFO  L134       CoverageAnalysis]: Checked inductivity of 135 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 135 trivial. 0 not checked.
[2020-11-25 18:40:40,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:40,814 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:40:40,814 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:40,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:40:40,814 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:40:40,815 INFO  L87              Difference]: Start difference. First operand 14330 states and 16015 transitions. cyclomatic complexity: 1696 Second operand 3 states.
[2020-11-25 18:40:40,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:40,880 INFO  L93              Difference]: Finished difference Result 14344 states and 16039 transitions.
[2020-11-25 18:40:40,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:40:40,881 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14344 states and 16039 transitions.
[2020-11-25 18:40:40,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:40,929 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14344 states to 14344 states and 16039 transitions.
[2020-11-25 18:40:40,929 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 413
[2020-11-25 18:40:40,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 413
[2020-11-25 18:40:40,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14344 states and 16039 transitions.
[2020-11-25 18:40:40,937 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:40,937 INFO  L728         BuchiCegarLoop]: Abstraction has 14344 states and 16039 transitions.
[2020-11-25 18:40:40,947 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14344 states and 16039 transitions.
[2020-11-25 18:40:41,022 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14344 to 14338.
[2020-11-25 18:40:41,022 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14338 states.
[2020-11-25 18:40:41,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14338 states to 14338 states and 16025 transitions.
[2020-11-25 18:40:41,036 INFO  L751         BuchiCegarLoop]: Abstraction has 14338 states and 16025 transitions.
[2020-11-25 18:40:41,036 INFO  L631         BuchiCegarLoop]: Abstraction has 14338 states and 16025 transitions.
[2020-11-25 18:40:41,036 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:40:41,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14338 states and 16025 transitions.
[2020-11-25 18:40:41,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:41,049 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:41,049 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:41,052 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:41,052 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND TRUE   choice == 45
[L14352]              gas := gas - 21000;
[L14353]  COND TRUE   gas >= 0
[L14354]              assume _value_s941 >= 0 && _value_s941 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14355]              assume msgvalue_MSG == 0;
[L14356]  CALL        call __ret_0_transfer := transfer~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L2267]               havoc __exception;
[L2268]               revert := false;
[L2269]   COND FALSE  !(__exception)
[L2339]   CALL        call __ret_0_ := transfer~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10904]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10904]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10905]  COND FALSE  !(revert)
[L10908]  COND TRUE   DType[this] == ITAMToken
[L10909]  CALL        call __var_16 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10206]  COND TRUE   DType[this] == ITAMToken
[L10207]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s282, value_s282);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10207]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s282, value_s282);
[L10208]  COND FALSE  !(revert)
[L10224]              __ret_0_ := true;
[L10909]  RET         call __var_16 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L10910]  COND FALSE  !(revert)
[L10916]              __ret_0_ := __var_16;
[L2339]   RET         call __ret_0_ := transfer~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L2340]               assume !revert && gas >= 0;
[L14356]  RET         call __ret_0_transfer := transfer~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _to_s941, _value_s941);
[L14673]  RET         call CorralChoice_ITAMToken(this);
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:41,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:41,058 INFO  L82        PathProgramCache]: Analyzing trace with hash -1478117812, now seen corresponding path program 1 times
[2020-11-25 18:40:41,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:41,084 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:41,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 135 backedges. 12 proven. 0 refuted. 0 times theorem prover too weak. 123 trivial. 0 not checked.
[2020-11-25 18:40:41,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:41,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 18:40:41,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:41,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 18:40:41,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 18:40:41,280 INFO  L87              Difference]: Start difference. First operand 14338 states and 16025 transitions. cyclomatic complexity: 1698 Second operand 16 states.
[2020-11-25 18:40:47,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:47,599 INFO  L93              Difference]: Finished difference Result 14493 states and 16209 transitions.
[2020-11-25 18:40:47,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 18:40:47,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14493 states and 16209 transitions.
[2020-11-25 18:40:47,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:47,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14493 states to 14493 states and 16209 transitions.
[2020-11-25 18:40:47,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 428
[2020-11-25 18:40:47,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 428
[2020-11-25 18:40:47,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14493 states and 16209 transitions.
[2020-11-25 18:40:47,654 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:47,654 INFO  L728         BuchiCegarLoop]: Abstraction has 14493 states and 16209 transitions.
[2020-11-25 18:40:47,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14493 states and 16209 transitions.
[2020-11-25 18:40:47,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14493 to 14312.
[2020-11-25 18:40:47,737 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14312 states.
[2020-11-25 18:40:47,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14312 states to 14312 states and 15992 transitions.
[2020-11-25 18:40:47,753 INFO  L751         BuchiCegarLoop]: Abstraction has 14312 states and 15992 transitions.
[2020-11-25 18:40:47,753 INFO  L631         BuchiCegarLoop]: Abstraction has 14312 states and 15992 transitions.
[2020-11-25 18:40:47,753 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:40:47,753 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14312 states and 15992 transitions.
[2020-11-25 18:40:47,770 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:47,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:47,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:47,773 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:47,773 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND TRUE   choice == 44
[L14359]              gas := gas - 21000;
[L14360]  COND TRUE   gas >= 0
[L14361]              assume value_s980 >= 0 && value_s980 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14362]              assume msgvalue_MSG == 0;
[L14363]  CALL        call __ret_0_approve := approve~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L2569]               havoc __exception;
[L2570]               revert := false;
[L2571]   COND FALSE  !(__exception)
[L2641]   CALL        call __ret_0_ := approve~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10984]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10984]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10985]  COND FALSE  !(revert)
[L10988]  COND TRUE   DType[this] == ITAMToken
[L10989]  CALL        call __var_20 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10254]  COND TRUE   DType[this] == ITAMToken
[L10255]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s301, value_s301);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10255]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s301, value_s301);
[L10256]  COND FALSE  !(revert)
[L10272]              __ret_0_ := true;
[L10989]  RET         call __var_20 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10990]  COND FALSE  !(revert)
[L10996]              __ret_0_ := __var_20;
[L2641]   RET         call __ret_0_ := approve~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L2642]               assume !revert && gas >= 0;
[L14363]  RET         call __ret_0_approve := approve~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L14673]  RET         call CorralChoice_ITAMToken(this);
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND FALSE  !(DType[this] == ITAMToken)
[L10331]  COND TRUE   DType[this] == ERC20Capped
[L10332]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10332]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10333]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND FALSE  !(DType[this] == ITAMToken)
[L10353]  COND TRUE   DType[this] == ERC20Capped
[L10354]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10354]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10355]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND FALSE  !(DType[this] == ITAMToken)
[L10331]  COND TRUE   DType[this] == ERC20Capped
[L10332]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10332]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10333]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND FALSE  !(DType[this] == ITAMToken)
[L10353]  COND TRUE   DType[this] == ERC20Capped
[L10354]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10354]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10355]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:47,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:47,778 INFO  L82        PathProgramCache]: Analyzing trace with hash 457704595, now seen corresponding path program 1 times
[2020-11-25 18:40:47,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:47,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:47,925 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 18:40:47,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:47,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 18:40:47,926 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:47,926 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:40:47,926 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:40:47,926 INFO  L87              Difference]: Start difference. First operand 14312 states and 15992 transitions. cyclomatic complexity: 1691 Second operand 7 states.
[2020-11-25 18:40:48,080 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:48,081 INFO  L93              Difference]: Finished difference Result 14356 states and 16047 transitions.
[2020-11-25 18:40:48,081 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:40:48,081 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14356 states and 16047 transitions.
[2020-11-25 18:40:48,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:48,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14356 states to 14328 states and 16018 transitions.
[2020-11-25 18:40:48,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 413
[2020-11-25 18:40:48,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 413
[2020-11-25 18:40:48,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14328 states and 16018 transitions.
[2020-11-25 18:40:48,135 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:48,135 INFO  L728         BuchiCegarLoop]: Abstraction has 14328 states and 16018 transitions.
[2020-11-25 18:40:48,146 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14328 states and 16018 transitions.
[2020-11-25 18:40:48,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14328 to 14328.
[2020-11-25 18:40:48,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14328 states.
[2020-11-25 18:40:48,221 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14328 states to 14328 states and 16018 transitions.
[2020-11-25 18:40:48,221 INFO  L751         BuchiCegarLoop]: Abstraction has 14328 states and 16018 transitions.
[2020-11-25 18:40:48,221 INFO  L631         BuchiCegarLoop]: Abstraction has 14328 states and 16018 transitions.
[2020-11-25 18:40:48,221 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:40:48,221 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14328 states and 16018 transitions.
[2020-11-25 18:40:48,234 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:48,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:48,234 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:48,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:48,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND TRUE   choice == 44
[L14359]              gas := gas - 21000;
[L14360]  COND TRUE   gas >= 0
[L14361]              assume value_s980 >= 0 && value_s980 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14362]              assume msgvalue_MSG == 0;
[L14363]  CALL        call __ret_0_approve := approve~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L2569]               havoc __exception;
[L2570]               revert := false;
[L2571]   COND FALSE  !(__exception)
[L2641]   CALL        call __ret_0_ := approve~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10984]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10984]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10985]  COND FALSE  !(revert)
[L10988]  COND TRUE   DType[this] == ITAMToken
[L10989]  CALL        call __var_20 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10254]  COND TRUE   DType[this] == ITAMToken
[L10255]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s301, value_s301);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10255]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s301, value_s301);
[L10256]  COND FALSE  !(revert)
[L10272]              __ret_0_ := true;
[L10989]  RET         call __var_20 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L10990]  COND FALSE  !(revert)
[L10996]              __ret_0_ := __var_20;
[L2641]   RET         call __ret_0_ := approve~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L2642]               assume !revert && gas >= 0;
[L14363]  RET         call __ret_0_approve := approve~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, spender_s980, value_s980);
[L14673]  RET         call CorralChoice_ITAMToken(this);
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:48,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:48,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -639832079, now seen corresponding path program 1 times
[2020-11-25 18:40:48,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:48,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:48,478 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 122 trivial. 0 not checked.
[2020-11-25 18:40:48,478 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:48,478 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 18:40:48,478 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:48,479 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 18:40:48,479 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=376, Unknown=0, NotChecked=0, Total=420
[2020-11-25 18:40:48,479 INFO  L87              Difference]: Start difference. First operand 14328 states and 16018 transitions. cyclomatic complexity: 1701 Second operand 21 states.
[2020-11-25 18:40:57,462 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:57,462 INFO  L93              Difference]: Finished difference Result 14619 states and 16398 transitions.
[2020-11-25 18:40:57,462 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 18:40:57,462 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14619 states and 16398 transitions.
[2020-11-25 18:40:57,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:57,511 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14619 states to 14619 states and 16398 transitions.
[2020-11-25 18:40:57,511 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 449
[2020-11-25 18:40:57,511 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 449
[2020-11-25 18:40:57,511 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14619 states and 16398 transitions.
[2020-11-25 18:40:57,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:57,519 INFO  L728         BuchiCegarLoop]: Abstraction has 14619 states and 16398 transitions.
[2020-11-25 18:40:57,529 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14619 states and 16398 transitions.
[2020-11-25 18:40:57,594 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14619 to 14414.
[2020-11-25 18:40:57,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14414 states.
[2020-11-25 18:40:57,609 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14414 states to 14414 states and 16139 transitions.
[2020-11-25 18:40:57,609 INFO  L751         BuchiCegarLoop]: Abstraction has 14414 states and 16139 transitions.
[2020-11-25 18:40:57,609 INFO  L631         BuchiCegarLoop]: Abstraction has 14414 states and 16139 transitions.
[2020-11-25 18:40:57,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 18:40:57,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14414 states and 16139 transitions.
[2020-11-25 18:40:57,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:57,622 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:57,622 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:57,623 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:57,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND TRUE   __exception
[L1971]               __tmp__Balance := Balance;
[L1972]               __tmp__DType := DType;
[L1973]               __tmp__Alloc := Alloc;
[L1974]               __tmp__balance_ADDR := balance_ADDR;
[L1975]               __tmp__M_Ref_int := M_Ref_int;
[L1976]               __tmp__sum__balances0 := sum__balances0;
[L1977]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1978]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1979]               __tmp__sum__allowed1 := sum__allowed1;
[L1980]               __tmp__M_Ref_bool := M_Ref_bool;
[L1981]               __tmp__alloc_decidedOwner_ITAMToken_lvl0 := alloc_decidedOwner_ITAMToken_lvl0;
[L1982]               __tmp__sum_decidedOwner2 := sum_decidedOwner2;
[L1983]               __tmp__sum_blackLists3 := sum_blackLists3;
[L1984]               __tmp__alloc_items_ITAMToken_lvl1 := alloc_items_ITAMToken_lvl1;
[L1985]               __tmp__M_int_Ref := M_int_Ref;
[L1986]               __tmp__alloc_items_ITAMToken_lvl0 := alloc_items_ITAMToken_lvl0;
[L1987]               __tmp__sum_items10 := sum_items10;
[L1988]               __tmp__M_int_int := M_int_int;
[L1989]               __tmp__sum_strategicSaleReleaseCaps4 := sum_strategicSaleReleaseCaps4;
[L1990]               __tmp__sum_privateSaleReleaseCaps5 := sum_privateSaleReleaseCaps5;
[L1991]               __tmp__sum_teamReleaseCaps6 := sum_teamReleaseCaps6;
[L1992]               __tmp__sum_advisorReleaseCaps7 := sum_advisorReleaseCaps7;
[L1993]               __tmp__sum_marketingReleaseCaps8 := sum_marketingReleaseCaps8;
[L1994]               __tmp__sum_ecoReleaseCaps9 := sum_ecoReleaseCaps9;
[L1995]               __tmp__sum := sum;
[L1996]               __tmp__Length := Length;
[L1997]               __tmp__now := now;
[L1998]               __tmp___balances_ERC20 := _balances_ERC20;
[L1999]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L2000]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2001]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L2002]               __tmp__name_ITAMToken := name_ITAMToken;
[L2003]               __tmp__symbol_ITAMToken := symbol_ITAMToken;
[L2004]               __tmp__decimals_ITAMToken := decimals_ITAMToken;
[L2005]               __tmp__TOTAL_CAP_ITAMToken := TOTAL_CAP_ITAMToken;
[L2006]               __tmp__firstMaster_ITAMToken := firstMaster_ITAMToken;
[L2007]               __tmp__secondMaster_ITAMToken := secondMaster_ITAMToken;
[L2008]               __tmp__thirdMaster_ITAMToken := thirdMaster_ITAMToken;
[L2009]               __tmp__decidedOwner_ITAMToken := decidedOwner_ITAMToken;
[L2010]               __tmp__owner_ITAMToken := owner_ITAMToken;
[L2011]               __tmp__gameMaster_ITAMToken := gameMaster_ITAMToken;
[L2012]               __tmp__blackLists_ITAMToken := blackLists_ITAMToken;
[L2013]               __tmp__unlockCount_ITAMToken := unlockCount_ITAMToken;
[L2014]               __tmp__strategicSaleAddress_ITAMToken := strategicSaleAddress_ITAMToken;
[L2015]               __tmp__Length_strategicSaleReleaseCaps_ITAMToken_lvl0 := Length_strategicSaleReleaseCaps_ITAMToken_lvl0;
[L2016]               __tmp__strategicSaleReleaseCaps_ITAMToken := strategicSaleReleaseCaps_ITAMToken;
[L2017]               __tmp__privateSaleAddress_ITAMToken := privateSaleAddress_ITAMToken;
[L2018]               __tmp__Length_privateSaleReleaseCaps_ITAMToken_lvl0 := Length_privateSaleReleaseCaps_ITAMToken_lvl0;
[L2019]               __tmp__privateSaleReleaseCaps_ITAMToken := privateSaleReleaseCaps_ITAMToken;
[L2020]               __tmp__publicSaleAddress_ITAMToken := publicSaleAddress_ITAMToken;
[L2021]               __tmp__publicSaleReleaseCap_ITAMToken := publicSaleReleaseCap_ITAMToken;
[L2022]               __tmp__teamAddress_ITAMToken := teamAddress_ITAMToken;
[L2023]               __tmp__Length_teamReleaseCaps_ITAMToken_lvl0 := Length_teamReleaseCaps_ITAMToken_lvl0;
[L2024]               __tmp__teamReleaseCaps_ITAMToken := teamReleaseCaps_ITAMToken;
[L2025]               __tmp__advisorAddress_ITAMToken := advisorAddress_ITAMToken;
[L2026]               __tmp__Length_advisorReleaseCaps_ITAMToken_lvl0 := Length_advisorReleaseCaps_ITAMToken_lvl0;
[L2027]               __tmp__advisorReleaseCaps_ITAMToken := advisorReleaseCaps_ITAMToken;
[L2028]               __tmp__marketingAddress_ITAMToken := marketingAddress_ITAMToken;
[L2029]               __tmp__Length_marketingReleaseCaps_ITAMToken_lvl0 := Length_marketingReleaseCaps_ITAMToken_lvl0;
[L2030]               __tmp__marketingReleaseCaps_ITAMToken := marketingReleaseCaps_ITAMToken;
[L2031]               __tmp__ecoAddress_ITAMToken := ecoAddress_ITAMToken;
[L2032]               __tmp__Length_ecoReleaseCaps_ITAMToken_lvl0 := Length_ecoReleaseCaps_ITAMToken_lvl0;
[L2033]               __tmp__ecoReleaseCaps_ITAMToken := ecoReleaseCaps_ITAMToken;
[L2034]               __tmp__inAppAddress_ITAMToken := inAppAddress_ITAMToken;
[L2035]               __tmp__erc20_ITAMToken := erc20_ITAMToken;
[L2036]               __tmp__items_ITAMToken := items_ITAMToken;
[L2037]   CALL        call ITAMToken_ITAMToken__fail(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10832]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L10130]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L10105]              assume msgsender_MSG != null;
[L10106]              __tmp__Balance[this] := 0;
[L10107]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L10108]              __tmp__sum__balances0[this] := 0;
[L10109]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L10110]              __tmp__sum__allowed1[this] := 0;
[L10111]              __tmp___totalSupply_ERC20[this] := 0;
[L10130]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L10131]  COND FALSE  !(revert)
[L10832]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L10833]  COND FALSE  !(revert)
[L10836]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TOTAL_CAP_ITAMToken[this]);
[L10590]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L10130]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L10105]              assume msgsender_MSG != null;
[L10106]              __tmp__Balance[this] := 0;
[L10107]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L10108]              __tmp__sum__balances0[this] := 0;
[L10109]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L10110]              __tmp__sum__allowed1[this] := 0;
[L10111]              __tmp___totalSupply_ERC20[this] := 0;
[L10130]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L10131]  COND FALSE  !(revert)
[L10590]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L10591]  COND FALSE  !(revert)
[L10594]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10563]              assume msgsender_MSG != null;
[L10564]              __tmp__Balance[this] := 0;
[L10565]              __tmp___cap_ERC20Capped[this] := 0;
[L10567]  COND FALSE  !(!(cap_s528 > 0))
[L10571]              __tmp___cap_ERC20Capped[this] := cap_s528;
[L10594]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10595]  COND FALSE  !(revert)
[L10836]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TOTAL_CAP_ITAMToken[this]);
[L10837]  COND FALSE  !(revert)
[L10840]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10709]              assume msgsender_MSG != null;
[L10710]              __tmp__Balance[this] := 0;
[L10711]              __tmp__name_ITAMToken[this] := -1908028786;
[L10712]              __tmp__symbol_ITAMToken[this] := -1908028786;
[L10713]              __tmp__decimals_ITAMToken[this] := 18;
[L10714]              __tmp__TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10715]              __tmp__firstMaster_ITAMToken[this] := null;
[L10716]              __tmp__secondMaster_ITAMToken[this] := null;
[L10717]              __tmp__thirdMaster_ITAMToken[this] := null;
[L10718]              __tmp__decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10719]              __tmp__owner_ITAMToken[this] := null;
[L10720]              __tmp__gameMaster_ITAMToken[this] := null;
[L10721]              __tmp__blackLists_ITAMToken[this] := zeroRefboolArr();
[L10722]              __tmp__unlockCount_ITAMToken[this] := 0;
[L10723]              __tmp__strategicSaleAddress_ITAMToken[this] := null;
[L10724]              __tmp__Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10725]              __tmp__strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10726]              __tmp__sum_strategicSaleReleaseCaps4[this] := 0;
[L10727]              __tmp__privateSaleAddress_ITAMToken[this] := null;
[L10728]              __tmp__Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10729]              __tmp__privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10730]              __tmp__sum_privateSaleReleaseCaps5[this] := 0;
[L10731]              __tmp__publicSaleAddress_ITAMToken[this] := null;
[L10732]              __tmp__publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10733]              __tmp__teamAddress_ITAMToken[this] := null;
[L10734]              __tmp__Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10735]              __tmp__teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10736]              __tmp__sum_teamReleaseCaps6[this] := 0;
[L10737]              __tmp__advisorAddress_ITAMToken[this] := null;
[L10738]              __tmp__Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10739]              __tmp__advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10740]              __tmp__sum_advisorReleaseCaps7[this] := 0;
[L10741]              __tmp__marketingAddress_ITAMToken[this] := null;
[L10742]              __tmp__Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10743]              __tmp__marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10744]              __tmp__sum_marketingReleaseCaps8[this] := 0;
[L10745]              __tmp__ecoAddress_ITAMToken[this] := null;
[L10746]              __tmp__Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10747]              __tmp__ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10748]              __tmp__sum_ecoReleaseCaps9[this] := 0;
[L10749]              __tmp__inAppAddress_ITAMToken[this] := null;
[L10750]              __tmp__items_ITAMToken[this] := zerointintRefintArr();
[L10751]              __tmp__sum_items10[this] := 0;
[L10753]              __tmp__firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10754]              __tmp__secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10755]              __tmp__thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10756]              __tmp__owner_ITAMToken[this] := _owner_s868;
[L10757]              __tmp__gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10758]              __tmp__strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10759]              __tmp__privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10760]              __tmp__publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10761]              __tmp__teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10762]              __tmp__advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10763]              __tmp__marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10764]              __tmp__ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10765]              __tmp__inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10840]  RET         call ITAMToken_ITAMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10841]  COND FALSE  !(revert)
[L2037]   RET         call ITAMToken_ITAMToken__fail(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2038]               assume revert || gas < 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:57,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:57,628 INFO  L82        PathProgramCache]: Analyzing trace with hash 218065972, now seen corresponding path program 1 times
[2020-11-25 18:40:57,629 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:57,644 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:57,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 20 trivial. 0 not checked.
[2020-11-25 18:40:57,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:57,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:40:57,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:57,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:40:57,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:40:57,700 INFO  L87              Difference]: Start difference. First operand 14414 states and 16139 transitions. cyclomatic complexity: 1738 Second operand 4 states.
[2020-11-25 18:40:58,275 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:40:58,275 INFO  L93              Difference]: Finished difference Result 16009 states and 18045 transitions.
[2020-11-25 18:40:58,275 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 18:40:58,275 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16009 states and 18045 transitions.
[2020-11-25 18:40:58,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 18:40:58,351 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16009 states to 15795 states and 17714 transitions.
[2020-11-25 18:40:58,351 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 566
[2020-11-25 18:40:58,352 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 566
[2020-11-25 18:40:58,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15795 states and 17714 transitions.
[2020-11-25 18:40:58,362 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:40:58,362 INFO  L728         BuchiCegarLoop]: Abstraction has 15795 states and 17714 transitions.
[2020-11-25 18:40:58,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15795 states and 17714 transitions.
[2020-11-25 18:40:58,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15795 to 14252.
[2020-11-25 18:40:58,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14252 states.
[2020-11-25 18:40:58,469 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14252 states to 14252 states and 15859 transitions.
[2020-11-25 18:40:58,469 INFO  L751         BuchiCegarLoop]: Abstraction has 14252 states and 15859 transitions.
[2020-11-25 18:40:58,469 INFO  L631         BuchiCegarLoop]: Abstraction has 14252 states and 15859 transitions.
[2020-11-25 18:40:58,469 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 18:40:58,469 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14252 states and 15859 transitions.
[2020-11-25 18:40:58,483 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:40:58,483 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:40:58,483 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:40:58,485 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:40:58,485 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ITAMToken0 := false;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]      CALL        call main();
[L14663]              assume null == 0;
[L14664]  CALL        call this := FreshRefGenerator__success();
[L9908]               havoc newRef;
[L9909]               assume Alloc[newRef] == false;
[L9910]               Alloc[newRef] := true;
[L9911]               assume newRef != null;
[L14664]  RET         call this := FreshRefGenerator__success();
[L14665]              assume now >= 0;
[L14666]              assume DType[this] == ITAMToken;
[L14667]              assume msgvalue_MSG == 0;
[L14668]              gas := gas - 53000;
[L14669]  CALL        call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L1968]               havoc __exception;
[L1969]               revert := false;
[L1970]   COND FALSE  !(__exception)
[L2040]   CALL        call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10848]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10848]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10849]  COND FALSE  !(revert)
[L10852]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10602]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10138]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10118]              assume msgsender_MSG != null;
[L10119]              Balance[this] := 0;
[L10120]              _balances_ERC20[this] := zeroRefintArr();
[L10121]              sum__balances0[this] := 0;
[L10122]              _allowed_ERC20[this] := zeroRefRefintArr();
[L10123]              sum__allowed1[this] := 0;
[L10124]              _totalSupply_ERC20[this] := 0;
[L10138]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L10139]  COND FALSE  !(revert)
[L10602]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L10603]  COND FALSE  !(revert)
[L10606]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10577]              assume msgsender_MSG != null;
[L10578]              Balance[this] := 0;
[L10579]              _cap_ERC20Capped[this] := 0;
[L10581]  COND FALSE  !(!(cap_s528 > 0))
[L10585]              _cap_ERC20Capped[this] := cap_s528;
[L10606]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s528);
[L10607]  COND FALSE  !(revert)
[L10852]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, TOTAL_CAP_ITAMToken[this]);
[L10853]  COND FALSE  !(revert)
[L10856]  CALL        call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10771]              assume msgsender_MSG != null;
[L10772]              Balance[this] := 0;
[L10773]              name_ITAMToken[this] := -1908028786;
[L10774]              symbol_ITAMToken[this] := -1908028786;
[L10775]              decimals_ITAMToken[this] := 18;
[L10776]              TOTAL_CAP_ITAMToken[this] := 2500000000;
[L10777]              firstMaster_ITAMToken[this] := null;
[L10778]              secondMaster_ITAMToken[this] := null;
[L10779]              thirdMaster_ITAMToken[this] := null;
[L10780]              decidedOwner_ITAMToken[this] := zeroRefRefboolArr();
[L10781]              owner_ITAMToken[this] := null;
[L10782]              gameMaster_ITAMToken[this] := null;
[L10783]              blackLists_ITAMToken[this] := zeroRefboolArr();
[L10784]              unlockCount_ITAMToken[this] := 0;
[L10785]              strategicSaleAddress_ITAMToken[this] := null;
[L10786]              Length_strategicSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10787]              strategicSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10788]              sum_strategicSaleReleaseCaps4[this] := 0;
[L10789]              privateSaleAddress_ITAMToken[this] := null;
[L10790]              Length_privateSaleReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10791]              privateSaleReleaseCaps_ITAMToken[this] := zerointintArr();
[L10792]              sum_privateSaleReleaseCaps5[this] := 0;
[L10793]              publicSaleAddress_ITAMToken[this] := null;
[L10794]              publicSaleReleaseCap_ITAMToken[this] := 200000000;
[L10795]              teamAddress_ITAMToken[this] := null;
[L10796]              Length_teamReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10797]              teamReleaseCaps_ITAMToken[this] := zerointintArr();
[L10798]              sum_teamReleaseCaps6[this] := 0;
[L10799]              advisorAddress_ITAMToken[this] := null;
[L10800]              Length_advisorReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10801]              advisorReleaseCaps_ITAMToken[this] := zerointintArr();
[L10802]              sum_advisorReleaseCaps7[this] := 0;
[L10803]              marketingAddress_ITAMToken[this] := null;
[L10804]              Length_marketingReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10805]              marketingReleaseCaps_ITAMToken[this] := zerointintArr();
[L10806]              sum_marketingReleaseCaps8[this] := 0;
[L10807]              ecoAddress_ITAMToken[this] := null;
[L10808]              Length_ecoReleaseCaps_ITAMToken_lvl0[this] := 0;
[L10809]              ecoReleaseCaps_ITAMToken[this] := zerointintArr();
[L10810]              sum_ecoReleaseCaps9[this] := 0;
[L10811]              inAppAddress_ITAMToken[this] := null;
[L10812]              items_ITAMToken[this] := zerointintRefintArr();
[L10813]              sum_items10[this] := 0;
[L10815]              firstMaster_ITAMToken[this] := _firstMaster_s868;
[L10816]              secondMaster_ITAMToken[this] := _secondMaster_s868;
[L10817]              thirdMaster_ITAMToken[this] := _thirdMaster_s868;
[L10818]              owner_ITAMToken[this] := _owner_s868;
[L10819]              gameMaster_ITAMToken[this] := _gameMaster_s868;
[L10820]              strategicSaleAddress_ITAMToken[this] := _strategicSaleAddress_s868;
[L10821]              privateSaleAddress_ITAMToken[this] := _privateSaleAddress_s868;
[L10822]              publicSaleAddress_ITAMToken[this] := _publicSaleAddress_s868;
[L10823]              teamAddress_ITAMToken[this] := _teamAddress_s868;
[L10824]              advisorAddress_ITAMToken[this] := _advisorAddress_s868;
[L10825]              marketingAddress_ITAMToken[this] := _marketingAddress_s868;
[L10826]              ecoAddress_ITAMToken[this] := _ecoAddress_s868;
[L10827]              inAppAddress_ITAMToken[this] := _inAppAddress_s868;
[L10856]  RET         call ITAMToken_ITAMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L10857]  COND FALSE  !(revert)
[L2040]   RET         call ITAMToken_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L2041]               assume !revert && gas >= 0;
[L14669]  RET         call ITAMToken_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _firstMaster_s868, _secondMaster_s868, _thirdMaster_s868, _owner_s868, _gameMaster_s868, _strategicSaleAddress_s868, _privateSaleAddress_s868, _publicSaleAddress_s868, _teamAddress_s868, _advisorAddress_s868, _marketingAddress_s868, _ecoAddress_s868, _inAppAddress_s868);
[L14670]              assume !revert && gas >= 0;
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

Loop:
[L14673]  CALL        call CorralChoice_ITAMToken(this);
[L14239]              havoc msgsender_MSG;
[L14240]              havoc msgvalue_MSG;
[L14241]              havoc choice;
[L14242]              havoc _to_s941;
[L14243]              havoc _value_s941;
[L14244]              havoc __ret_0_transfer;
[L14245]              havoc spender_s980;
[L14246]              havoc value_s980;
[L14247]              havoc __ret_0_approve;
[L14248]              havoc _from_s962;
[L14249]              havoc _to_s962;
[L14250]              havoc _value_s962;
[L14251]              havoc __ret_0_transferFrom;
[L14252]              havoc __ret_0_totalSupply;
[L14253]              havoc owner_s247;
[L14254]              havoc __ret_0_balanceOf;
[L14255]              havoc owner_s263;
[L14256]              havoc spender_s263;
[L14257]              havoc __ret_0_allowance;
[L14258]              havoc cap_s528;
[L14259]              havoc __ret_0_cap;
[L14260]              havoc __ret_0_name;
[L14261]              havoc __ret_0_symbol;
[L14262]              havoc __ret_0_decimals;
[L14263]              havoc __ret_0_firstMaster;
[L14264]              havoc __ret_0_secondMaster;
[L14265]              havoc __ret_0_thirdMaster;
[L14266]              havoc arg1575_s0;
[L14267]              havoc arg1576_s0;
[L14268]              havoc __ret_0_decidedOwner;
[L14269]              havoc __ret_0_owner;
[L14270]              havoc __ret_0_gameMaster;
[L14271]              havoc arg1577_s0;
[L14272]              havoc __ret_0_blackLists;
[L14273]              havoc __ret_0_unlockCount;
[L14274]              havoc __ret_0_strategicSaleAddress;
[L14275]              havoc arg1578_s0;
[L14276]              havoc __ret_0_strategicSaleReleaseCaps;
[L14277]              havoc __ret_0_privateSaleAddress;
[L14278]              havoc arg1579_s0;
[L14279]              havoc __ret_0_privateSaleReleaseCaps;
[L14280]              havoc __ret_0_publicSaleAddress;
[L14281]              havoc __ret_0_publicSaleReleaseCap;
[L14282]              havoc __ret_0_teamAddress;
[L14283]              havoc arg1580_s0;
[L14284]              havoc __ret_0_teamReleaseCaps;
[L14285]              havoc __ret_0_advisorAddress;
[L14286]              havoc arg1581_s0;
[L14287]              havoc __ret_0_advisorReleaseCaps;
[L14288]              havoc __ret_0_marketingAddress;
[L14289]              havoc arg1582_s0;
[L14290]              havoc __ret_0_marketingReleaseCaps;
[L14291]              havoc __ret_0_ecoAddress;
[L14292]              havoc arg1583_s0;
[L14293]              havoc __ret_0_ecoReleaseCaps;
[L14294]              havoc __ret_0_inAppAddress;
[L14295]              havoc _firstMaster_s868;
[L14296]              havoc _secondMaster_s868;
[L14297]              havoc _thirdMaster_s868;
[L14298]              havoc _owner_s868;
[L14299]              havoc _gameMaster_s868;
[L14300]              havoc _strategicSaleAddress_s868;
[L14301]              havoc _privateSaleAddress_s868;
[L14302]              havoc _publicSaleAddress_s868;
[L14303]              havoc _teamAddress_s868;
[L14304]              havoc _advisorAddress_s868;
[L14305]              havoc _marketingAddress_s868;
[L14306]              havoc _ecoAddress_s868;
[L14307]              havoc _inAppAddress_s868;
[L14308]              havoc _gameMaster_s923;
[L14309]              havoc value_s996;
[L14310]              havoc __ret_0_unlock;
[L14311]              havoc _strategicSaleAddress_s1169;
[L14312]              havoc _privateSaleAddress_s1169;
[L14313]              havoc _publicSaleAddress_s1169;
[L14314]              havoc _teamAddress_s1169;
[L14315]              havoc _advisorAddress_s1169;
[L14316]              havoc _marketingAddress_s1169;
[L14317]              havoc _ecoAddress_s1169;
[L14318]              havoc _inAppAddress_s1169;
[L14319]              havoc _owner_s1242;
[L14320]              havoc _to_s1264;
[L14321]              havoc _to_s1285;
[L14322]              havoc amount_s1321;
[L14323]              havoc appId_s1413;
[L14324]              havoc itemIds_s1413;
[L14325]              havoc tokenAddresses_s1413;
[L14326]              havoc values_s1413;
[L14327]              havoc __ret_0_createOrUpdateItem;
[L14328]              havoc tokenAddress_s1494;
[L14329]              havoc appId_s1494;
[L14330]              havoc itemId_s1494;
[L14331]              havoc __ret_0_purchaseItemOnERC20;
[L14332]              havoc appId_s1531;
[L14333]              havoc itemId_s1531;
[L14334]              havoc __ret_0_purchaseItemOnITAM;
[L14335]              havoc appId_s1572;
[L14336]              havoc itemId_s1572;
[L14337]              havoc __ret_0_purchaseItemOnEther;
[L14338]              havoc tmpNow;
[L14339]              havoc gas;
[L14340]              assume gas > 4000000 && gas <= 8000000;
[L14341]              tmpNow := now;
[L14342]              havoc now;
[L14343]              assume now > tmpNow;
[L14344]              assume msgsender_MSG != null;
[L14345]              assume DType[msgsender_MSG] != SafeMath;
[L14346]              assume DType[msgsender_MSG] != IERC20;
[L14347]              assume DType[msgsender_MSG] != ERC20;
[L14348]              assume DType[msgsender_MSG] != ERC20Capped;
[L14349]              assume DType[msgsender_MSG] != ITAMToken;
[L14350]              Alloc[msgsender_MSG] := true;
[L14351]  COND FALSE  !(choice == 45)
[L14358]  COND FALSE  !(choice == 44)
[L14365]  COND TRUE   choice == 43
[L14366]              gas := gas - 21000;
[L14367]  COND TRUE   gas >= 0
[L14368]              assume _value_s962 >= 0 && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14369]              assume msgvalue_MSG == 0;
[L14370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s962 != _to_s962 && ((_value_s962 > _balances_ERC20[this][_from_s962] || _value_s962 > _allowed_ERC20[this][_from_s962][msgsender_MSG]) || _balances_ERC20[this][_to_s962] + _value_s962 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s962 >= 0) && _value_s962 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_to_s962] >= 0) && _balances_ERC20[this][_to_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][_from_s962] >= 0) && _balances_ERC20[this][_from_s962] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][_from_s962][msgsender_MSG] >= 0) && _allowed_ERC20[this][_from_s962][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ITAMToken0 := true;
[L2]                  call_transferFrom_ITAMToken0 := false;
[L2]                  revert := revert_hold;
[L2419]               havoc __exception;
[L2420]               revert := false;
[L2421]   COND FALSE  !(__exception)
[L2491]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10944]  CALL        call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L13804]  COND FALSE  !(!!blackLists_ITAMToken[this][msgsender_MSG])
[L10944]  RET         call onlyNotBlackList_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10945]  COND FALSE  !(revert)
[L10948]  COND TRUE   DType[this] == ITAMToken
[L10949]  CALL        call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10326]  COND TRUE   DType[this] == ITAMToken
[L10327]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10401]              __var_2 := null;
[L10402]  COND FALSE  !(!(to_s382 != null))
[L10406]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10406]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s382], value_s382);
[L10407]  COND FALSE  !(revert)
[L10410]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s382];
[L10411]              _balances_ERC20[this][from_s382] := __var_3;
[L10412]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s382];
[L10413]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10041]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10042]  COND FALSE  !(!(c_s106 >= a_s106))
[L10046]              __ret_0_ := c_s106;
[L10413]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s382], value_s382);
[L10414]  COND FALSE  !(revert)
[L10417]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s382];
[L10418]              _balances_ERC20[this][to_s382] := __var_4;
[L10419]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s382];
[L10420]              assert { :EventEmitted "Transfer_ERC20" } true;
[L10327]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, to_s336, value_s336);
[L10328]  COND FALSE  !(revert)
[L10344]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10017]  COND FALSE  !(!(b_s82 <= a_s82))
[L10021]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10022]              __ret_0_ := c_s82;
[L10344]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s336][msgsender_MSG], value_s336);
[L10345]  COND FALSE  !(revert)
[L10348]  COND TRUE   DType[this] == ITAMToken
[L10349]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10495]              __var_8 := null;
[L10496]  COND FALSE  !(!(spender_s464 != null))
[L10500]              __var_9 := null;
[L10501]  COND FALSE  !(!(owner_s464 != null))
[L10505]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] - _allowed_ERC20[this][owner_s464][spender_s464];
[L10506]              _allowed_ERC20[this][owner_s464][spender_s464] := value_s464;
[L10507]              sum__allowed1[owner_s464] := sum__allowed1[owner_s464] + _allowed_ERC20[this][owner_s464][spender_s464];
[L10508]              assert { :EventEmitted "Approval_ERC20" } true;
[L10349]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s336, msgsender_MSG, __var_1);
[L10350]  COND FALSE  !(revert)
[L10366]              __ret_0_ := true;
[L10949]  RET         call __var_18 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L10950]  COND FALSE  !(revert)
[L10956]              __ret_0_ := __var_18;
[L2491]   RET         call __ret_0_ := transferFrom~address~address~uint256_ITAMToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L2492]               assume !revert && gas >= 0;
[L14370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ITAMToken(this, msgsender_MSG, msgvalue_MSG, _from_s962, _to_s962, _value_s962);
[L14673]  RET         call CorralChoice_ITAMToken(this);

[2020-11-25 18:40:58,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:40:58,490 INFO  L82        PathProgramCache]: Analyzing trace with hash -686383820, now seen corresponding path program 1 times
[2020-11-25 18:40:58,490 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:40:58,531 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:40:58,763 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-25 18:40:58,764 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:40:58,764 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 18:40:58,764 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:40:58,764 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 18:40:58,764 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-25 18:40:58,764 INFO  L87              Difference]: Start difference. First operand 14252 states and 15859 transitions. cyclomatic complexity: 1620 Second operand 16 states.
[2020-11-25 18:41:05,947 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:41:05,947 INFO  L93              Difference]: Finished difference Result 7506 states and 8348 transitions.
[2020-11-25 18:41:05,947 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 18:41:05,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7506 states and 8348 transitions.
[2020-11-25 18:41:05,958 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:41:05,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7506 states to 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 18:41:05,958 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 18:41:05,958 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:41:05,958 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 18:41:05,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 18:41:05,958 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:41:05,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 18:41:05,961 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:41:05 BasicIcfg
[2020-11-25 18:41:05,961 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:41:05,962 INFO  L168              Benchmark]: Toolchain (without parser) took 40734.10 ms. Allocated memory was 1.0 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 913.7 MB in the beginning and 3.0 GB in the end (delta: -2.1 GB). Peak memory consumption was 240.8 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,963 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,963 INFO  L168              Benchmark]: Boogie Preprocessor took 165.12 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 892.2 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,964 INFO  L168              Benchmark]: UtopiaSpecLang took 97.49 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,964 INFO  L168              Benchmark]: Boogie Printer took 34.17 ms. Allocated memory is still 1.0 GB. Free memory was 876.0 MB in the beginning and 870.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,964 INFO  L168              Benchmark]: RCFGBuilder took 1141.51 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 865.3 MB in the beginning and 864.3 MB in the end (delta: 1.0 MB). Peak memory consumption was 160.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,964 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.96 ms. Allocated memory is still 1.1 GB. Free memory was 864.3 MB in the beginning and 860.8 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,965 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2464.57 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 860.8 MB in the beginning and 651.8 MB in the end (delta: 209.0 MB). Peak memory consumption was 481.3 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,965 INFO  L168              Benchmark]: BlockEncodingV2 took 405.76 ms. Allocated memory was 1.3 GB in the beginning and 1.6 GB in the end (delta: 291.0 MB). Free memory was 651.8 MB in the beginning and 1.3 GB in the end (delta: -609.6 MB). Peak memory consumption was 131.1 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,966 INFO  L168              Benchmark]: BuchiAutomizer took 36390.32 ms. Allocated memory was 1.6 GB in the beginning and 3.4 GB in the end (delta: 1.8 GB). Free memory was 1.3 GB in the beginning and 3.0 GB in the end (delta: -1.8 GB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:41:05,968 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    14822 locations, 24987 edges
  - StatisticsResult: Encoded RCFG
    14634 locations, 24511 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 165.12 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 892.2 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 97.49 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 34.17 ms. Allocated memory is still 1.0 GB. Free memory was 876.0 MB in the beginning and 870.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1141.51 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 865.3 MB in the beginning and 864.3 MB in the end (delta: 1.0 MB). Peak memory consumption was 160.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.96 ms. Allocated memory is still 1.1 GB. Free memory was 864.3 MB in the beginning and 860.8 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2464.57 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 860.8 MB in the beginning and 651.8 MB in the end (delta: 209.0 MB). Peak memory consumption was 481.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 405.76 ms. Allocated memory was 1.3 GB in the beginning and 1.6 GB in the end (delta: 291.0 MB). Free memory was 651.8 MB in the beginning and 1.3 GB in the end (delta: -609.6 MB). Peak memory consumption was 131.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 36390.32 ms. Allocated memory was 1.6 GB in the beginning and 3.4 GB in the end (delta: 1.8 GB). Free memory was 1.3 GB in the beginning and 3.0 GB in the end (delta: -1.8 GB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    6542 locations, 8020 edges
  - StatisticsResult: BuchiProgram size
    14822 locations, 24987 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 36.3s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 2.1s. Construction of modules took 23.7s. BÃ¼chi inclusion checks took 8.0s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 9 MinimizatonAttempts, 3527 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 14689 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 138956 SDtfs, 111684 SDslu, 256011 SDs, 0 SdLazy, 529156 SolverSat, 14205 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 23.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ITAMToken0) ==> ( <>(fail_transferFrom_ITAMToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
