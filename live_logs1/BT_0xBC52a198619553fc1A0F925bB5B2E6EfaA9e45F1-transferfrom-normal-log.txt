This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:31:37,971 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:31:37,973 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:31:37,983 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:31:37,983 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:31:37,983 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:31:37,984 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:31:37,986 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:31:37,987 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:31:37,988 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:31:37,989 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:31:37,989 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:31:37,989 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:31:37,990 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:31:37,991 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:31:37,991 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:31:37,992 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:31:37,993 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:31:37,995 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:31:37,996 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:31:37,996 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:31:37,997 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:31:37,999 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:31:37,999 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:31:37,999 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:31:38,000 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:31:38,000 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:31:38,000 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:31:38,001 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:31:38,001 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:31:38,001 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:31:38,002 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:31:38,002 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:31:38,003 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:31:38,004 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:31:38,004 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:31:38,004 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:31:38,004 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:31:38,004 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:31:38,005 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:31:38,006 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:31:38,006 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:31:38,013 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:31:38,014 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:31:38,014 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:31:38,014 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:31:38,015 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:31:38,015 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:31:38,015 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:31:38,016 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:31:38,016 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:31:38,017 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:31:38,017 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:31:38,017 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:31:38,038 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:31:38,051 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:31:38,054 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:31:38,056 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:31:38,057 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:31:38,057 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl
[2020-11-25 01:31:38,058 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl'
[2020-11-25 01:31:38,135 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:31:38,136 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:31:38,137 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:31:38,137 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:31:38,137 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:31:38,153 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,155 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,182 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,182 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,209 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,218 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,225 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,235 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:31:38,236 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:31:38,236 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:31:38,238 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:31:38,242 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/1) ...
[2020-11-25 01:31:38,261 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]))))
[2020-11-25 01:31:38,267 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]))))
[2020-11-25 01:31:38,275 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]))))
[2020-11-25 01:31:38,283 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s429 && p1!=to_s429 ) && ( p2!=from_s429 || p3!=msg.sender ) ) && from_s429!=to_s429 ) && value_s429<=_balances_ERC20[this][from_s429] ) && value_s429<=_allowed_ERC20[this][from_s429][msg.sender] ) && ( _balances_ERC20[this][to_s429] + value_s429 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s429>=0 ) && value_s429<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s429]>=0 ) && _balances_ERC20[this][to_s429]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s429]>=0 ) && _balances_ERC20[this][from_s429]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s429][msg.sender]>=0 ) && _allowed_ERC20[this][from_s429][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:31:38,286 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][from_s429]==( ( old(_balances_ERC20[this][from_s429]) ) - value_s429 ) ) && _balances_ERC20[this][to_s429]==( ( old(_balances_ERC20[this][to_s429]) ) + value_s429 ) ) && _allowed_ERC20[this][from_s429][msg.sender]==( ( old(_allowed_ERC20[this][from_s429][msg.sender]) ) - value_s429 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowed_ERC20[this][p2][p3]==( old(_allowed_ERC20[this][p2][p3]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]]
[2020-11-25 01:31:38,291 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]))))
[2020-11-25 01:31:38,292 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(success_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:31:38,300 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:31:38 PropertyContainer
[2020-11-25 01:31:38,300 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:31:38,300 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:31:38,300 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:31:38,300 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:31:38,301 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/2) ...
[2020-11-25 01:31:38,301 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:31:38,301 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:31:38,315 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:31:38" (2/2) ...
[2020-11-25 01:31:38,315 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:31:38,315 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:31:38,315 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:31:38,315 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:31:38,316 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/2) ...
[2020-11-25 01:31:38,371 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:31:38,371 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:31:38,371 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:31:38,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:31:38,371 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:31:38,371 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:31:38,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,372 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 01:31:38,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 01:31:38,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 01:31:38,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 01:31:38,373 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 01:31:38,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:31:38,374 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT
[2020-11-25 01:31:38,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT
[2020-11-25 01:31:38,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT
[2020-11-25 01:31:38,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT
[2020-11-25 01:31:38,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT
[2020-11-25 01:31:38,375 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT
[2020-11-25 01:31:38,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT
[2020-11-25 01:31:38,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:31:38,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:31:38,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BT
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 01:31:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:31:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__success
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__success
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__success
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__fail
[2020-11-25 01:31:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__success
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__fail
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__success
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__fail
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:31:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:31:38,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:31:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:31:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 01:31:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:31:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:31:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__fail
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__success
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__fail
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__success
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__fail
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__success
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__fail
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__success
[2020-11-25 01:31:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__fail
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__success
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:31:38,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BT
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:31:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:31:38,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:31:38,725 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:31:38,726 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:31:38,726 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:31:38,832 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:31:39,071 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:31:39,071 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 01:31:39,073 INFO  L202        PluginConnector]: Adding new model BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:31:39 BoogieIcfgContainer
[2020-11-25 01:31:39,073 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:31:38" (2/2) ...
[2020-11-25 01:31:39,073 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:31:39,074 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@a90e8c2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:31:39, skipping insertion in model container
[2020-11-25 01:31:39,074 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:31:39,074 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:31:39,074 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:31:39,076 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:31:39,076 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/3) ...
[2020-11-25 01:31:39,076 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5f1ef893 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:31:39, skipping insertion in model container
[2020-11-25 01:31:39,076 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:31:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:31:39,114 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:31:39 NWAContainer
[2020-11-25 01:31:39,114 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:31:39,115 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:31:39,115 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:31:39,116 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:31:39,117 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:31:39" (3/4) ...
[2020-11-25 01:31:39,117 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5be25667 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:31:39, skipping insertion in model container
[2020-11-25 01:31:39,117 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:31:39" (4/4) ...
[2020-11-25 01:31:39,120 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:31:39,124 INFO  L110   BuchiProductObserver]: Initial RCFG 1243 locations, 1629 edges
[2020-11-25 01:31:39,124 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:31:39,134 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:31:40,332 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:31:40,337 INFO  L110   BuchiProductObserver]: BuchiProgram size 3028 locations, 5310 edges
[2020-11-25 01:31:40,337 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:31:40 BoogieIcfgContainer
[2020-11-25 01:31:40,338 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:31:40,338 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:31:40,338 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:31:40,340 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:31:40,340 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:31:40" (1/1) ...
[2020-11-25 01:31:40,397 INFO  L313           BlockEncoder]: Initial Icfg 3028 locations, 5310 edges
[2020-11-25 01:31:40,397 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:31:40,398 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:31:40,398 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:31:40,398 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:31:40,407 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 11 locations because of local infeasibility
[2020-11-25 01:31:40,415 INFO  L70        RemoveSinkStates]: Removed 26 edges and 17 locations by removing sink states
[2020-11-25 01:31:40,423 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:31:40,426 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:31:40,427 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:31:40,428 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:31:40,431 INFO  L313           BlockEncoder]: Encoded RCFG 2978 locations, 5177 edges
[2020-11-25 01:31:40,431 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:31:40 BasicIcfg
[2020-11-25 01:31:40,431 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:31:40,431 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:31:40,432 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:31:40,433 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:31:40,433 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,433 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:31:38" (1/6) ...
[2020-11-25 01:31:40,435 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7b92a739 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:31:40, skipping insertion in model container
[2020-11-25 01:31:40,435 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,435 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:31:38" (2/6) ...
[2020-11-25 01:31:40,435 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7b92a739 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:31:40, skipping insertion in model container
[2020-11-25 01:31:40,435 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,435 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:31:39" (3/6) ...
[2020-11-25 01:31:40,435 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7b92a739 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:31:40, skipping insertion in model container
[2020-11-25 01:31:40,435 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,436 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:31:39" (4/6) ...
[2020-11-25 01:31:40,436 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7b92a739 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:31:40, skipping insertion in model container
[2020-11-25 01:31:40,436 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,436 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:31:40" (5/6) ...
[2020-11-25 01:31:40,436 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7b92a739 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:31:40, skipping insertion in model container
[2020-11-25 01:31:40,436 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:31:40,436 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:31:40" (6/6) ...
[2020-11-25 01:31:40,437 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-normal.bpl_BEv2
[2020-11-25 01:31:40,466 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:31:40,467 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:31:40,467 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:31:40,467 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:31:40,467 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:31:40,467 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:31:40,467 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:31:40,467 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:31:40,467 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:31:40,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2978 states.
[2020-11-25 01:31:40,535 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:40,536 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:40,536 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:40,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:40,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:40,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:31:40,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2978 states.
[2020-11-25 01:31:40,567 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:40,568 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:40,568 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:40,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:40,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND TRUE   choice == 14
[L3366]              gas := gas - 21000;
[L3367]  COND FALSE  !(gas >= 0)
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:40,586 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:40,586 INFO  L82        PathProgramCache]: Analyzing trace with hash 292572305, now seen corresponding path program 1 times
[2020-11-25 01:31:40,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:40,609 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:40,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:31:40,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:31:40,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:31:40,764 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:40,780 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:31:40,780 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:31:40,782 INFO  L87              Difference]: Start difference. First operand 2978 states. Second operand 3 states.
[2020-11-25 01:31:40,952 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:40,952 INFO  L93              Difference]: Finished difference Result 2114 states and 2383 transitions.
[2020-11-25 01:31:40,952 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:31:40,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2114 states and 2383 transitions.
[2020-11-25 01:31:40,967 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:40,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2114 states to 2114 states and 2383 transitions.
[2020-11-25 01:31:40,986 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:31:40,988 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 551
[2020-11-25 01:31:40,989 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2114 states and 2383 transitions.
[2020-11-25 01:31:40,995 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:40,996 INFO  L728         BuchiCegarLoop]: Abstraction has 2114 states and 2383 transitions.
[2020-11-25 01:31:41,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2114 states and 2383 transitions.
[2020-11-25 01:31:41,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2114 to 2114.
[2020-11-25 01:31:41,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2114 states.
[2020-11-25 01:31:41,058 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2114 states to 2114 states and 2383 transitions.
[2020-11-25 01:31:41,059 INFO  L751         BuchiCegarLoop]: Abstraction has 2114 states and 2383 transitions.
[2020-11-25 01:31:41,059 INFO  L631         BuchiCegarLoop]: Abstraction has 2114 states and 2383 transitions.
[2020-11-25 01:31:41,059 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:31:41,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2114 states and 2383 transitions.
[2020-11-25 01:31:41,066 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:41,067 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:41,067 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:41,069 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:41,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:41,073 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:41,073 INFO  L82        PathProgramCache]: Analyzing trace with hash 1012044175, now seen corresponding path program 1 times
[2020-11-25 01:31:41,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:41,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:41,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:31:41,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:31:41,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:31:41,109 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:41,109 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:31:41,109 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:31:41,110 INFO  L87              Difference]: Start difference. First operand 2114 states and 2383 transitions. cyclomatic complexity: 271 Second operand 3 states.
[2020-11-25 01:31:41,180 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:41,181 INFO  L93              Difference]: Finished difference Result 2784 states and 3195 transitions.
[2020-11-25 01:31:41,181 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:31:41,181 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2784 states and 3195 transitions.
[2020-11-25 01:31:41,196 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:31:41,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2784 states to 2784 states and 3195 transitions.
[2020-11-25 01:31:41,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 741
[2020-11-25 01:31:41,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 741
[2020-11-25 01:31:41,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2784 states and 3195 transitions.
[2020-11-25 01:31:41,218 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:41,218 INFO  L728         BuchiCegarLoop]: Abstraction has 2784 states and 3195 transitions.
[2020-11-25 01:31:41,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2784 states and 3195 transitions.
[2020-11-25 01:31:41,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2784 to 2282.
[2020-11-25 01:31:41,249 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2282 states.
[2020-11-25 01:31:41,254 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2282 states to 2282 states and 2585 transitions.
[2020-11-25 01:31:41,254 INFO  L751         BuchiCegarLoop]: Abstraction has 2282 states and 2585 transitions.
[2020-11-25 01:31:41,254 INFO  L631         BuchiCegarLoop]: Abstraction has 2282 states and 2585 transitions.
[2020-11-25 01:31:41,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:31:41,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2282 states and 2585 transitions.
[2020-11-25 01:31:41,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:41,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:41,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:41,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:41,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND TRUE   !(account_s571 != null)
[L2079]              revert := true;
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND TRUE   revert
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:41,266 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:41,266 INFO  L82        PathProgramCache]: Analyzing trace with hash -1187041097, now seen corresponding path program 1 times
[2020-11-25 01:31:41,267 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:41,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:41,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 01:31:41,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:31:41,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:31:41,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:41,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:31:41,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:31:41,321 INFO  L87              Difference]: Start difference. First operand 2282 states and 2585 transitions. cyclomatic complexity: 305 Second operand 7 states.
[2020-11-25 01:31:41,364 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:41,364 INFO  L93              Difference]: Finished difference Result 2290 states and 2592 transitions.
[2020-11-25 01:31:41,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:31:41,364 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2290 states and 2592 transitions.
[2020-11-25 01:31:41,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:41,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2290 states to 2281 states and 2583 transitions.
[2020-11-25 01:31:41,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 01:31:41,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-11-25 01:31:41,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2281 states and 2583 transitions.
[2020-11-25 01:31:41,388 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:41,388 INFO  L728         BuchiCegarLoop]: Abstraction has 2281 states and 2583 transitions.
[2020-11-25 01:31:41,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2281 states and 2583 transitions.
[2020-11-25 01:31:41,410 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2281 to 2281.
[2020-11-25 01:31:41,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2281 states.
[2020-11-25 01:31:41,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2281 states to 2281 states and 2583 transitions.
[2020-11-25 01:31:41,413 INFO  L751         BuchiCegarLoop]: Abstraction has 2281 states and 2583 transitions.
[2020-11-25 01:31:41,413 INFO  L631         BuchiCegarLoop]: Abstraction has 2281 states and 2583 transitions.
[2020-11-25 01:31:41,413 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:31:41,413 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2281 states and 2583 transitions.
[2020-11-25 01:31:41,417 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:41,417 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:41,417 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:41,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:41,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND FALSE  !(!(account_s571 != null))
[L2082]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND TRUE   !(c_s173 >= a_s173)
[L1668]              revert := true;
[L2082]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2083]  COND TRUE   revert
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND TRUE   revert
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND FALSE  !(__exception)
[L550]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1927]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1928]              revert := true;
[L550]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L551]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _balances_ERC20[this][from_s429] == old(_balances_ERC20[this][from_s429]) - value_s429) && _balances_ERC20[this][to_s429] == old(_balances_ERC20[this][to_s429]) + value_s429) && _allowed_ERC20[this][from_s429][msgsender_MSG] == old(_allowed_ERC20[this][from_s429][msgsender_MSG]) - value_s429) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]));
[L3]                 revert := revert_hold;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:41,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:41,421 INFO  L82        PathProgramCache]: Analyzing trace with hash 1732732994, now seen corresponding path program 1 times
[2020-11-25 01:31:41,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:41,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:41,453 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 01:31:41,453 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:31:41,453 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:31:41,453 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:41,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:31:41,454 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:31:41,454 INFO  L87              Difference]: Start difference. First operand 2281 states and 2583 transitions. cyclomatic complexity: 304 Second operand 3 states.
[2020-11-25 01:31:41,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:41,493 INFO  L93              Difference]: Finished difference Result 2783 states and 3113 transitions.
[2020-11-25 01:31:41,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:31:41,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2783 states and 3113 transitions.
[2020-11-25 01:31:41,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:31:41,514 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2783 states to 2592 states and 2887 transitions.
[2020-11-25 01:31:41,514 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 680
[2020-11-25 01:31:41,515 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 01:31:41,515 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2592 states and 2887 transitions.
[2020-11-25 01:31:41,518 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:41,518 INFO  L728         BuchiCegarLoop]: Abstraction has 2592 states and 2887 transitions.
[2020-11-25 01:31:41,520 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2592 states and 2887 transitions.
[2020-11-25 01:31:41,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2592 to 2158.
[2020-11-25 01:31:41,539 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2158 states.
[2020-11-25 01:31:41,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2158 states to 2158 states and 2345 transitions.
[2020-11-25 01:31:41,542 INFO  L751         BuchiCegarLoop]: Abstraction has 2158 states and 2345 transitions.
[2020-11-25 01:31:41,542 INFO  L631         BuchiCegarLoop]: Abstraction has 2158 states and 2345 transitions.
[2020-11-25 01:31:41,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:31:41,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2158 states and 2345 transitions.
[2020-11-25 01:31:41,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:31:41,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:41,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:41,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:41,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND FALSE  !(!(account_s571 != null))
[L2082]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2082]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2083]  COND FALSE  !(revert)
[L2086]              _totalSupply_ERC20[this] := __var_14;
[L2087]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2087]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2088]  COND FALSE  !(revert)
[L2091]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2092]              _balances_ERC20[this][account_s571] := __var_15;
[L2093]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2094]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND FALSE  !(revert)
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND TRUE   !(value_s429 <= __tmp___balances_ERC20[this][from_s429])
[L1884]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND TRUE   !(value_s429 <= __tmp___balances_ERC20[this][from_s429])
[L1884]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:41,551 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:41,551 INFO  L82        PathProgramCache]: Analyzing trace with hash -882183473, now seen corresponding path program 1 times
[2020-11-25 01:31:41,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:41,565 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:41,718 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:31:41,718 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:31:41,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:31:41,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:41,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:31:41,720 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:31:41,721 INFO  L87              Difference]: Start difference. First operand 2158 states and 2345 transitions. cyclomatic complexity: 189 Second operand 15 states.
[2020-11-25 01:31:43,392 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:43,392 INFO  L93              Difference]: Finished difference Result 2366 states and 2603 transitions.
[2020-11-25 01:31:43,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:31:43,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2366 states and 2603 transitions.
[2020-11-25 01:31:43,397 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:31:43,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2366 states to 2366 states and 2603 transitions.
[2020-11-25 01:31:43,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 656
[2020-11-25 01:31:43,405 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 656
[2020-11-25 01:31:43,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2366 states and 2603 transitions.
[2020-11-25 01:31:43,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:43,407 INFO  L728         BuchiCegarLoop]: Abstraction has 2366 states and 2603 transitions.
[2020-11-25 01:31:43,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2366 states and 2603 transitions.
[2020-11-25 01:31:43,430 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2366 to 2297.
[2020-11-25 01:31:43,430 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2297 states.
[2020-11-25 01:31:43,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2297 states to 2297 states and 2501 transitions.
[2020-11-25 01:31:43,433 INFO  L751         BuchiCegarLoop]: Abstraction has 2297 states and 2501 transitions.
[2020-11-25 01:31:43,433 INFO  L631         BuchiCegarLoop]: Abstraction has 2297 states and 2501 transitions.
[2020-11-25 01:31:43,433 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:31:43,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2297 states and 2501 transitions.
[2020-11-25 01:31:43,436 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:31:43,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:43,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:43,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:43,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND FALSE  !(!(account_s571 != null))
[L2082]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2082]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2083]  COND FALSE  !(revert)
[L2086]              _totalSupply_ERC20[this] := __var_14;
[L2087]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2087]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2088]  COND FALSE  !(revert)
[L2091]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2092]              _balances_ERC20[this][account_s571] := __var_15;
[L2093]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2094]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND FALSE  !(revert)
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND TRUE   !(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG])
[L1888]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND TRUE   !(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG])
[L1888]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:43,440 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:43,441 INFO  L82        PathProgramCache]: Analyzing trace with hash -1267017930, now seen corresponding path program 1 times
[2020-11-25 01:31:43,441 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:43,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:31:43,484 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:31:43,484 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:31:43,484 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:31:43,484 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:31:43,484 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:31:43,484 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:31:43,485 INFO  L87              Difference]: Start difference. First operand 2297 states and 2501 transitions. cyclomatic complexity: 208 Second operand 6 states.
[2020-11-25 01:31:43,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:31:43,933 INFO  L93              Difference]: Finished difference Result 2378 states and 2604 transitions.
[2020-11-25 01:31:43,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:31:43,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2378 states and 2604 transitions.
[2020-11-25 01:31:43,940 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:31:43,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2378 states to 2378 states and 2604 transitions.
[2020-11-25 01:31:43,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-11-25 01:31:43,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-25 01:31:43,947 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2378 states and 2604 transitions.
[2020-11-25 01:31:43,949 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:31:43,949 INFO  L728         BuchiCegarLoop]: Abstraction has 2378 states and 2604 transitions.
[2020-11-25 01:31:43,951 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2378 states and 2604 transitions.
[2020-11-25 01:31:43,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2378 to 2301.
[2020-11-25 01:31:43,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2301 states.
[2020-11-25 01:31:43,971 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2301 states to 2301 states and 2505 transitions.
[2020-11-25 01:31:43,971 INFO  L751         BuchiCegarLoop]: Abstraction has 2301 states and 2505 transitions.
[2020-11-25 01:31:43,971 INFO  L631         BuchiCegarLoop]: Abstraction has 2301 states and 2505 transitions.
[2020-11-25 01:31:43,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:31:43,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2301 states and 2505 transitions.
[2020-11-25 01:31:43,974 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:31:43,974 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:31:43,974 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:31:43,976 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:31:43,976 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3464]              assume null == 0;
[L3465]  CALL        call this := FreshRefGenerator__success();
[L1501]              havoc newRef;
[L1502]              assume Alloc[newRef] == false;
[L1503]              Alloc[newRef] := true;
[L1504]              assume newRef != null;
[L3465]  RET         call this := FreshRefGenerator__success();
[L3466]              assume now >= 0;
[L3467]              assume DType[this] == BT;
[L3468]              assume msgvalue_MSG == 0;
[L3469]              gas := gas - 53000;
[L3470]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND FALSE  !(!(account_s571 != null))
[L2082]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2082]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2083]  COND FALSE  !(revert)
[L2086]              _totalSupply_ERC20[this] := __var_14;
[L2087]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2087]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2088]  COND FALSE  !(revert)
[L2091]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2092]              _balances_ERC20[this][account_s571] := __var_15;
[L2093]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2094]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND FALSE  !(revert)
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3471]              assume !revert && gas >= 0;
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND FALSE  !(!(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1891]              __var_5 := null;
[L1892]  COND TRUE   !(to_s429 != null)
[L1893]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

Loop:
[L3474]  CALL        call CorralChoice_BT(this);
[L3321]              havoc msgsender_MSG;
[L3322]              havoc msgvalue_MSG;
[L3323]              havoc choice;
[L3324]              havoc __ret_0_totalSupply;
[L3325]              havoc owner_s231;
[L3326]              havoc __ret_0_balanceOf;
[L3327]              havoc owner_s247;
[L3328]              havoc spender_s247;
[L3329]              havoc __ret_0_allowance;
[L3330]              havoc to_s307;
[L3331]              havoc value_s307;
[L3332]              havoc __ret_0_transfer;
[L3333]              havoc spender_s343;
[L3334]              havoc value_s343;
[L3335]              havoc __ret_0_approve;
[L3336]              havoc from_s429;
[L3337]              havoc to_s429;
[L3338]              havoc value_s429;
[L3339]              havoc __ret_0_transferFrom;
[L3340]              havoc spender_s479;
[L3341]              havoc addedValue_s479;
[L3342]              havoc __ret_0_increaseAllowance;
[L3343]              havoc spender_s529;
[L3344]              havoc subtractedValue_s529;
[L3345]              havoc __ret_0_decreaseAllowance;
[L3346]              havoc __ret_0_name;
[L3347]              havoc __ret_0_symbol;
[L3348]              havoc __ret_0_decimals;
[L3349]              havoc __ret_0_INITIAL_SUPPLY;
[L3350]              havoc amount_s706;
[L3351]              havoc account_s719;
[L3352]              havoc amount_s719;
[L3353]              havoc tmpNow;
[L3354]              havoc gas;
[L3355]              assume gas > 4000000 && gas <= 8000000;
[L3356]              tmpNow := now;
[L3357]              havoc now;
[L3358]              assume now > tmpNow;
[L3359]              assume msgsender_MSG != null;
[L3360]              assume DType[msgsender_MSG] != IERC20;
[L3361]              assume DType[msgsender_MSG] != SafeMath;
[L3362]              assume DType[msgsender_MSG] != ERC20;
[L3363]              assume DType[msgsender_MSG] != BT;
[L3364]              Alloc[msgsender_MSG] := true;
[L3365]  COND FALSE  !(choice == 14)
[L3371]  COND FALSE  !(choice == 13)
[L3377]  COND FALSE  !(choice == 12)
[L3383]  COND FALSE  !(choice == 11)
[L3390]  COND FALSE  !(choice == 10)
[L3397]  COND TRUE   choice == 9
[L3398]              gas := gas - 21000;
[L3399]  COND TRUE   gas >= 0
[L3400]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3401]              assume msgvalue_MSG == 0;
[L3402]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND FALSE  !(!(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1891]              __var_5 := null;
[L1892]  COND TRUE   !(to_s429 != null)
[L1893]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3474]  RET         call CorralChoice_BT(this);

[2020-11-25 01:31:43,979 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:43,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 833904457, now seen corresponding path program 1 times
[2020-11-25 01:31:43,980 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:44,009 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:44,026 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:44,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:44,101 INFO  L82        PathProgramCache]: Analyzing trace with hash -1984313369, now seen corresponding path program 1 times
[2020-11-25 01:31:44,102 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:44,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:44,109 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:44,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:31:44,117 INFO  L82        PathProgramCache]: Analyzing trace with hash 746991919, now seen corresponding path program 1 times
[2020-11-25 01:31:44,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:31:44,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:44,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 5281 to 10559
[2020-11-25 01:31:44,536 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 108
[2020-11-25 01:31:44,737 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification that was a NOOP. DAG size: 253
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 6271 to 12541
[2020-11-25 01:31:45,245 WARN  L188               SmtUtils]: Spent 493.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 211
[2020-11-25 01:31:46,029 WARN  L188               SmtUtils]: Spent 780.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 248
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 7027 to 14051
[2020-11-25 01:31:46,221 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 150
[2020-11-25 01:31:46,492 WARN  L188               SmtUtils]: Spent 269.00 ms on a formula simplification that was a NOOP. DAG size: 294
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 01:31:46,867 WARN  L188               SmtUtils]: Spent 366.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 235
[2020-11-25 01:31:47,036 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification that was a NOOP. DAG size: 235
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 01:31:47,588 WARN  L188               SmtUtils]: Spent 539.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 154
[2020-11-25 01:31:47,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 01:31:48,153 WARN  L188               SmtUtils]: Spent 238.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 152
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 01:31:49,189 WARN  L188               SmtUtils]: Spent 466.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 210
[2020-11-25 01:31:49,821 WARN  L188               SmtUtils]: Spent 629.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 247
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 01:31:50,044 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 149
[2020-11-25 01:31:50,257 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 01:31:50,592 WARN  L188               SmtUtils]: Spent 329.00 ms on a formula simplification. DAG size of input: 234 DAG size of output: 234
[2020-11-25 01:31:51,620 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 420 DAG size of output: 404
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 01:31:52,527 WARN  L188               SmtUtils]: Spent 887.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 193
[2020-11-25 01:31:52,882 WARN  L188               SmtUtils]: Spent 342.00 ms on a formula simplification that was a NOOP. DAG size: 294
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 01:31:53,472 WARN  L188               SmtUtils]: Spent 570.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 183
[2020-11-25 01:31:54,042 WARN  L188               SmtUtils]: Spent 568.00 ms on a formula simplification. DAG size of input: 286 DAG size of output: 285
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
[2020-11-25 01:31:54,589 WARN  L188               SmtUtils]: Spent 540.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 280
[2020-11-25 01:31:54,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:54,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:31:54,630 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:31:54 BasicIcfg
[2020-11-25 01:31:54,630 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:31:54,631 INFO  L168              Benchmark]: Toolchain (without parser) took 16494.98 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 940.6 MB in the beginning and 2.1 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,631 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,631 INFO  L168              Benchmark]: Boogie Preprocessor took 98.60 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,631 INFO  L168              Benchmark]: UtopiaSpecLang took 64.24 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,632 INFO  L168              Benchmark]: Boogie Printer took 14.92 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,632 INFO  L168              Benchmark]: RCFGBuilder took 758.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.4 MB in the end (delta: 96.7 MB). Peak memory consumption was 96.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,632 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.49 ms. Allocated memory is still 1.0 GB. Free memory was 822.4 MB in the beginning and 818.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,632 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1222.96 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 207.6 MB). Free memory was 818.8 MB in the beginning and 1.2 GB in the end (delta: -349.9 MB). Peak memory consumption was 195.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,633 INFO  L168              Benchmark]: BlockEncodingV2 took 93.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 57.3 MB). Peak memory consumption was 57.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,633 INFO  L168              Benchmark]: BuchiAutomizer took 14198.84 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: -938.7 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 01:31:54,635 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3028 locations, 5310 edges
  - StatisticsResult: Encoded RCFG
    2978 locations, 5177 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 98.60 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.24 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.92 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 758.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.4 MB in the end (delta: 96.7 MB). Peak memory consumption was 96.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.49 ms. Allocated memory is still 1.0 GB. Free memory was 822.4 MB in the beginning and 818.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1222.96 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 207.6 MB). Free memory was 818.8 MB in the beginning and 1.2 GB in the end (delta: -349.9 MB). Peak memory consumption was 195.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 93.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 57.3 MB). Peak memory consumption was 57.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14198.84 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: -938.7 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1243 locations, 1629 edges
  - StatisticsResult: BuchiProgram size
    3028 locations, 5310 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 2301 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.1s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 11.1s. Construction of modules took 1.7s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1082 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2301 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 14378 SDtfs, 10544 SDslu, 26357 SDs, 0 SdLazy, 21460 SolverSat, 2231 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913100000015) = (new BT)({from : 115792089237316195423570985008687907853269984665640564039457584007913100000013});
[L727]               havoc __exception;
[L728]               revert := false;
[L729]   COND FALSE  !(__exception)
[L751]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L2276]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1518]              assume msgsender_MSG != null;
[L1519]              Balance[this] := 0;
[L1533]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1534]  COND FALSE  !(revert)
[L1735]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1736]  COND FALSE  !(revert)
[L1739]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]              assume msgsender_MSG != null;
[L1712]              Balance[this] := 0;
[L1713]              _balances_ERC20[this] := zeroRefintArr();
[L1714]              sum__balances0[this] := 0;
[L1715]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1716]              sum__allowed1[this] := 0;
[L1717]              _totalSupply_ERC20[this] := 0;
[L1739]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]  COND FALSE  !(revert)
[L2280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]              assume msgsender_MSG != null;
[L2239]              Balance[this] := 0;
[L2240]              name_BT[this] := 876474985;
[L2241]              symbol_BT[this] := 95884948;
[L2242]              decimals_BT[this] := 18;
[L2243]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2244]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2246]  COND TRUE   DType[this] == BT
[L2247]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2077]              __var_13 := null;
[L2078]  COND FALSE  !(!(account_s571 != null))
[L2082]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2082]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2083]  COND FALSE  !(revert)
[L2086]              _totalSupply_ERC20[this] := __var_14;
[L2087]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1666]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1667]  COND FALSE  !(!(c_s173 >= a_s173))
[L1671]              __ret_0_ := c_s173;
[L2087]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2088]  COND FALSE  !(revert)
[L2091]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2092]              _balances_ERC20[this][account_s571] := __var_15;
[L2093]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2094]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2247]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2248]  COND FALSE  !(revert)
[L2284]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L751]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L752]               assume !revert && gas >= 0;
[L3470]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
ERC20(115792089237316195423570985008687907853269984665640564039457584007913100000015).transferFrom~address~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913100000012, from : 115792089237316195423570985008687907853269984665640564039457584007913100000013, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND FALSE  !(!(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1891]              __var_5 := null;
[L1892]  COND TRUE   !(to_s429 != null)
[L1893]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);

Loop:
ERC20(115792089237316195423570985008687907853269984665640564039457584007913100000015).transferFrom~address~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913100000001, from : 115792089237316195423570985008687907853269984665640564039457584007913100000013, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s429 && p1 != to_s429) && (p2 != from_s429 || p3 != msgsender_MSG)) && from_s429 != to_s429) && value_s429 <= _balances_ERC20[this][from_s429]) && value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]) && _balances_ERC20[this][to_s429] + value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L526]               havoc __exception;
[L527]               revert := false;
[L528]   COND TRUE   __exception
[L529]               __tmp__Balance := Balance;
[L530]               __tmp__DType := DType;
[L531]               __tmp__Alloc := Alloc;
[L532]               __tmp__balance_ADDR := balance_ADDR;
[L533]               __tmp__M_Ref_int := M_Ref_int;
[L534]               __tmp__sum__balances0 := sum__balances0;
[L535]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L536]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L537]               __tmp__sum__allowed1 := sum__allowed1;
[L538]               __tmp__Length := Length;
[L539]               __tmp__now := now;
[L540]               __tmp___balances_ERC20 := _balances_ERC20;
[L541]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L542]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L543]               __tmp__name_BT := name_BT;
[L544]               __tmp__symbol_BT := symbol_BT;
[L545]               __tmp__decimals_BT := decimals_BT;
[L546]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L547]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1883]  COND FALSE  !(!(value_s429 <= __tmp___balances_ERC20[this][from_s429]))
[L1887]  COND FALSE  !(!(value_s429 <= __tmp___allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1891]              __var_5 := null;
[L1892]  COND TRUE   !(to_s429 != null)
[L1893]              revert := true;
[L547]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L548]               assume revert || gas < 0;
[L3402]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
