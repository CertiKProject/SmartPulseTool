This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:39:29,573 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:39:29,574 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:39:29,585 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:39:29,585 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:39:29,586 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:39:29,587 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:39:29,588 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:39:29,590 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:39:29,591 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:39:29,591 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:39:29,591 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:39:29,592 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:39:29,593 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:39:29,594 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:39:29,594 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:39:29,595 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:39:29,596 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:39:29,598 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:39:29,599 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:39:29,599 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:39:29,600 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:39:29,602 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:39:29,602 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:39:29,602 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:39:29,603 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:39:29,603 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:39:29,604 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:39:29,604 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:39:29,604 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:39:29,605 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:39:29,605 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:39:29,606 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:39:29,606 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:39:29,607 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:39:29,607 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:39:29,608 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:39:29,608 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:39:29,608 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:39:29,609 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:39:29,609 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:39:29,609 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:39:29,617 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:39:29,617 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:39:29,618 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:39:29,618 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:39:29,618 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:39:29,618 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:39:29,618 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:39:29,618 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:39:29,619 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:39:29,619 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:39:29,619 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:39:29,620 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:39:29,620 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:39:29,640 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:39:29,651 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:39:29,654 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:39:29,656 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:39:29,656 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:39:29,657 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl
[2020-11-25 11:39:29,657 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl'
[2020-11-25 11:39:29,724 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:39:29,726 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:39:29,726 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:39:29,726 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:39:29,726 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:39:29,743 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,745 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,768 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,769 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,789 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,797 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,801 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,808 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:39:29,809 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:39:29,809 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:39:29,811 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:39:29,814 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/1) ...
[2020-11-25 11:39:29,828 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ZXL.transferFrom(from, to, value), from == to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:29,834 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ZXL.transferFrom(from, to, value), from == to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:29,841 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ZXL.transferFrom(from, to, value), from == to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:29,846 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s200==_to_s200 && ( _value_s200>balanceOf_ZXL[this][_from_s200] || _value_s200>allowance_ZXL[this][_from_s200][msg.sender] ) ) && _value_s200>=0 ) && _value_s200<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_ZXL[this][_to_s200]>=0 ) && balanceOf_ZXL[this][_to_s200]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_ZXL[this][_from_s200]>=0 ) && balanceOf_ZXL[this][_from_s200]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_ZXL[this][_from_s200][msg.sender]>=0 ) && allowance_ZXL[this][_from_s200][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:39:29,850 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ZXL.transferFrom(from, to, value), from == to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:29,851 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ZXL0) ==> ( <>AP(fail_transferFrom_ZXL0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:39:29,857 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:29 PropertyContainer
[2020-11-25 11:39:29,857 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:39:29,857 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:39:29,857 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:39:29,857 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:39:29,858 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/2) ...
[2020-11-25 11:39:29,858 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:39:29,858 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:39:29,867 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:29" (2/2) ...
[2020-11-25 11:39:29,867 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:39:29,868 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:39:29,868 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:39:29,868 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:39:29,868 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/2) ...
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 11:39:29,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL_NoBaseCtor__success
[2020-11-25 11:39:29,920 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL
[2020-11-25 11:39:29,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL
[2020-11-25 11:39:29,921 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZXL__success
[2020-11-25 11:39:29,921 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL
[2020-11-25 11:39:29,921 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL
[2020-11-25 11:39:29,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL
[2020-11-25 11:39:29,922 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL
[2020-11-25 11:39:29,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL
[2020-11-25 11:39:29,922 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL
[2020-11-25 11:39:29,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL
[2020-11-25 11:39:29,922 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL
[2020-11-25 11:39:29,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL
[2020-11-25 11:39:29,922 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL
[2020-11-25 11:39:29,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL
[2020-11-25 11:39:29,922 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL
[2020-11-25 11:39:29,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL
[2020-11-25 11:39:29,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL
[2020-11-25 11:39:29,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL
[2020-11-25 11:39:29,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZXL
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:39:29,923 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL_NoBaseCtor__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL__success
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZXL__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL__success
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL__success
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL__fail
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL__success
[2020-11-25 11:39:29,924 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL__success
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL__fail
[2020-11-25 11:39:29,925 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL__success
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL__fail
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL__success
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL__fail
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL__success
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL__fail
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:39:29,926 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:39:29,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:39:29,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:39:29,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 11:39:29,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 11:39:29,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL_NoBaseCtor__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL_NoBaseCtor__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZXL__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZXL__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL__success
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL__fail
[2020-11-25 11:39:29,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL__fail
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL__success
[2020-11-25 11:39:29,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:39:29,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 11:39:29,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 11:39:29,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZXL
[2020-11-25 11:39:29,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:39:29,930 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:39:29,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:39:30,196 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:39:30,196 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:39:30,391 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:39:30,391 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 11:39:30,392 INFO  L202        PluginConnector]: Adding new model ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:30 BoogieIcfgContainer
[2020-11-25 11:39:30,393 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:29" (2/2) ...
[2020-11-25 11:39:30,393 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:39:30,393 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1f51f17b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:30, skipping insertion in model container
[2020-11-25 11:39:30,393 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:39:30,393 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:39:30,394 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:39:30,395 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:39:30,395 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/3) ...
[2020-11-25 11:39:30,395 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@be27fc1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:30, skipping insertion in model container
[2020-11-25 11:39:30,396 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:29" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:39:30,429 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:30 NWAContainer
[2020-11-25 11:39:30,429 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:39:30,430 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:39:30,430 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:39:30,430 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:39:30,431 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:30" (3/4) ...
[2020-11-25 11:39:30,432 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@63e7c56b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:30, skipping insertion in model container
[2020-11-25 11:39:30,432 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:30" (4/4) ...
[2020-11-25 11:39:30,436 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:39:30,438 INFO  L110   BuchiProductObserver]: Initial RCFG 817 locations, 988 edges
[2020-11-25 11:39:30,438 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:39:30,447 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:39:31,387 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:39:31,390 INFO  L110   BuchiProductObserver]: BuchiProgram size 1900 locations, 3176 edges
[2020-11-25 11:39:31,390 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:31 BoogieIcfgContainer
[2020-11-25 11:39:31,390 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:39:31,391 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:39:31,391 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:39:31,392 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:39:31,393 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:31" (1/1) ...
[2020-11-25 11:39:31,438 INFO  L313           BlockEncoder]: Initial Icfg 1900 locations, 3176 edges
[2020-11-25 11:39:31,439 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:39:31,440 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:39:31,440 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:39:31,441 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:39:31,455 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 11:39:31,461 INFO  L70        RemoveSinkStates]: Removed 42 edges and 21 locations by removing sink states
[2020-11-25 11:39:31,468 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:39:31,471 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:39:31,473 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:39:31,473 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:39:31,477 INFO  L313           BlockEncoder]: Encoded RCFG 1862 locations, 3093 edges
[2020-11-25 11:39:31,477 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:39:31 BasicIcfg
[2020-11-25 11:39:31,477 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:39:31,477 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:39:31,478 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:39:31,480 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:39:31,480 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,480 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:29" (1/6) ...
[2020-11-25 11:39:31,482 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6aa6bd02 and model type ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:31, skipping insertion in model container
[2020-11-25 11:39:31,482 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,482 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:29" (2/6) ...
[2020-11-25 11:39:31,483 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6aa6bd02 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:31, skipping insertion in model container
[2020-11-25 11:39:31,483 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,483 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:30" (3/6) ...
[2020-11-25 11:39:31,483 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6aa6bd02 and model type ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:39:31, skipping insertion in model container
[2020-11-25 11:39:31,483 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,483 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:30" (4/6) ...
[2020-11-25 11:39:31,483 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6aa6bd02 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:31, skipping insertion in model container
[2020-11-25 11:39:31,483 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,483 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:31" (5/6) ...
[2020-11-25 11:39:31,484 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6aa6bd02 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:39:31, skipping insertion in model container
[2020-11-25 11:39:31,484 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:31,484 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:39:31" (6/6) ...
[2020-11-25 11:39:31,485 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-self-fail.bpl_BEv2
[2020-11-25 11:39:31,524 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:39:31,524 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:39:31,524 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:39:31,524 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:39:31,524 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:39:31,524 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:39:31,524 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:39:31,524 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:39:31,525 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:39:31,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1862 states.
[2020-11-25 11:39:31,593 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:31,593 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:31,593 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:31,603 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:31,603 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:31,603 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:39:31,603 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1862 states.
[2020-11-25 11:39:31,617 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:31,617 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:31,617 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:31,619 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:31,619 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND TRUE   choice == 12
[L2103]              gas := gas - 21000;
[L2104]  COND FALSE  !(gas >= 0)
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:31,636 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:31,637 INFO  L82        PathProgramCache]: Analyzing trace with hash -1742566239, now seen corresponding path program 1 times
[2020-11-25 11:39:31,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:31,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:31,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:31,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:31,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:39:31,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:31,818 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:39:31,819 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:39:31,821 INFO  L87              Difference]: Start difference. First operand 1862 states. Second operand 4 states.
[2020-11-25 11:39:32,070 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:32,070 INFO  L93              Difference]: Finished difference Result 1477 states and 1607 transitions.
[2020-11-25 11:39:32,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:39:32,072 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1477 states and 1607 transitions.
[2020-11-25 11:39:32,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:32,097 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1477 states to 1475 states and 1603 transitions.
[2020-11-25 11:39:32,098 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:39:32,100 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 11:39:32,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:32,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:32,106 INFO  L728         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:32,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:32,157 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1475 to 1475.
[2020-11-25 11:39:32,157 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1475 states.
[2020-11-25 11:39:32,161 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1475 states to 1475 states and 1603 transitions.
[2020-11-25 11:39:32,162 INFO  L751         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:32,162 INFO  L631         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:32,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:39:32,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:32,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:32,169 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:32,169 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:32,171 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:32,171 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND TRUE   !(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG])
[L1301]              revert := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND TRUE   !(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG])
[L1301]              revert := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:32,176 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:32,176 INFO  L82        PathProgramCache]: Analyzing trace with hash -1293412196, now seen corresponding path program 1 times
[2020-11-25 11:39:32,177 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:32,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:32,217 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:32,218 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:32,218 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:39:32,219 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:32,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:39:32,220 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:39:32,220 INFO  L87              Difference]: Start difference. First operand 1475 states and 1603 transitions. cyclomatic complexity: 130 Second operand 3 states.
[2020-11-25 11:39:32,267 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:32,268 INFO  L93              Difference]: Finished difference Result 1906 states and 2112 transitions.
[2020-11-25 11:39:32,268 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:39:32,269 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1906 states and 2112 transitions.
[2020-11-25 11:39:32,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:32,294 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1906 states to 1828 states and 2022 transitions.
[2020-11-25 11:39:32,295 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 841
[2020-11-25 11:39:32,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 841
[2020-11-25 11:39:32,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1828 states and 2022 transitions.
[2020-11-25 11:39:32,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:32,299 INFO  L728         BuchiCegarLoop]: Abstraction has 1828 states and 2022 transitions.
[2020-11-25 11:39:32,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1828 states and 2022 transitions.
[2020-11-25 11:39:32,333 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1828 to 1580.
[2020-11-25 11:39:32,333 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1580 states.
[2020-11-25 11:39:32,340 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1580 states to 1580 states and 1713 transitions.
[2020-11-25 11:39:32,340 INFO  L751         BuchiCegarLoop]: Abstraction has 1580 states and 1713 transitions.
[2020-11-25 11:39:32,340 INFO  L631         BuchiCegarLoop]: Abstraction has 1580 states and 1713 transitions.
[2020-11-25 11:39:32,340 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:39:32,340 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1580 states and 1713 transitions.
[2020-11-25 11:39:32,346 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:32,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:32,346 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:32,348 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:32,348 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:32,353 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:32,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 78436058, now seen corresponding path program 1 times
[2020-11-25 11:39:32,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:32,376 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:32,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:32,494 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:32,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:39:32,494 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:32,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 11:39:32,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 11:39:32,495 INFO  L87              Difference]: Start difference. First operand 1580 states and 1713 transitions. cyclomatic complexity: 135 Second operand 12 states.
[2020-11-25 11:39:33,466 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:33,467 INFO  L93              Difference]: Finished difference Result 1665 states and 1810 transitions.
[2020-11-25 11:39:33,467 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 11:39:33,467 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:33,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:33,483 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1665 states to 1665 states and 1810 transitions.
[2020-11-25 11:39:33,483 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 798
[2020-11-25 11:39:33,484 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 798
[2020-11-25 11:39:33,484 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:33,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:33,487 INFO  L728         BuchiCegarLoop]: Abstraction has 1665 states and 1810 transitions.
[2020-11-25 11:39:33,489 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:33,506 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1665 to 1515.
[2020-11-25 11:39:33,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1515 states.
[2020-11-25 11:39:33,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1515 states to 1515 states and 1627 transitions.
[2020-11-25 11:39:33,510 INFO  L751         BuchiCegarLoop]: Abstraction has 1515 states and 1627 transitions.
[2020-11-25 11:39:33,510 INFO  L631         BuchiCegarLoop]: Abstraction has 1515 states and 1627 transitions.
[2020-11-25 11:39:33,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:39:33,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1515 states and 1627 transitions.
[2020-11-25 11:39:33,515 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:33,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:33,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:33,517 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:33,517 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND TRUE   __exception
[L148]               __tmp__Balance := Balance;
[L149]               __tmp__DType := DType;
[L150]               __tmp__Alloc := Alloc;
[L151]               __tmp__balance_ADDR := balance_ADDR;
[L152]               __tmp__M_Ref_int := M_Ref_int;
[L153]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L154]               __tmp__alloc_allowance_ZXL_lvl0 := alloc_allowance_ZXL_lvl0;
[L155]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L156]               __tmp__sum_allowance1 := sum_allowance1;
[L157]               __tmp__Length := Length;
[L158]               __tmp__now := now;
[L159]               __tmp__name_ZXL := name_ZXL;
[L160]               __tmp__symbol_ZXL := symbol_ZXL;
[L161]               __tmp__decimals_ZXL := decimals_ZXL;
[L162]               __tmp__totalSupply_ZXL := totalSupply_ZXL;
[L163]               __tmp__owner_ZXL := owner_ZXL;
[L164]               __tmp__balanceOf_ZXL := balanceOf_ZXL;
[L165]               __tmp__allowance_ZXL := allowance_ZXL;
[L166]   CALL        call ZXL_ZXL__fail(this, msgsender_MSG, msgvalue_MSG);
[L1197]  CALL        call ZXL_ZXL_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1156]              assume msgsender_MSG != null;
[L1157]              __tmp__Balance[this] := 0;
[L1158]              __tmp__name_ZXL[this] := -1880820303;
[L1159]              __tmp__symbol_ZXL[this] := -1880820303;
[L1160]              __tmp__decimals_ZXL[this] := 18;
[L1161]              __tmp__totalSupply_ZXL[this] := 13000000000000000000000000;
[L1162]              __tmp__owner_ZXL[this] := null;
[L1163]              __tmp__balanceOf_ZXL[this] := zeroRefintArr();
[L1164]              __tmp__sum_balanceOf0[this] := 0;
[L1165]              __tmp__allowance_ZXL[this] := zeroRefRefintArr();
[L1166]              __tmp__sum_allowance1[this] := 0;
[L1168]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_ZXL[this][msgsender_MSG];
[L1169]              __tmp__balanceOf_ZXL[this][msgsender_MSG] := __tmp__totalSupply_ZXL[this];
[L1170]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_ZXL[this][msgsender_MSG];
[L1171]              __tmp__owner_ZXL[this] := msgsender_MSG;
[L1197]  RET         call ZXL_ZXL_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1198]  COND FALSE  !(revert)
[L166]   RET         call ZXL_ZXL__fail(this, msgsender_MSG, msgvalue_MSG);
[L167]               assume revert || gas < 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:33,521 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:33,521 INFO  L82        PathProgramCache]: Analyzing trace with hash -1588293179, now seen corresponding path program 1 times
[2020-11-25 11:39:33,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:33,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:33,554 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:33,554 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:33,554 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:39:33,554 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:33,554 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:39:33,555 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:39:33,555 INFO  L87              Difference]: Start difference. First operand 1515 states and 1627 transitions. cyclomatic complexity: 115 Second operand 4 states.
[2020-11-25 11:39:33,671 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:33,671 INFO  L93              Difference]: Finished difference Result 2009 states and 2253 transitions.
[2020-11-25 11:39:33,672 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:39:33,672 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2009 states and 2253 transitions.
[2020-11-25 11:39:33,679 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:39:33,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2009 states to 1960 states and 2204 transitions.
[2020-11-25 11:39:33,687 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 916
[2020-11-25 11:39:33,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 916
[2020-11-25 11:39:33,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1960 states and 2204 transitions.
[2020-11-25 11:39:33,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:33,690 INFO  L728         BuchiCegarLoop]: Abstraction has 1960 states and 2204 transitions.
[2020-11-25 11:39:33,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1960 states and 2204 transitions.
[2020-11-25 11:39:33,704 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1960 to 1479.
[2020-11-25 11:39:33,704 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1479 states.
[2020-11-25 11:39:33,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1479 states to 1479 states and 1588 transitions.
[2020-11-25 11:39:33,705 INFO  L751         BuchiCegarLoop]: Abstraction has 1479 states and 1588 transitions.
[2020-11-25 11:39:33,706 INFO  L631         BuchiCegarLoop]: Abstraction has 1479 states and 1588 transitions.
[2020-11-25 11:39:33,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:39:33,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1479 states and 1588 transitions.
[2020-11-25 11:39:33,708 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:33,708 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:33,708 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:33,710 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:33,710 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND FALSE  !(choice == 5)
[L2152]  COND TRUE   choice == 4
[L2153]              gas := gas - 21000;
[L2154]  COND TRUE   gas >= 0
[L2155]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2156]              assume msgvalue_MSG == 0;
[L2157]  CALL        call success_s221 := approve~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s221 := approve~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L1326]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_ZXL[this][msgsender_MSG][_spender_s221];
[L1327]              allowance_ZXL[this][msgsender_MSG][_spender_s221] := _value_s221;
[L1328]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_ZXL[this][msgsender_MSG][_spender_s221];
[L1329]              success_s221 := true;
[L337]   RET         call success_s221 := approve~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L338]               assume !revert && gas >= 0;
[L2157]  RET         call success_s221 := approve~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L2198]  RET         call CorralChoice_ZXL(this);
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 == _to_s200 && (_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG])) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:33,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:33,713 INFO  L82        PathProgramCache]: Analyzing trace with hash 979192168, now seen corresponding path program 1 times
[2020-11-25 11:39:33,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:33,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:33,782 INFO  L134       CoverageAnalysis]: Checked inductivity of 50 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 50 trivial. 0 not checked.
[2020-11-25 11:39:33,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:33,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 11:39:33,782 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:33,782 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 11:39:33,783 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=66, Unknown=0, NotChecked=0, Total=90
[2020-11-25 11:39:33,783 INFO  L87              Difference]: Start difference. First operand 1479 states and 1588 transitions. cyclomatic complexity: 112 Second operand 10 states.
[2020-11-25 11:39:34,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:34,182 INFO  L93              Difference]: Finished difference Result 865 states and 925 transitions.
[2020-11-25 11:39:34,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 11:39:34,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 865 states and 925 transitions.
[2020-11-25 11:39:34,184 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:39:34,184 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 865 states to 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:39:34,184 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:39:34,184 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:34,184 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:39:34,184 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:39:34,184 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:39:34,184 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:39:34,187 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:39:34 BasicIcfg
[2020-11-25 11:39:34,188 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:39:34,188 INFO  L168              Benchmark]: Toolchain (without parser) took 4463.01 ms. Allocated memory was 1.0 GB in the beginning and 1.4 GB in the end (delta: 326.6 MB). Free memory was 945.9 MB in the beginning and 1.3 GB in the end (delta: -306.9 MB). Peak memory consumption was 19.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,189 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,189 INFO  L168              Benchmark]: Boogie Preprocessor took 82.76 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,189 INFO  L168              Benchmark]: UtopiaSpecLang took 47.73 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,189 INFO  L168              Benchmark]: Boogie Printer took 10.30 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,189 INFO  L168              Benchmark]: RCFGBuilder took 525.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,190 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.06 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,190 INFO  L168              Benchmark]: BÃ¼chi Program Product took 960.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 861.8 MB in the beginning and 874.2 MB in the end (delta: -12.3 MB). Peak memory consumption was 145.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,190 INFO  L168              Benchmark]: BlockEncodingV2 took 86.43 ms. Allocated memory is still 1.1 GB. Free memory was 874.2 MB in the beginning and 843.4 MB in the end (delta: 30.8 MB). Peak memory consumption was 30.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,191 INFO  L168              Benchmark]: BuchiAutomizer took 2710.13 ms. Allocated memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: 271.1 MB). Free memory was 843.4 MB in the beginning and 1.3 GB in the end (delta: -409.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:34,193 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1900 locations, 3176 edges
  - StatisticsResult: Encoded RCFG
    1862 locations, 3093 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 82.76 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 47.73 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.30 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 525.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.06 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 960.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 861.8 MB in the beginning and 874.2 MB in the end (delta: -12.3 MB). Peak memory consumption was 145.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 86.43 ms. Allocated memory is still 1.1 GB. Free memory was 874.2 MB in the beginning and 843.4 MB in the end (delta: 30.8 MB). Peak memory consumption was 30.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2710.13 ms. Allocated memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: 271.1 MB). Free memory was 843.4 MB in the beginning and 1.3 GB in the end (delta: -409.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    817 locations, 988 edges
  - StatisticsResult: BuchiProgram size
    1900 locations, 3176 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.6s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.3s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 879 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1580 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 7595 SDtfs, 6376 SDslu, 11835 SDs, 0 SdLazy, 12892 SolverSat, 1137 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ZXL0) ==> ( <>(fail_transferFrom_ZXL0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
