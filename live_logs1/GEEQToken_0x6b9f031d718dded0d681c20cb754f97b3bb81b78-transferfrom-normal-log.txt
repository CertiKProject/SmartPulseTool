This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:55:50,255 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:55:50,257 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:55:50,267 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:55:50,267 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:55:50,268 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:55:50,269 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:55:50,270 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:55:50,272 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:55:50,272 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:55:50,273 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:55:50,273 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:55:50,274 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:55:50,274 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:55:50,275 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:55:50,276 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:55:50,276 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:55:50,277 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:55:50,279 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:55:50,280 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:55:50,281 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:55:50,282 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:55:50,283 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:55:50,283 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:55:50,283 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:55:50,284 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:55:50,284 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:55:50,285 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:55:50,285 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:55:50,285 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:55:50,286 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:55:50,286 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:55:50,287 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:55:50,287 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:55:50,288 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:55:50,288 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:55:50,288 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:55:50,288 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:55:50,289 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:55:50,289 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:55:50,290 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:55:50,290 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:55:50,297 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:55:50,298 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:55:50,298 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:55:50,299 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:55:50,299 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:55:50,299 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:55:50,299 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:55:50,299 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:55:50,299 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:55:50,299 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:55:50,300 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:55:50,300 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:55:50,301 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:55:50,301 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:55:50,301 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:55:50,301 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:55:50,301 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:55:50,301 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:55:50,321 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:55:50,330 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:55:50,332 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:55:50,333 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:55:50,333 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:55:50,334 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl
[2020-11-25 16:55:50,334 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl'
[2020-11-25 16:55:50,421 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:55:50,422 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:55:50,422 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:55:50,423 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:55:50,423 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:55:50,440 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,441 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,472 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,473 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,494 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,510 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,519 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,529 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:55:50,530 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:55:50,530 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:55:50,532 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:55:50,536 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/1) ...
[2020-11-25 16:55:50,555 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(GEEQToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && balances_GEEQToken[this][from] == old(balances_GEEQToken[this][from]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:55:50,560 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(GEEQToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && balances_GEEQToken[this][from] == old(balances_GEEQToken[this][from]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:55:50,569 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(GEEQToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && balances_GEEQToken[this][from] == old(balances_GEEQToken[this][from]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:55:50,579 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s747 && p1!=to_s747 ) && ( p2!=from_s747 || p3!=msg.sender ) ) && from_s747!=to_s747 ) && tokens_s747<=balances_GEEQToken[this][from_s747] ) && tokens_s747<=allowed_GEEQToken[this][from_s747][msg.sender] ) && ( balances_GEEQToken[this][to_s747] + tokens_s747 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s747>=0 ) && tokens_s747<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][to_s747]>=0 ) && balances_GEEQToken[this][to_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][from_s747]>=0 ) && balances_GEEQToken[this][from_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_GEEQToken[this][from_s747][msg.sender]>=0 ) && allowed_GEEQToken[this][from_s747][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:55:50,583 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s747==true && balances_GEEQToken[this][from_s747]==( ( old(balances_GEEQToken[this][from_s747]) ) - tokens_s747 ) ) && balances_GEEQToken[this][to_s747]==( ( old(balances_GEEQToken[this][to_s747]) ) + tokens_s747 ) ) && allowed_GEEQToken[this][from_s747][msg.sender]==( ( old(allowed_GEEQToken[this][from_s747][msg.sender]) ) - tokens_s747 ) ) && _totalSupply_GEEQToken[this]==( old(_totalSupply_GEEQToken[this]) ) ) && balances_GEEQToken[this][p1]==( old(balances_GEEQToken[this][p1]) ) ) && allowed_GEEQToken[this][p2][p3]==( old(allowed_GEEQToken[this][p2][p3]) ) ) && symbol_GEEQToken[this]==( old(symbol_GEEQToken[this]) ) ) && name_GEEQToken[this]==( old(name_GEEQToken[this]) ) ) && decimals_GEEQToken[this]==( old(decimals_GEEQToken[this]) ) ) && _totalMinted_GEEQToken[this]==( old(_totalMinted_GEEQToken[this]) ) ) && _maxMintable_GEEQToken[this]==( old(_maxMintable_GEEQToken[this]) ) ) && pauseOn_GEEQToken[this]==( old(pauseOn_GEEQToken[this]) ) ) && migrationOn_GEEQToken[this]==( old(migrationOn_GEEQToken[this]) ) ) && geeqaddress_GEEQToken[this]==( old(geeqaddress_GEEQToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s747,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_GEEQToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]]
[2020-11-25 16:55:50,590 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(GEEQToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && balances_GEEQToken[this][from] == old(balances_GEEQToken[this][from]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:55:50,590 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_GEEQToken0) ==> ( <>AP(success_transferFrom_GEEQToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:55:50,601 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:55:50 PropertyContainer
[2020-11-25 16:55:50,601 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:55:50,602 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:55:50,602 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:55:50,602 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:55:50,603 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/2) ...
[2020-11-25 16:55:50,603 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:55:50,604 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:55:50,625 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:55:50" (2/2) ...
[2020-11-25 16:55:50,625 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:55:50,626 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:55:50,626 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:55:50,626 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:55:50,627 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/2) ...
[2020-11-25 16:55:50,693 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:55:50,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,694 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 16:55:50,695 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:55:50,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:55:50,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:55:50,696 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:55:50,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:55:50,697 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken
[2020-11-25 16:55:50,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken
[2020-11-25 16:55:50,698 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken
[2020-11-25 16:55:50,699 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:55:50,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:55:50,700 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:55:50,700 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken
[2020-11-25 16:55:50,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken
[2020-11-25 16:55:50,700 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken
[2020-11-25 16:55:50,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken
[2020-11-25 16:55:50,700 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken
[2020-11-25 16:55:50,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken
[2020-11-25 16:55:50,700 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken
[2020-11-25 16:55:50,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken
[2020-11-25 16:55:50,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken
[2020-11-25 16:55:50,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:55:50,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:55:50,701 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GEEQToken
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:55:50,702 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:55:50,703 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:55:50,704 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:55:50,705 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:55:50,706 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__success
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__success
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:55:50,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:55:50,708 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__success
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__success
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__success
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__success
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__success
[2020-11-25 16:55:50,709 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__success
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:55:50,710 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:55:50,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:55:50,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:55:50,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:55:50,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:55:50,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__success
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__success
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:55:50,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__fail
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__fail
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__fail
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__success
[2020-11-25 16:55:50,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:55:50,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GEEQToken
[2020-11-25 16:55:50,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:55:50,719 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:55:50,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:55:50,997 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:55:50,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:55:50,998 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:55:51,107 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:55:51,296 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:55:51,297 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:55:51,299 INFO  L202        PluginConnector]: Adding new model GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:55:51 BoogieIcfgContainer
[2020-11-25 16:55:51,300 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:55:50" (2/2) ...
[2020-11-25 16:55:51,300 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:55:51,300 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2bc7b32f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:55:51, skipping insertion in model container
[2020-11-25 16:55:51,300 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:55:51,300 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:55:51,300 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:55:51,302 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:55:51,302 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/3) ...
[2020-11-25 16:55:51,302 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@61829f24 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:55:51, skipping insertion in model container
[2020-11-25 16:55:51,302 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:55:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:55:51,337 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:55:51 NWAContainer
[2020-11-25 16:55:51,338 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:55:51,338 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:55:51,338 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:55:51,339 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:55:51,339 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:55:51" (3/4) ...
[2020-11-25 16:55:51,340 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7bf044ba and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:55:51, skipping insertion in model container
[2020-11-25 16:55:51,340 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:55:51" (4/4) ...
[2020-11-25 16:55:51,343 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:55:51,347 INFO  L110   BuchiProductObserver]: Initial RCFG 1991 locations, 2488 edges
[2020-11-25 16:55:51,347 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:55:51,361 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:55:52,759 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:55:52,765 INFO  L110   BuchiProductObserver]: BuchiProgram size 4724 locations, 8041 edges
[2020-11-25 16:55:52,765 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:55:52 BoogieIcfgContainer
[2020-11-25 16:55:52,765 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:55:52,765 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:55:52,766 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:55:52,767 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:55:52,767 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:55:52" (1/1) ...
[2020-11-25 16:55:52,890 INFO  L313           BlockEncoder]: Initial Icfg 4724 locations, 8041 edges
[2020-11-25 16:55:52,890 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:55:52,891 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:55:52,891 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:55:52,891 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:55:52,905 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 16:55:52,922 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 16:55:52,939 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:55:52,944 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:55:52,949 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:55:52,949 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:55:52,956 INFO  L313           BlockEncoder]: Encoded RCFG 4674 locations, 7911 edges
[2020-11-25 16:55:52,957 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:55:52 BasicIcfg
[2020-11-25 16:55:52,957 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:55:52,957 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:55:52,957 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:55:52,960 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:55:52,960 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,960 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:55:50" (1/6) ...
[2020-11-25 16:55:52,962 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1eeeabb and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:55:52, skipping insertion in model container
[2020-11-25 16:55:52,962 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,962 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:55:50" (2/6) ...
[2020-11-25 16:55:52,962 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1eeeabb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:55:52, skipping insertion in model container
[2020-11-25 16:55:52,962 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,962 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:55:51" (3/6) ...
[2020-11-25 16:55:52,963 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1eeeabb and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:55:52, skipping insertion in model container
[2020-11-25 16:55:52,963 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,963 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:55:51" (4/6) ...
[2020-11-25 16:55:52,963 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1eeeabb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:55:52, skipping insertion in model container
[2020-11-25 16:55:52,963 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,963 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:55:52" (5/6) ...
[2020-11-25 16:55:52,963 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1eeeabb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:55:52, skipping insertion in model container
[2020-11-25 16:55:52,964 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:55:52,964 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:55:52" (6/6) ...
[2020-11-25 16:55:52,965 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-normal.bpl_BEv2
[2020-11-25 16:55:53,004 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:55:53,004 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:55:53,004 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:55:53,004 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:55:53,004 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:55:53,004 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:55:53,005 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:55:53,005 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:55:53,005 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:55:53,053 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4674 states.
[2020-11-25 16:55:53,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:55:53,111 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:53,111 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:53,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:53,118 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:53,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:55:53,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4674 states.
[2020-11-25 16:55:53,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:55:53,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:53,170 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:53,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:53,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND TRUE   revert
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:53,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:53,188 INFO  L82        PathProgramCache]: Analyzing trace with hash -1982213940, now seen corresponding path program 1 times
[2020-11-25 16:55:53,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:53,212 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:53,251 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:53,254 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:53,254 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:55:53,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:53,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:55:53,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:55:53,538 INFO  L87              Difference]: Start difference. First operand 4674 states. Second operand 4 states.
[2020-11-25 16:55:53,987 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:53,987 INFO  L93              Difference]: Finished difference Result 3644 states and 4009 transitions.
[2020-11-25 16:55:53,987 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:55:53,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3644 states and 4009 transitions.
[2020-11-25 16:55:54,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:55:54,032 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3644 states to 3644 states and 4009 transitions.
[2020-11-25 16:55:54,033 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:55:54,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1067
[2020-11-25 16:55:54,037 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3644 states and 4009 transitions.
[2020-11-25 16:55:54,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:54,047 INFO  L728         BuchiCegarLoop]: Abstraction has 3644 states and 4009 transitions.
[2020-11-25 16:55:54,064 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3644 states and 4009 transitions.
[2020-11-25 16:55:54,119 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3644 to 3644.
[2020-11-25 16:55:54,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3644 states.
[2020-11-25 16:55:54,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3644 states to 3644 states and 4009 transitions.
[2020-11-25 16:55:54,130 INFO  L751         BuchiCegarLoop]: Abstraction has 3644 states and 4009 transitions.
[2020-11-25 16:55:54,130 INFO  L631         BuchiCegarLoop]: Abstraction has 3644 states and 4009 transitions.
[2020-11-25 16:55:54,130 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:55:54,130 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3644 states and 4009 transitions.
[2020-11-25 16:55:54,141 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:55:54,142 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:54,142 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:54,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:54,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND TRUE   revert
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND TRUE   pauseOn_GEEQToken[this]
[L3601]              assert { :EventEmitted "ErrorEvent_GEEQToken" } true;
[L3602]              revert := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND TRUE   pauseOn_GEEQToken[this]
[L3601]              assert { :EventEmitted "ErrorEvent_GEEQToken" } true;
[L3602]              revert := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:54,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:54,149 INFO  L82        PathProgramCache]: Analyzing trace with hash 1778096136, now seen corresponding path program 1 times
[2020-11-25 16:55:54,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:54,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:54,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:54,187 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:54,187 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:55:54,188 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:54,188 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:55:54,189 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:55:54,189 INFO  L87              Difference]: Start difference. First operand 3644 states and 4009 transitions. cyclomatic complexity: 367 Second operand 4 states.
[2020-11-25 16:55:55,093 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:55,093 INFO  L93              Difference]: Finished difference Result 5188 states and 5893 transitions.
[2020-11-25 16:55:55,093 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:55:55,094 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5188 states and 5893 transitions.
[2020-11-25 16:55:55,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:55:55,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5188 states to 4980 states and 5657 transitions.
[2020-11-25 16:55:55,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1418
[2020-11-25 16:55:55,129 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1447
[2020-11-25 16:55:55,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4980 states and 5657 transitions.
[2020-11-25 16:55:55,136 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:55,136 INFO  L728         BuchiCegarLoop]: Abstraction has 4980 states and 5657 transitions.
[2020-11-25 16:55:55,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4980 states and 5657 transitions.
[2020-11-25 16:55:55,177 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4980 to 3728.
[2020-11-25 16:55:55,177 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3728 states.
[2020-11-25 16:55:55,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3728 states to 3728 states and 4017 transitions.
[2020-11-25 16:55:55,182 INFO  L751         BuchiCegarLoop]: Abstraction has 3728 states and 4017 transitions.
[2020-11-25 16:55:55,182 INFO  L631         BuchiCegarLoop]: Abstraction has 3728 states and 4017 transitions.
[2020-11-25 16:55:55,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:55:55,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3728 states and 4017 transitions.
[2020-11-25 16:55:55,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:55:55,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:55,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:55,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:55,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:55,194 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:55,194 INFO  L82        PathProgramCache]: Analyzing trace with hash 2136875728, now seen corresponding path program 1 times
[2020-11-25 16:55:55,195 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:55,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:55,317 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:55,317 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:55,317 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:55:55,318 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:55,318 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:55:55,318 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:55:55,318 INFO  L87              Difference]: Start difference. First operand 3728 states and 4017 transitions. cyclomatic complexity: 291 Second operand 11 states.
[2020-11-25 16:55:57,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:57,444 INFO  L93              Difference]: Finished difference Result 6334 states and 6939 transitions.
[2020-11-25 16:55:57,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 16:55:57,445 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6334 states and 6939 transitions.
[2020-11-25 16:55:57,458 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:55:57,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6334 states to 6334 states and 6939 transitions.
[2020-11-25 16:55:57,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1922
[2020-11-25 16:55:57,476 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1922
[2020-11-25 16:55:57,476 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6334 states and 6939 transitions.
[2020-11-25 16:55:57,482 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:57,482 INFO  L728         BuchiCegarLoop]: Abstraction has 6334 states and 6939 transitions.
[2020-11-25 16:55:57,486 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6334 states and 6939 transitions.
[2020-11-25 16:55:57,521 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6334 to 3770.
[2020-11-25 16:55:57,521 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3770 states.
[2020-11-25 16:55:57,525 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3770 states to 3770 states and 4066 transitions.
[2020-11-25 16:55:57,526 INFO  L751         BuchiCegarLoop]: Abstraction has 3770 states and 4066 transitions.
[2020-11-25 16:55:57,526 INFO  L631         BuchiCegarLoop]: Abstraction has 3770 states and 4066 transitions.
[2020-11-25 16:55:57,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:55:57,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3770 states and 4066 transitions.
[2020-11-25 16:55:57,530 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:55:57,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:57,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:57,532 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:57,532 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:57,535 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:57,535 INFO  L82        PathProgramCache]: Analyzing trace with hash -1317599025, now seen corresponding path program 1 times
[2020-11-25 16:55:57,536 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:57,545 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:57,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:57,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:57,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:55:57,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:57,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:55:57,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:55:57,610 INFO  L87              Difference]: Start difference. First operand 3770 states and 4066 transitions. cyclomatic complexity: 300 Second operand 7 states.
[2020-11-25 16:55:58,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:58,196 INFO  L93              Difference]: Finished difference Result 4038 states and 4368 transitions.
[2020-11-25 16:55:58,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:55:58,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4038 states and 4368 transitions.
[2020-11-25 16:55:58,205 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:55:58,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4038 states to 4038 states and 4368 transitions.
[2020-11-25 16:55:58,216 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1238
[2020-11-25 16:55:58,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1238
[2020-11-25 16:55:58,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4038 states and 4368 transitions.
[2020-11-25 16:55:58,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:58,220 INFO  L728         BuchiCegarLoop]: Abstraction has 4038 states and 4368 transitions.
[2020-11-25 16:55:58,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4038 states and 4368 transitions.
[2020-11-25 16:55:58,246 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4038 to 3842.
[2020-11-25 16:55:58,246 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3842 states.
[2020-11-25 16:55:58,250 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3842 states to 3842 states and 4144 transitions.
[2020-11-25 16:55:58,250 INFO  L751         BuchiCegarLoop]: Abstraction has 3842 states and 4144 transitions.
[2020-11-25 16:55:58,250 INFO  L631         BuchiCegarLoop]: Abstraction has 3842 states and 4144 transitions.
[2020-11-25 16:55:58,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:55:58,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3842 states and 4144 transitions.
[2020-11-25 16:55:58,254 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:55:58,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:58,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:58,255 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:58,256 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:58,259 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:58,260 INFO  L82        PathProgramCache]: Analyzing trace with hash 2058220916, now seen corresponding path program 1 times
[2020-11-25 16:55:58,260 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:58,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:58,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 16:55:58,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:58,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:55:58,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:58,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:55:58,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:55:58,397 INFO  L87              Difference]: Start difference. First operand 3842 states and 4144 transitions. cyclomatic complexity: 306 Second operand 16 states.
[2020-11-25 16:56:01,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:01,295 INFO  L93              Difference]: Finished difference Result 4076 states and 4476 transitions.
[2020-11-25 16:56:01,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:56:01,295 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4076 states and 4476 transitions.
[2020-11-25 16:56:01,303 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:56:01,313 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4076 states to 4076 states and 4476 transitions.
[2020-11-25 16:56:01,313 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1255
[2020-11-25 16:56:01,314 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1255
[2020-11-25 16:56:01,314 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4076 states and 4476 transitions.
[2020-11-25 16:56:01,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:01,317 INFO  L728         BuchiCegarLoop]: Abstraction has 4076 states and 4476 transitions.
[2020-11-25 16:56:01,320 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4076 states and 4476 transitions.
[2020-11-25 16:56:01,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4076 to 3991.
[2020-11-25 16:56:01,343 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3991 states.
[2020-11-25 16:56:01,346 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3991 states to 3991 states and 4327 transitions.
[2020-11-25 16:56:01,346 INFO  L751         BuchiCegarLoop]: Abstraction has 3991 states and 4327 transitions.
[2020-11-25 16:56:01,346 INFO  L631         BuchiCegarLoop]: Abstraction has 3991 states and 4327 transitions.
[2020-11-25 16:56:01,346 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:56:01,346 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3991 states and 4327 transitions.
[2020-11-25 16:56:01,350 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:01,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:01,350 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:01,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:01,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL       call CorralChoice_GEEQToken(this);
[L5125]             havoc msgsender_MSG;
[L5126]             havoc msgvalue_MSG;
[L5127]             havoc choice;
[L5128]             havoc __ret_0_totalSupply;
[L5129]             havoc tokenOwner_s591;
[L5130]             havoc balance_s591;
[L5131]             havoc tokenOwner_s763;
[L5132]             havoc spender_s763;
[L5133]             havoc remaining_s763;
[L5134]             havoc to_s647;
[L5135]             havoc tokens_s647;
[L5136]             havoc success_s647;
[L5137]             havoc spender_s675;
[L5138]             havoc tokens_s675;
[L5139]             havoc success_s675;
[L5140]             havoc from_s747;
[L5141]             havoc to_s747;
[L5142]             havoc tokens_s747;
[L5143]             havoc success_s747;
[L5144]             havoc __ret_0_owner;
[L5145]             havoc __ret_0_newOwner;
[L5146]             havoc _newOwner_s220;
[L5147]             havoc __ret_0_symbol;
[L5148]             havoc __ret_0_name;
[L5149]             havoc __ret_0_decimals;
[L5150]             havoc __ret_0_pauseOn;
[L5151]             havoc __ret_0_migrationOn;
[L5152]             havoc arg813_s0;
[L5153]             havoc __ret_0_balances;
[L5154]             havoc arg814_s0;
[L5155]             havoc __ret_0_geeqaddress;
[L5156]             havoc registeraddress_s387;
[L5157]             havoc tokenAddress_s407;
[L5158]             havoc tokens_s407;
[L5159]             havoc success_s407;
[L5160]             havoc __ret_0_totalMinted;
[L5161]             havoc receiver_s579;
[L5162]             havoc token_amt_s579;
[L5163]             havoc spender_s806;
[L5164]             havoc tokens_s806;
[L5165]             havoc data_s806;
[L5166]             havoc success_s806;
[L5167]             havoc tmpNow;
[L5168]             havoc gas;
[L5169]             assume gas > 4000000 && gas <= 8000000;
[L5170]             tmpNow := now;
[L5171]             havoc now;
[L5172]             assume now > tmpNow;
[L5173]             assume msgsender_MSG != null;
[L5174]             assume DType[msgsender_MSG] != SafeMath;
[L5175]             assume DType[msgsender_MSG] != ERC20Interface;
[L5176]             assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]             assume DType[msgsender_MSG] != Owned;
[L5178]             assume DType[msgsender_MSG] != GEEQToken;
[L5179]             Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE  choice == 26
[L5181]             gas := gas - 21000;
[L5182]  COND TRUE  gas >= 0
[L5183]             assume msgvalue_MSG == 0;
[L5184]  CALL       call __ret_0_totalSupply := totalSupply_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L1152]             havoc __exception;
[L1153]             revert := false;
[L1154]  COND TRUE  __exception
[L1155]             __tmp__Balance := Balance;
[L1156]             __tmp__DType := DType;
[L1157]             __tmp__Alloc := Alloc;
[L1158]             __tmp__balance_ADDR := balance_ADDR;
[L1159]             __tmp__M_Ref_int := M_Ref_int;
[L1160]             __tmp__sum_balances0 := sum_balances0;
[L1161]             __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1162]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1163]             __tmp__sum_allowed1 := sum_allowed1;
[L1164]             __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1165]             __tmp__Length := Length;
[L1166]             __tmp__now := now;
[L1167]             __tmp__owner_Owned := owner_Owned;
[L1168]             __tmp__newOwner_Owned := newOwner_Owned;
[L1169]             __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1170]             __tmp__name_GEEQToken := name_GEEQToken;
[L1171]             __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1172]             __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1173]             __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1174]             __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1175]             __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1176]             __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1177]             __tmp__balances_GEEQToken := balances_GEEQToken;
[L1178]             __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1179]             __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1180]  CALL       call __ret_0_ := totalSupply_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3305]             __ret_0_ := __tmp___totalSupply_GEEQToken[this];
[L1180]  RET        call __ret_0_ := totalSupply_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1181]             assume revert || gas < 0;
[L5184]  RET        call __ret_0_totalSupply := totalSupply_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET        call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:01,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:01,354 INFO  L82        PathProgramCache]: Analyzing trace with hash 1458325325, now seen corresponding path program 1 times
[2020-11-25 16:56:01,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:01,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:02,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 16:56:02,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:56:02,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 16:56:02,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:02,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:56:02,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=535, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:56:02,050 INFO  L87              Difference]: Start difference. First operand 3991 states and 4327 transitions. cyclomatic complexity: 344 Second operand 25 states.
[2020-11-25 16:56:06,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:06,668 INFO  L93              Difference]: Finished difference Result 4036 states and 4409 transitions.
[2020-11-25 16:56:06,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 16:56:06,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4036 states and 4409 transitions.
[2020-11-25 16:56:06,675 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:56:06,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4036 states to 4036 states and 4409 transitions.
[2020-11-25 16:56:06,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1264
[2020-11-25 16:56:06,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1264
[2020-11-25 16:56:06,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4036 states and 4409 transitions.
[2020-11-25 16:56:06,687 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:06,687 INFO  L728         BuchiCegarLoop]: Abstraction has 4036 states and 4409 transitions.
[2020-11-25 16:56:06,690 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4036 states and 4409 transitions.
[2020-11-25 16:56:06,712 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4036 to 4005.
[2020-11-25 16:56:06,712 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4005 states.
[2020-11-25 16:56:06,716 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4005 states to 4005 states and 4339 transitions.
[2020-11-25 16:56:06,716 INFO  L751         BuchiCegarLoop]: Abstraction has 4005 states and 4339 transitions.
[2020-11-25 16:56:06,716 INFO  L631         BuchiCegarLoop]: Abstraction has 4005 states and 4339 transitions.
[2020-11-25 16:56:06,716 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:56:06,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4005 states and 4339 transitions.
[2020-11-25 16:56:06,720 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:06,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:06,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:06,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:06,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:06,725 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:06,725 INFO  L82        PathProgramCache]: Analyzing trace with hash -1508203470, now seen corresponding path program 1 times
[2020-11-25 16:56:06,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:06,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:06,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 16:56:06,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:06,825 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:56:06,825 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:06,825 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:56:06,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:56:06,825 INFO  L87              Difference]: Start difference. First operand 4005 states and 4339 transitions. cyclomatic complexity: 342 Second operand 16 states.
[2020-11-25 16:56:08,597 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:08,597 INFO  L93              Difference]: Finished difference Result 4162 states and 4658 transitions.
[2020-11-25 16:56:08,597 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:56:08,598 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4162 states and 4658 transitions.
[2020-11-25 16:56:08,609 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 16:56:08,622 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4162 states to 4162 states and 4658 transitions.
[2020-11-25 16:56:08,622 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1296
[2020-11-25 16:56:08,622 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1296
[2020-11-25 16:56:08,622 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4162 states and 4658 transitions.
[2020-11-25 16:56:08,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:08,626 INFO  L728         BuchiCegarLoop]: Abstraction has 4162 states and 4658 transitions.
[2020-11-25 16:56:08,629 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4162 states and 4658 transitions.
[2020-11-25 16:56:08,680 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4162 to 4045.
[2020-11-25 16:56:08,680 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4045 states.
[2020-11-25 16:56:08,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4045 states to 4045 states and 4432 transitions.
[2020-11-25 16:56:08,684 INFO  L751         BuchiCegarLoop]: Abstraction has 4045 states and 4432 transitions.
[2020-11-25 16:56:08,684 INFO  L631         BuchiCegarLoop]: Abstraction has 4045 states and 4432 transitions.
[2020-11-25 16:56:08,684 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:56:08,684 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4045 states and 4432 transitions.
[2020-11-25 16:56:08,688 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:56:08,688 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:08,689 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:08,690 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:08,690 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND FALSE  !(!(c_s26 >= a_s26))
[L2813]              c_s26 := c_s26;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND FALSE  !(revert)
[L3587]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][to_s747];
[L3588]              __tmp__balances_GEEQToken[this][to_s747] := __var_19;
[L3589]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][to_s747];
[L3590]              success_s747 := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND FALSE  !(!(c_s26 >= a_s26))
[L2813]              c_s26 := c_s26;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND FALSE  !(revert)
[L3587]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][to_s747];
[L3588]              __tmp__balances_GEEQToken[this][to_s747] := __var_19;
[L3589]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][to_s747];
[L3590]              success_s747 := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:08,701 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:08,701 INFO  L82        PathProgramCache]: Analyzing trace with hash -248569499, now seen corresponding path program 1 times
[2020-11-25 16:56:08,702 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:08,710 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:08,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 16:56:08,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:08,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:56:08,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:08,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 16:56:08,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 16:56:08,733 INFO  L87              Difference]: Start difference. First operand 4045 states and 4432 transitions. cyclomatic complexity: 399 Second operand 5 states.
[2020-11-25 16:56:09,131 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:09,131 INFO  L93              Difference]: Finished difference Result 4890 states and 5784 transitions.
[2020-11-25 16:56:09,131 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:56:09,131 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4890 states and 5784 transitions.
[2020-11-25 16:56:09,145 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-11-25 16:56:09,159 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4890 states to 3632 states and 4521 transitions.
[2020-11-25 16:56:09,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 844
[2020-11-25 16:56:09,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 844
[2020-11-25 16:56:09,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3632 states and 4521 transitions.
[2020-11-25 16:56:09,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:09,163 INFO  L728         BuchiCegarLoop]: Abstraction has 3632 states and 4521 transitions.
[2020-11-25 16:56:09,165 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3632 states and 4521 transitions.
[2020-11-25 16:56:09,191 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3632 to 2792.
[2020-11-25 16:56:09,191 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2792 states.
[2020-11-25 16:56:09,194 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2792 states to 2792 states and 3104 transitions.
[2020-11-25 16:56:09,194 INFO  L751         BuchiCegarLoop]: Abstraction has 2792 states and 3104 transitions.
[2020-11-25 16:56:09,194 INFO  L631         BuchiCegarLoop]: Abstraction has 2792 states and 3104 transitions.
[2020-11-25 16:56:09,194 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:56:09,194 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2792 states and 3104 transitions.
[2020-11-25 16:56:09,196 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 16:56:09,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:09,197 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:09,197 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:09,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND TRUE   choice == 22
[L5206]              gas := gas - 21000;
[L5207]  COND TRUE   gas >= 0
[L5208]              assume tokens_s675 >= 0 && tokens_s675 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5209]              assume msgvalue_MSG == 0;
[L5210]  CALL        call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1495]              havoc __exception;
[L1496]              revert := false;
[L1497]  COND FALSE  !(__exception)
[L1526]  CALL        call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L3552]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3553]              allowed_GEEQToken[this][msgsender_MSG][spender_s675] := tokens_s675;
[L3554]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3555]              assert { :EventEmitted "Approval_GEEQToken" } true;
[L3556]              success_s675 := true;
[L1526]  RET         call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1527]              assume !revert && gas >= 0;
[L5210]  RET         call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:09,201 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:09,201 INFO  L82        PathProgramCache]: Analyzing trace with hash 1387717822, now seen corresponding path program 1 times
[2020-11-25 16:56:09,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:09,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:09,899 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 4 proven. 1 refuted. 0 times theorem prover too weak. 62 trivial. 0 not checked.
[2020-11-25 16:56:09,899 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:56:09,899 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 16:56:09,900 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:09,900 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 16:56:09,900 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=783, Unknown=0, NotChecked=0, Total=870
[2020-11-25 16:56:09,900 INFO  L87              Difference]: Start difference. First operand 2792 states and 3104 transitions. cyclomatic complexity: 323 Second operand 30 states.
[2020-11-25 16:56:15,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:15,551 INFO  L93              Difference]: Finished difference Result 2833 states and 3280 transitions.
[2020-11-25 16:56:15,552 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 16:56:15,552 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2833 states and 3280 transitions.
[2020-11-25 16:56:15,557 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 16:56:15,564 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2833 states to 2833 states and 3280 transitions.
[2020-11-25 16:56:15,564 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 679
[2020-11-25 16:56:15,565 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 679
[2020-11-25 16:56:15,565 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2833 states and 3280 transitions.
[2020-11-25 16:56:15,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:15,567 INFO  L728         BuchiCegarLoop]: Abstraction has 2833 states and 3280 transitions.
[2020-11-25 16:56:15,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2833 states and 3280 transitions.
[2020-11-25 16:56:15,583 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2833 to 2804.
[2020-11-25 16:56:15,583 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2804 states.
[2020-11-25 16:56:15,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2804 states to 2804 states and 3154 transitions.
[2020-11-25 16:56:15,586 INFO  L751         BuchiCegarLoop]: Abstraction has 2804 states and 3154 transitions.
[2020-11-25 16:56:15,586 INFO  L631         BuchiCegarLoop]: Abstraction has 2804 states and 3154 transitions.
[2020-11-25 16:56:15,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:56:15,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2804 states and 3154 transitions.
[2020-11-25 16:56:15,589 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:56:15,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:15,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:15,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:15,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:15,594 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:15,594 INFO  L82        PathProgramCache]: Analyzing trace with hash 145062415, now seen corresponding path program 1 times
[2020-11-25 16:56:15,594 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:15,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:15,649 INFO  L134       CoverageAnalysis]: Checked inductivity of 64 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 62 trivial. 0 not checked.
[2020-11-25 16:56:15,650 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:15,650 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:56:15,650 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:15,650 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:56:15,650 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:56:15,650 INFO  L87              Difference]: Start difference. First operand 2804 states and 3154 transitions. cyclomatic complexity: 365 Second operand 7 states.
[2020-11-25 16:56:16,162 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:16,162 INFO  L93              Difference]: Finished difference Result 2850 states and 3266 transitions.
[2020-11-25 16:56:16,162 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:56:16,162 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2850 states and 3266 transitions.
[2020-11-25 16:56:16,170 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:56:16,179 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2850 states to 2850 states and 3266 transitions.
[2020-11-25 16:56:16,179 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 16:56:16,179 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 16:56:16,180 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2850 states and 3266 transitions.
[2020-11-25 16:56:16,206 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:16,206 INFO  L728         BuchiCegarLoop]: Abstraction has 2850 states and 3266 transitions.
[2020-11-25 16:56:16,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2850 states and 3266 transitions.
[2020-11-25 16:56:16,222 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2850 to 2782.
[2020-11-25 16:56:16,222 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2782 states.
[2020-11-25 16:56:16,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2782 states to 2782 states and 3102 transitions.
[2020-11-25 16:56:16,225 INFO  L751         BuchiCegarLoop]: Abstraction has 2782 states and 3102 transitions.
[2020-11-25 16:56:16,225 INFO  L631         BuchiCegarLoop]: Abstraction has 2782 states and 3102 transitions.
[2020-11-25 16:56:16,225 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 16:56:16,225 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2782 states and 3102 transitions.
[2020-11-25 16:56:16,228 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 16:56:16,228 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:16,228 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:16,229 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:16,229 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND FALSE  !(choice == 7)
[L5304]  COND FALSE  !(choice == 6)
[L5310]  COND FALSE  !(choice == 5)
[L5316]  COND FALSE  !(choice == 4)
[L5322]  COND FALSE  !(choice == 3)
[L5328]  COND FALSE  !(choice == 2)
[L5335]  COND TRUE   choice == 1
[L5336]              gas := gas - 21000;
[L5337]  COND TRUE   gas >= 0
[L5338]              assume tokens_s806 >= 0 && tokens_s806 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]              assume msgvalue_MSG == 0;
[L5340]  CALL        call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L1699]              havoc __exception;
[L1700]              revert := false;
[L1701]  COND FALSE  !(__exception)
[L1730]  CALL        call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L3665]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_GEEQToken[this][msgsender_MSG][spender_s806];
[L3666]              allowed_GEEQToken[this][msgsender_MSG][spender_s806] := tokens_s806;
[L3667]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_GEEQToken[this][msgsender_MSG][spender_s806];
[L3668]              assert { :EventEmitted "Approval_GEEQToken" } true;
[L3669]              assume DType[spender_s806] == ApproveAndCallFallBack;
[L3670]              __var_20 := spender_s806;
[L3671]              __var_22 := this;
[L3673]              success_s806 := true;
[L1730]  RET         call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L1731]              assume !revert && gas >= 0;
[L5340]  RET         call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:16,240 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:16,240 INFO  L82        PathProgramCache]: Analyzing trace with hash 22904978, now seen corresponding path program 1 times
[2020-11-25 16:56:16,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:16,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:17,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 61 trivial. 0 not checked.
[2020-11-25 16:56:17,033 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:56:17,034 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 16:56:17,034 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:17,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 16:56:17,034 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1157, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 16:56:17,034 INFO  L87              Difference]: Start difference. First operand 2782 states and 3102 transitions. cyclomatic complexity: 333 Second operand 36 states.
[2020-11-25 16:56:24,312 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:24,312 INFO  L93              Difference]: Finished difference Result 2815 states and 3237 transitions.
[2020-11-25 16:56:24,312 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 16:56:24,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2815 states and 3237 transitions.
[2020-11-25 16:56:24,319 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 16:56:24,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2815 states to 2815 states and 3237 transitions.
[2020-11-25 16:56:24,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 668
[2020-11-25 16:56:24,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 668
[2020-11-25 16:56:24,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2815 states and 3237 transitions.
[2020-11-25 16:56:24,328 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:24,328 INFO  L728         BuchiCegarLoop]: Abstraction has 2815 states and 3237 transitions.
[2020-11-25 16:56:24,330 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2815 states and 3237 transitions.
[2020-11-25 16:56:24,344 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2815 to 2794.
[2020-11-25 16:56:24,344 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2794 states.
[2020-11-25 16:56:24,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2794 states to 2794 states and 3158 transitions.
[2020-11-25 16:56:24,348 INFO  L751         BuchiCegarLoop]: Abstraction has 2794 states and 3158 transitions.
[2020-11-25 16:56:24,348 INFO  L631         BuchiCegarLoop]: Abstraction has 2794 states and 3158 transitions.
[2020-11-25 16:56:24,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 16:56:24,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2794 states and 3158 transitions.
[2020-11-25 16:56:24,351 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:56:24,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:24,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:24,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:24,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:24,355 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:24,355 INFO  L82        PathProgramCache]: Analyzing trace with hash -557665417, now seen corresponding path program 1 times
[2020-11-25 16:56:24,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:24,367 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:24,486 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 16:56:24,486 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:24,486 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 16:56:24,486 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:24,486 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 16:56:24,486 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 16:56:24,487 INFO  L87              Difference]: Start difference. First operand 2794 states and 3158 transitions. cyclomatic complexity: 381 Second operand 9 states.
[2020-11-25 16:56:25,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:25,297 INFO  L93              Difference]: Finished difference Result 2878 states and 3344 transitions.
[2020-11-25 16:56:25,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 16:56:25,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2878 states and 3344 transitions.
[2020-11-25 16:56:25,304 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 16:56:25,311 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2878 states to 2878 states and 3344 transitions.
[2020-11-25 16:56:25,312 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 693
[2020-11-25 16:56:25,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 693
[2020-11-25 16:56:25,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2878 states and 3344 transitions.
[2020-11-25 16:56:25,314 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:25,314 INFO  L728         BuchiCegarLoop]: Abstraction has 2878 states and 3344 transitions.
[2020-11-25 16:56:25,316 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2878 states and 3344 transitions.
[2020-11-25 16:56:25,340 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2878 to 2754.
[2020-11-25 16:56:25,340 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2754 states.
[2020-11-25 16:56:25,343 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2754 states to 2754 states and 3036 transitions.
[2020-11-25 16:56:25,343 INFO  L751         BuchiCegarLoop]: Abstraction has 2754 states and 3036 transitions.
[2020-11-25 16:56:25,343 INFO  L631         BuchiCegarLoop]: Abstraction has 2754 states and 3036 transitions.
[2020-11-25 16:56:25,343 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 16:56:25,343 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2754 states and 3036 transitions.
[2020-11-25 16:56:25,346 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:25,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:25,346 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:25,347 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:25,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND FALSE  !(choice == 7)
[L5304]  COND FALSE  !(choice == 6)
[L5310]  COND FALSE  !(choice == 5)
[L5316]  COND FALSE  !(choice == 4)
[L5322]  COND FALSE  !(choice == 3)
[L5328]  COND FALSE  !(choice == 2)
[L5335]  COND TRUE   choice == 1
[L5336]              gas := gas - 21000;
[L5337]  COND TRUE   gas >= 0
[L5338]              assume tokens_s806 >= 0 && tokens_s806 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]              assume msgvalue_MSG == 0;
[L5340]  CALL        call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L1699]              havoc __exception;
[L1700]              revert := false;
[L1701]  COND FALSE  !(__exception)
[L1730]  CALL        call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L3665]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_GEEQToken[this][msgsender_MSG][spender_s806];
[L3666]              allowed_GEEQToken[this][msgsender_MSG][spender_s806] := tokens_s806;
[L3667]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_GEEQToken[this][msgsender_MSG][spender_s806];
[L3668]              assert { :EventEmitted "Approval_GEEQToken" } true;
[L3669]              assume DType[spender_s806] == ApproveAndCallFallBack;
[L3670]              __var_20 := spender_s806;
[L3671]              __var_22 := this;
[L3673]              success_s806 := true;
[L1730]  RET         call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L1731]              assume !revert && gas >= 0;
[L5340]  RET         call success_s806 := approveAndCall~address~uint256~bytes_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s806, tokens_s806, data_s806);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((success_s747 == true && balances_GEEQToken[this][from_s747] == old(balances_GEEQToken[this][from_s747]) - tokens_s747) && balances_GEEQToken[this][to_s747] == old(balances_GEEQToken[this][to_s747]) + tokens_s747) && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && allowed_GEEQToken[this][p2][p3] == old(allowed_GEEQToken[this][p2][p3])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:25,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:25,350 INFO  L82        PathProgramCache]: Analyzing trace with hash -1739142754, now seen corresponding path program 1 times
[2020-11-25 16:56:25,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:25,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:25,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 12 proven. 1 refuted. 0 times theorem prover too weak. 55 trivial. 0 not checked.
[2020-11-25 16:56:25,824 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:56:25,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 16:56:25,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:25,825 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 16:56:25,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=900, Unknown=0, NotChecked=0, Total=992
[2020-11-25 16:56:25,825 INFO  L87              Difference]: Start difference. First operand 2754 states and 3036 transitions. cyclomatic complexity: 292 Second operand 32 states.
[2020-11-25 16:56:31,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:31,392 INFO  L93              Difference]: Finished difference Result 2795 states and 3186 transitions.
[2020-11-25 16:56:31,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 16:56:31,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2795 states and 3186 transitions.
[2020-11-25 16:56:31,397 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 16:56:31,403 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2795 states to 2795 states and 3186 transitions.
[2020-11-25 16:56:31,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 657
[2020-11-25 16:56:31,403 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 657
[2020-11-25 16:56:31,403 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2795 states and 3186 transitions.
[2020-11-25 16:56:31,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:31,405 INFO  L728         BuchiCegarLoop]: Abstraction has 2795 states and 3186 transitions.
[2020-11-25 16:56:31,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2795 states and 3186 transitions.
[2020-11-25 16:56:31,418 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2795 to 2754.
[2020-11-25 16:56:31,418 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2754 states.
[2020-11-25 16:56:31,421 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2754 states to 2754 states and 3036 transitions.
[2020-11-25 16:56:31,421 INFO  L751         BuchiCegarLoop]: Abstraction has 2754 states and 3036 transitions.
[2020-11-25 16:56:31,421 INFO  L631         BuchiCegarLoop]: Abstraction has 2754 states and 3036 transitions.
[2020-11-25 16:56:31,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 16:56:31,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2754 states and 3036 transitions.
[2020-11-25 16:56:31,424 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:31,424 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:31,424 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:31,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:31,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND TRUE   choice == 7
[L5299]              gas := gas - 21000;
[L5300]  COND TRUE   gas >= 0
[L5301]              assume msgvalue_MSG == 0;
[L5302]  CALL        call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND FALSE  !(choice == 7)
[L5304]  COND TRUE   choice == 6
[L5305]              gas := gas - 21000;
[L5306]  COND TRUE   gas >= 0
[L5307]              assume msgvalue_MSG == 0;
[L5308]  CALL        call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L983]   CALL        call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3260]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]              pauseOn_GEEQToken[this] := false;
[L983]   RET         call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L984]               assume !revert && gas >= 0;
[L5308]  RET         call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:31,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:31,427 INFO  L82        PathProgramCache]: Analyzing trace with hash -1798017649, now seen corresponding path program 1 times
[2020-11-25 16:56:31,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:31,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:31,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:31,534 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:31,534 INFO  L82        PathProgramCache]: Analyzing trace with hash 137212322, now seen corresponding path program 1 times
[2020-11-25 16:56:31,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:31,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:31,544 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:31,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:31,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -1878139472, now seen corresponding path program 1 times
[2020-11-25 16:56:31,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:31,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:31,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
[2020-11-25 16:56:32,019 WARN  L188               SmtUtils]: Spent 232.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 198
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-25 16:56:32,171 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 318
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 8053 to 16103
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 16:56:32,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-25 16:56:33,406 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification that was a NOOP. DAG size: 305
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 16:56:34,020 WARN  L188               SmtUtils]: Spent 602.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 249
[2020-11-25 16:56:34,751 WARN  L188               SmtUtils]: Spent 728.00 ms on a formula simplification. DAG size of input: 308 DAG size of output: 290
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 16:56:34,954 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 171
[2020-11-25 16:56:35,196 WARN  L188               SmtUtils]: Spent 240.00 ms on a formula simplification that was a NOOP. DAG size: 374
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 16:56:35,729 WARN  L188               SmtUtils]: Spent 524.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 301
[2020-11-25 16:56:37,494 WARN  L188               SmtUtils]: Spent 1.76 s on a formula simplification. DAG size of input: 733 DAG size of output: 718
Garbage collection #1: 307 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 307 to 613
Garbage collection #2: 613 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 613 to 1223
Garbage collection #3: 1223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1223 to 2441
Garbage collection #4: 2441 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2441 to 4877
Garbage collection #5: 4877 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4877 to 9749
Garbage collection #6: 9749 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9749 to 19489
Garbage collection #7: 19489 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19489 to 38977
Garbage collection #8: 38977 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 38977 to 77951
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 16:56:37,875 WARN  L188               SmtUtils]: Spent 338.00 ms on a formula simplification. DAG size of input: 240 DAG size of output: 230
[2020-11-25 16:56:38,185 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 364
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 16:56:38,565 WARN  L188               SmtUtils]: Spent 365.00 ms on a formula simplification. DAG size of input: 256 DAG size of output: 238
[2020-11-25 16:56:39,195 WARN  L188               SmtUtils]: Spent 628.00 ms on a formula simplification. DAG size of input: 374 DAG size of output: 373
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #9: 34147 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 34147 to 68281
[2020-11-25 16:56:39,968 WARN  L188               SmtUtils]: Spent 758.00 ms on a formula simplification. DAG size of input: 381 DAG size of output: 368
[2020-11-25 16:56:39,981 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:40,003 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:56:40,010 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:56:40 BasicIcfg
[2020-11-25 16:56:40,010 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:56:40,011 INFO  L168              Benchmark]: Toolchain (without parser) took 49589.36 ms. Allocated memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: 2.0 GB). Free memory was 940.6 MB in the beginning and 1.8 GB in the end (delta: -852.3 MB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,011 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,011 INFO  L168              Benchmark]: Boogie Preprocessor took 107.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 924.5 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,012 INFO  L168              Benchmark]: UtopiaSpecLang took 71.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,012 INFO  L168              Benchmark]: Boogie Printer took 23.36 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,012 INFO  L168              Benchmark]: RCFGBuilder took 674.55 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 768.8 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,013 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.31 ms. Allocated memory is still 1.0 GB. Free memory was 768.8 MB in the beginning and 759.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,013 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1427.47 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 164.1 MB). Free memory was 759.8 MB in the beginning and 799.2 MB in the end (delta: -39.3 MB). Peak memory consumption was 132.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,013 INFO  L168              Benchmark]: BlockEncodingV2 took 191.37 ms. Allocated memory is still 1.2 GB. Free memory was 799.2 MB in the beginning and 725.3 MB in the end (delta: 73.9 MB). Peak memory consumption was 73.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,013 INFO  L168              Benchmark]: BuchiAutomizer took 47053.26 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.8 GB). Free memory was 725.3 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-25 16:56:40,016 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4724 locations, 8041 edges
  - StatisticsResult: Encoded RCFG
    4674 locations, 7911 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 107.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 924.5 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.36 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 674.55 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 768.8 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.31 ms. Allocated memory is still 1.0 GB. Free memory was 768.8 MB in the beginning and 759.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1427.47 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 164.1 MB). Free memory was 759.8 MB in the beginning and 799.2 MB in the end (delta: -39.3 MB). Peak memory consumption was 132.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 191.37 ms. Allocated memory is still 1.2 GB. Free memory was 799.2 MB in the beginning and 725.3 MB in the end (delta: 73.9 MB). Peak memory consumption was 73.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 47053.26 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.8 GB). Free memory was 725.3 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1991 locations, 2488 edges
  - StatisticsResult: BuchiProgram size
    4724 locations, 8041 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.13 modules have a trivial ranking function, the largest among these consists of 36 locations. The remainder module has 2754 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 46.9s and 14 iterations.  TraceHistogramMax:2. Analysis of lassos took 12.3s. Construction of modules took 27.1s. BÃ¼chi inclusion checks took 6.4s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 13 MinimizatonAttempts, 5368 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4045 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 45174 SDtfs, 55693 SDslu, 122050 SDs, 0 SdLazy, 289296 SolverSat, 9239 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 27.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1164884509) = (new GEEQToken)({from : 1164884513});
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884509).pauseEnable.gas(3979002)({from : 1164884513});
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884509).transferFrom~address~address~uint256.gas(3979003)({from : 1164884496, from : 1164884506, to : 1164884510, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && balances_GEEQToken[this][to_s747] + tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_GEEQToken0 := true;
[L3]                call_transferFrom_GEEQToken0 := false;
[L3]                revert := revert_hold;
[L1565]             havoc __exception;
[L1566]             revert := false;
[L1567]  COND TRUE  __exception
[L1568]             __tmp__Balance := Balance;
[L1569]             __tmp__DType := DType;
[L1570]             __tmp__Alloc := Alloc;
[L1571]             __tmp__balance_ADDR := balance_ADDR;
[L1572]             __tmp__M_Ref_int := M_Ref_int;
[L1573]             __tmp__sum_balances0 := sum_balances0;
[L1574]             __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]             __tmp__sum_allowed1 := sum_allowed1;
[L1577]             __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]             __tmp__Length := Length;
[L1579]             __tmp__now := now;
[L1580]             __tmp__owner_Owned := owner_Owned;
[L1581]             __tmp__newOwner_Owned := newOwner_Owned;
[L1582]             __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]             __tmp__name_GEEQToken := name_GEEQToken;
[L1584]             __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]             __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]             __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]             __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]             __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]             __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]             __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]             __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]             __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL       call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE  __tmp__pauseOn_GEEQToken[this]
[L3566]             revert := true;
[L1593]  RET        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]             assume revert || gas < 0;
[L5217]  RET        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);

Loop:
GEEQToken(1164884509).pauseDisable.gas(3979001)({from : 1164884513});
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L983]   CALL        call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3260]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]              pauseOn_GEEQToken[this] := false;
[L983]   RET         call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L984]               assume !revert && gas >= 0;
[L5308]  RET         call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
