This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:43:01,595 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:43:01,597 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:43:01,607 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:43:01,607 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:43:01,608 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:43:01,609 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:43:01,610 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:43:01,612 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:43:01,612 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:43:01,613 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:43:01,613 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:43:01,614 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:43:01,615 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:43:01,615 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:43:01,616 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:43:01,616 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:43:01,617 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:43:01,619 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:43:01,620 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:43:01,621 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:43:01,622 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:43:01,623 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:43:01,623 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:43:01,624 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:43:01,624 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:43:01,624 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:43:01,625 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:43:01,625 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:43:01,625 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:43:01,626 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:43:01,626 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:43:01,627 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:43:01,627 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:43:01,628 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:43:01,628 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:43:01,629 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:43:01,629 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:43:01,629 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:43:01,630 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:43:01,630 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:43:01,630 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:43:01,638 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:43:01,638 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:43:01,639 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:43:01,639 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:43:01,639 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:43:01,639 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:43:01,639 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:43:01,639 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:43:01,639 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:43:01,640 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:43:01,640 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:43:01,640 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:43:01,641 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:43:01,641 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:43:01,676 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:43:01,688 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:43:01,690 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:43:01,691 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:43:01,692 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:43:01,692 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl
[2020-11-25 14:43:01,692 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl'
[2020-11-25 14:43:01,763 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:43:01,764 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:43:01,765 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:43:01,765 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:43:01,765 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:43:01,782 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,783 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,808 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,809 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,824 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,832 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,837 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,844 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:43:01,845 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:43:01,845 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:43:01,847 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:43:01,850 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/1) ...
[2020-11-25 14:43:01,865 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && balances_Ducks[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && balances_Ducks[this][from] == old(balances_Ducks[this][from]) - value && balances_Ducks[this][to] == old(balances_Ducks[this][to]) + value && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1]) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:43:01,871 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && balances_Ducks[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && balances_Ducks[this][from] == old(balances_Ducks[this][from]) - value && balances_Ducks[this][to] == old(balances_Ducks[this][to]) + value && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1]) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:43:01,879 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && balances_Ducks[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && balances_Ducks[this][from] == old(balances_Ducks[this][from]) - value && balances_Ducks[this][to] == old(balances_Ducks[this][to]) + value && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1]) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:43:01,887 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s393 && p1!=to_s393 ) && ( p2!=from_s393 || p3!=msg.sender ) ) && from_s393!=to_s393 ) && tokens_s393<=balances_Ducks[this][from_s393] ) && tokens_s393<=allowed_Ducks[this][from_s393][msg.sender] ) && ( balances_Ducks[this][to_s393] + tokens_s393 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s393]>=0 ) && balances_Ducks[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][from_s393]>=0 ) && balances_Ducks[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Ducks[this][from_s393][msg.sender]>=0 ) && allowed_Ducks[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:43:01,890 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s393==true && balances_Ducks[this][from_s393]==( ( old(balances_Ducks[this][from_s393]) ) - tokens_s393 ) ) && balances_Ducks[this][to_s393]==( ( old(balances_Ducks[this][to_s393]) ) + tokens_s393 ) ) && allowed_Ducks[this][from_s393][msg.sender]==( ( old(allowed_Ducks[this][from_s393][msg.sender]) ) - tokens_s393 ) ) && _totalSupply_Ducks[this]==( old(_totalSupply_Ducks[this]) ) ) && balances_Ducks[this][p1]==( old(balances_Ducks[this][p1]) ) ) && allowed_Ducks[this][p2][p3]==( old(allowed_Ducks[this][p2][p3]) ) ) && name_Ducks[this]==( old(name_Ducks[this]) ) ) && symbol_Ducks[this]==( old(symbol_Ducks[this]) ) ) && decimals_Ducks[this]==( old(decimals_Ducks[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s393,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_Ducks>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]]
[2020-11-25 14:43:01,894 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && balances_Ducks[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && balances_Ducks[this][from] == old(balances_Ducks[this][from]) - value && balances_Ducks[this][to] == old(balances_Ducks[this][to]) + value && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1]) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:43:01,894 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Ducks0) ==> ( <>AP(success_transferFrom_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:43:01,900 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:01 PropertyContainer
[2020-11-25 14:43:01,900 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:43:01,901 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:43:01,901 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:43:01,901 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:43:01,902 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/2) ...
[2020-11-25 14:43:01,902 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:43:01,902 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:43:01,917 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:01" (2/2) ...
[2020-11-25 14:43:01,917 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:43:01,918 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:43:01,918 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:43:01,918 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:43:01,919 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/2) ...
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:43:01,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:43:01,972 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:43:01,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:43:01,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:43:01,973 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:43:01,974 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:43:01,974 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:43:01,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:43:01,974 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:43:01,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:43:01,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:43:01,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:43:01,975 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:43:01,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:43:01,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:43:01,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:43:01,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:43:01,976 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,977 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:43:01,978 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:43:01,979 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:43:01,980 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:43:01,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:43:01,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:43:01,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:43:01,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:43:01,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:43:01,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:43:01,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:43:02,136 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:43:02,163 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:43:02,163 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:43:02,164 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:43:02,510 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:43:02,510 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 14:43:02,512 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:02 BoogieIcfgContainer
[2020-11-25 14:43:02,512 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:01" (2/2) ...
[2020-11-25 14:43:02,512 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:43:02,512 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6d0413fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:02, skipping insertion in model container
[2020-11-25 14:43:02,512 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:43:02,512 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:43:02,513 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:43:02,514 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:43:02,514 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/3) ...
[2020-11-25 14:43:02,514 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1a3052ad and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:02, skipping insertion in model container
[2020-11-25 14:43:02,515 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:01" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:43:02,548 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:02 NWAContainer
[2020-11-25 14:43:02,549 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:43:02,549 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:43:02,549 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:43:02,550 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:43:02,550 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:02" (3/4) ...
[2020-11-25 14:43:02,551 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4a4cf682 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:02, skipping insertion in model container
[2020-11-25 14:43:02,551 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:02" (4/4) ...
[2020-11-25 14:43:02,554 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:43:02,557 INFO  L110   BuchiProductObserver]: Initial RCFG 1052 locations, 1325 edges
[2020-11-25 14:43:02,557 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:43:02,568 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:43:03,692 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:43:03,697 INFO  L110   BuchiProductObserver]: BuchiProgram size 2494 locations, 4287 edges
[2020-11-25 14:43:03,698 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:03 BoogieIcfgContainer
[2020-11-25 14:43:03,698 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:43:03,698 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:43:03,698 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:43:03,700 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:43:03,700 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:03" (1/1) ...
[2020-11-25 14:43:03,790 INFO  L313           BlockEncoder]: Initial Icfg 2494 locations, 4287 edges
[2020-11-25 14:43:03,790 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:43:03,791 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:43:03,791 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:43:03,792 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:43:03,801 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 14:43:03,808 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 14:43:03,817 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:43:03,821 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:43:03,823 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:43:03,824 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:43:03,828 INFO  L313           BlockEncoder]: Encoded RCFG 2450 locations, 4169 edges
[2020-11-25 14:43:03,828 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:03 BasicIcfg
[2020-11-25 14:43:03,828 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:43:03,829 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:43:03,829 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:43:03,831 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:43:03,832 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,832 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:01" (1/6) ...
[2020-11-25 14:43:03,834 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ceab11c and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:03, skipping insertion in model container
[2020-11-25 14:43:03,834 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,834 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:01" (2/6) ...
[2020-11-25 14:43:03,834 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ceab11c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:03, skipping insertion in model container
[2020-11-25 14:43:03,834 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,834 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:02" (3/6) ...
[2020-11-25 14:43:03,835 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ceab11c and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:43:03, skipping insertion in model container
[2020-11-25 14:43:03,835 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,835 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:02" (4/6) ...
[2020-11-25 14:43:03,835 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ceab11c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:03, skipping insertion in model container
[2020-11-25 14:43:03,835 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,835 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:03" (5/6) ...
[2020-11-25 14:43:03,835 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ceab11c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:43:03, skipping insertion in model container
[2020-11-25 14:43:03,836 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:43:03,836 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:03" (6/6) ...
[2020-11-25 14:43:03,837 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-normal.bpl_BEv2
[2020-11-25 14:43:03,876 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:43:03,876 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:43:03,877 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:43:03,877 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:43:03,877 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:43:03,877 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:43:03,877 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:43:03,877 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:43:03,877 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:43:03,912 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2450 states.
[2020-11-25 14:43:03,964 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:03,964 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:03,965 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:03,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:03,982 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:03,982 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:43:03,982 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2450 states.
[2020-11-25 14:43:04,000 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:04,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:04,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:04,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:04,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:04,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:04,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 1186192497, now seen corresponding path program 1 times
[2020-11-25 14:43:04,026 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:04,048 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:04,121 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:43:04,123 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:04,123 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:43:04,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:04,263 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:43:04,263 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:43:04,267 INFO  L87              Difference]: Start difference. First operand 2450 states. Second operand 3 states.
[2020-11-25 14:43:04,422 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:04,422 INFO  L93              Difference]: Finished difference Result 1725 states and 1882 transitions.
[2020-11-25 14:43:04,423 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:43:04,424 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1725 states and 1882 transitions.
[2020-11-25 14:43:04,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:04,451 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1725 states to 1725 states and 1882 transitions.
[2020-11-25 14:43:04,452 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:43:04,454 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 14:43:04,454 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1725 states and 1882 transitions.
[2020-11-25 14:43:04,460 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:04,461 INFO  L728         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 14:43:04,478 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1725 states and 1882 transitions.
[2020-11-25 14:43:04,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1725 to 1725.
[2020-11-25 14:43:04,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1725 states.
[2020-11-25 14:43:04,522 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1725 states to 1725 states and 1882 transitions.
[2020-11-25 14:43:04,523 INFO  L751         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 14:43:04,524 INFO  L631         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 14:43:04,524 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:43:04,524 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1725 states and 1882 transitions.
[2020-11-25 14:43:04,531 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:04,531 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:04,531 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:04,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:04,533 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND TRUE   revert
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:04,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:04,543 INFO  L82        PathProgramCache]: Analyzing trace with hash 2044663529, now seen corresponding path program 1 times
[2020-11-25 14:43:04,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:04,555 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:04,573 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:43:04,573 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:04,573 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:43:04,575 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:04,575 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:43:04,575 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:43:04,575 INFO  L87              Difference]: Start difference. First operand 1725 states and 1882 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 14:43:04,846 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:04,847 INFO  L93              Difference]: Finished difference Result 2599 states and 2958 transitions.
[2020-11-25 14:43:04,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:43:04,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2599 states and 2958 transitions.
[2020-11-25 14:43:04,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:43:04,875 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2599 states to 2523 states and 2876 transitions.
[2020-11-25 14:43:04,875 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 14:43:04,877 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 14:43:04,877 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2523 states and 2876 transitions.
[2020-11-25 14:43:04,881 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:04,881 INFO  L728         BuchiCegarLoop]: Abstraction has 2523 states and 2876 transitions.
[2020-11-25 14:43:04,883 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2523 states and 2876 transitions.
[2020-11-25 14:43:04,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2523 to 1745.
[2020-11-25 14:43:04,906 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1745 states.
[2020-11-25 14:43:04,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1745 states to 1745 states and 1874 transitions.
[2020-11-25 14:43:04,909 INFO  L751         BuchiCegarLoop]: Abstraction has 1745 states and 1874 transitions.
[2020-11-25 14:43:04,909 INFO  L631         BuchiCegarLoop]: Abstraction has 1745 states and 1874 transitions.
[2020-11-25 14:43:04,909 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:43:04,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1745 states and 1874 transitions.
[2020-11-25 14:43:04,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:04,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:04,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:04,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:04,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:04,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:04,919 INFO  L82        PathProgramCache]: Analyzing trace with hash -2061739226, now seen corresponding path program 1 times
[2020-11-25 14:43:04,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:04,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:04,981 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:43:04,981 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:04,981 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:43:04,982 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:04,982 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:43:04,982 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:43:04,982 INFO  L87              Difference]: Start difference. First operand 1745 states and 1874 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 14:43:05,715 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:05,716 INFO  L93              Difference]: Finished difference Result 1903 states and 2046 transitions.
[2020-11-25 14:43:05,716 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:43:05,716 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1903 states and 2046 transitions.
[2020-11-25 14:43:05,724 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:05,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1903 states to 1903 states and 2046 transitions.
[2020-11-25 14:43:05,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 14:43:05,732 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 14:43:05,732 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1903 states and 2046 transitions.
[2020-11-25 14:43:05,734 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:05,735 INFO  L728         BuchiCegarLoop]: Abstraction has 1903 states and 2046 transitions.
[2020-11-25 14:43:05,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1903 states and 2046 transitions.
[2020-11-25 14:43:05,755 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1903 to 1797.
[2020-11-25 14:43:05,755 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1797 states.
[2020-11-25 14:43:05,758 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1797 states to 1797 states and 1930 transitions.
[2020-11-25 14:43:05,758 INFO  L751         BuchiCegarLoop]: Abstraction has 1797 states and 1930 transitions.
[2020-11-25 14:43:05,758 INFO  L631         BuchiCegarLoop]: Abstraction has 1797 states and 1930 transitions.
[2020-11-25 14:43:05,758 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:43:05,759 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1797 states and 1930 transitions.
[2020-11-25 14:43:05,762 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:05,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:05,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:05,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:05,765 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:05,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:05,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 1553355918, now seen corresponding path program 1 times
[2020-11-25 14:43:05,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:05,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:06,435 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:06,998 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification. DAG size of input: 198 DAG size of output: 72
[2020-11-25 14:43:07,295 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 14:43:07,295 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:43:07,295 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 14:43:07,296 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:07,296 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 14:43:07,296 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=636, Unknown=0, NotChecked=0, Total=702
[2020-11-25 14:43:07,296 INFO  L87              Difference]: Start difference. First operand 1797 states and 1930 transitions. cyclomatic complexity: 135 Second operand 27 states.
[2020-11-25 14:43:12,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:12,248 INFO  L93              Difference]: Finished difference Result 1868 states and 2027 transitions.
[2020-11-25 14:43:12,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 14:43:12,248 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1868 states and 2027 transitions.
[2020-11-25 14:43:12,252 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 14:43:12,257 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1868 states to 1868 states and 2027 transitions.
[2020-11-25 14:43:12,257 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 14:43:12,258 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 14:43:12,258 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1868 states and 2027 transitions.
[2020-11-25 14:43:12,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:12,260 INFO  L728         BuchiCegarLoop]: Abstraction has 1868 states and 2027 transitions.
[2020-11-25 14:43:12,261 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1868 states and 2027 transitions.
[2020-11-25 14:43:12,274 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1868 to 1851.
[2020-11-25 14:43:12,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1851 states.
[2020-11-25 14:43:12,276 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1851 states to 1851 states and 1994 transitions.
[2020-11-25 14:43:12,277 INFO  L751         BuchiCegarLoop]: Abstraction has 1851 states and 1994 transitions.
[2020-11-25 14:43:12,277 INFO  L631         BuchiCegarLoop]: Abstraction has 1851 states and 1994 transitions.
[2020-11-25 14:43:12,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:43:12,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1851 states and 1994 transitions.
[2020-11-25 14:43:12,280 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:12,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:12,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:12,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:12,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:12,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:12,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 1166052044, now seen corresponding path program 1 times
[2020-11-25 14:43:12,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:12,292 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:12,321 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 14:43:12,321 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:12,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:43:12,322 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:12,322 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:43:12,322 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:43:12,322 INFO  L87              Difference]: Start difference. First operand 1851 states and 1994 transitions. cyclomatic complexity: 147 Second operand 7 states.
[2020-11-25 14:43:12,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:12,608 INFO  L93              Difference]: Finished difference Result 1935 states and 2094 transitions.
[2020-11-25 14:43:12,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:43:12,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1935 states and 2094 transitions.
[2020-11-25 14:43:12,614 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:43:12,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1935 states to 1935 states and 2094 transitions.
[2020-11-25 14:43:12,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 14:43:12,619 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 14:43:12,619 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1935 states and 2094 transitions.
[2020-11-25 14:43:12,620 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:12,620 INFO  L728         BuchiCegarLoop]: Abstraction has 1935 states and 2094 transitions.
[2020-11-25 14:43:12,622 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1935 states and 2094 transitions.
[2020-11-25 14:43:12,633 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1935 to 1886.
[2020-11-25 14:43:12,633 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1886 states.
[2020-11-25 14:43:12,635 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1886 states to 1886 states and 2030 transitions.
[2020-11-25 14:43:12,635 INFO  L751         BuchiCegarLoop]: Abstraction has 1886 states and 2030 transitions.
[2020-11-25 14:43:12,635 INFO  L631         BuchiCegarLoop]: Abstraction has 1886 states and 2030 transitions.
[2020-11-25 14:43:12,635 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:43:12,635 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1886 states and 2030 transitions.
[2020-11-25 14:43:12,638 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:12,638 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:12,638 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:12,639 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:12,639 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:12,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:12,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 1266502177, now seen corresponding path program 1 times
[2020-11-25 14:43:12,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:12,650 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:12,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 14:43:12,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:12,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 14:43:12,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:12,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 14:43:12,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 14:43:12,730 INFO  L87              Difference]: Start difference. First operand 1886 states and 2030 transitions. cyclomatic complexity: 148 Second operand 17 states.
[2020-11-25 14:43:14,292 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:14,292 INFO  L93              Difference]: Finished difference Result 1971 states and 2176 transitions.
[2020-11-25 14:43:14,292 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 14:43:14,292 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1971 states and 2176 transitions.
[2020-11-25 14:43:14,297 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 14:43:14,302 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1971 states to 1971 states and 2176 transitions.
[2020-11-25 14:43:14,302 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 702
[2020-11-25 14:43:14,302 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 14:43:14,302 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1971 states and 2176 transitions.
[2020-11-25 14:43:14,304 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:14,304 INFO  L728         BuchiCegarLoop]: Abstraction has 1971 states and 2176 transitions.
[2020-11-25 14:43:14,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1971 states and 2176 transitions.
[2020-11-25 14:43:14,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1971 to 1912.
[2020-11-25 14:43:14,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1912 states.
[2020-11-25 14:43:14,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1912 states to 1912 states and 2073 transitions.
[2020-11-25 14:43:14,319 INFO  L751         BuchiCegarLoop]: Abstraction has 1912 states and 2073 transitions.
[2020-11-25 14:43:14,319 INFO  L631         BuchiCegarLoop]: Abstraction has 1912 states and 2073 transitions.
[2020-11-25 14:43:14,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:43:14,319 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1912 states and 2073 transitions.
[2020-11-25 14:43:14,321 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:43:14,321 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:14,321 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:14,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:14,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND FALSE  !(revert)
[L1626]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s393];
[L1627]              __tmp__balances_Ducks[this][to_s393] := __var_6;
[L1628]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s393];
[L1629]              success_s393 := true;
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:14,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:14,325 INFO  L82        PathProgramCache]: Analyzing trace with hash -481426551, now seen corresponding path program 1 times
[2020-11-25 14:43:14,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:14,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:14,351 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 14:43:14,351 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:14,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:43:14,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:14,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:43:14,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:43:14,352 INFO  L87              Difference]: Start difference. First operand 1912 states and 2073 transitions. cyclomatic complexity: 167 Second operand 5 states.
[2020-11-25 14:43:14,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:14,556 INFO  L93              Difference]: Finished difference Result 2459 states and 2780 transitions.
[2020-11-25 14:43:14,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:43:14,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2459 states and 2780 transitions.
[2020-11-25 14:43:14,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:43:14,567 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2459 states to 1917 states and 2237 transitions.
[2020-11-25 14:43:14,567 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 561
[2020-11-25 14:43:14,567 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 561
[2020-11-25 14:43:14,567 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1917 states and 2237 transitions.
[2020-11-25 14:43:14,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:14,569 INFO  L728         BuchiCegarLoop]: Abstraction has 1917 states and 2237 transitions.
[2020-11-25 14:43:14,570 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1917 states and 2237 transitions.
[2020-11-25 14:43:14,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1917 to 1349.
[2020-11-25 14:43:14,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1349 states.
[2020-11-25 14:43:14,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1349 states to 1349 states and 1466 transitions.
[2020-11-25 14:43:14,582 INFO  L751         BuchiCegarLoop]: Abstraction has 1349 states and 1466 transitions.
[2020-11-25 14:43:14,582 INFO  L631         BuchiCegarLoop]: Abstraction has 1349 states and 1466 transitions.
[2020-11-25 14:43:14,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:43:14,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1349 states and 1466 transitions.
[2020-11-25 14:43:14,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:14,584 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:14,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:14,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:14,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:14,589 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:14,589 INFO  L82        PathProgramCache]: Analyzing trace with hash 72973607, now seen corresponding path program 1 times
[2020-11-25 14:43:14,589 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:14,613 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:15,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 14:43:15,493 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:43:15,493 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 14:43:15,493 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:15,493 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 14:43:15,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=899, Unknown=0, NotChecked=0, Total=992
[2020-11-25 14:43:15,494 INFO  L87              Difference]: Start difference. First operand 1349 states and 1466 transitions. cyclomatic complexity: 121 Second operand 32 states.
[2020-11-25 14:43:18,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:18,669 INFO  L93              Difference]: Finished difference Result 1374 states and 1518 transitions.
[2020-11-25 14:43:18,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 14:43:18,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1374 states and 1518 transitions.
[2020-11-25 14:43:18,672 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:43:18,675 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1374 states to 1374 states and 1518 transitions.
[2020-11-25 14:43:18,675 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 441
[2020-11-25 14:43:18,675 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 441
[2020-11-25 14:43:18,676 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1374 states and 1518 transitions.
[2020-11-25 14:43:18,677 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:18,677 INFO  L728         BuchiCegarLoop]: Abstraction has 1374 states and 1518 transitions.
[2020-11-25 14:43:18,677 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1374 states and 1518 transitions.
[2020-11-25 14:43:18,684 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1374 to 1363.
[2020-11-25 14:43:18,684 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1363 states.
[2020-11-25 14:43:18,686 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1363 states to 1363 states and 1491 transitions.
[2020-11-25 14:43:18,686 INFO  L751         BuchiCegarLoop]: Abstraction has 1363 states and 1491 transitions.
[2020-11-25 14:43:18,686 INFO  L631         BuchiCegarLoop]: Abstraction has 1363 states and 1491 transitions.
[2020-11-25 14:43:18,686 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:43:18,686 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1363 states and 1491 transitions.
[2020-11-25 14:43:18,687 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:18,687 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:18,687 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:18,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:18,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:18,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:18,691 INFO  L82        PathProgramCache]: Analyzing trace with hash 682343848, now seen corresponding path program 1 times
[2020-11-25 14:43:18,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:18,702 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:18,756 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 14:43:18,756 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:43:18,756 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 14:43:18,757 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:18,757 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 14:43:18,757 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 14:43:18,757 INFO  L87              Difference]: Start difference. First operand 1363 states and 1491 transitions. cyclomatic complexity: 134 Second operand 9 states.
[2020-11-25 14:43:19,103 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:19,103 INFO  L93              Difference]: Finished difference Result 1393 states and 1543 transitions.
[2020-11-25 14:43:19,103 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 14:43:19,104 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1393 states and 1543 transitions.
[2020-11-25 14:43:19,106 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:19,110 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1393 states to 1357 states and 1505 transitions.
[2020-11-25 14:43:19,110 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 14:43:19,110 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 14:43:19,110 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1357 states and 1505 transitions.
[2020-11-25 14:43:19,111 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:19,111 INFO  L728         BuchiCegarLoop]: Abstraction has 1357 states and 1505 transitions.
[2020-11-25 14:43:19,112 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1357 states and 1505 transitions.
[2020-11-25 14:43:19,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1357 to 1295.
[2020-11-25 14:43:19,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1295 states.
[2020-11-25 14:43:19,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1295 states to 1295 states and 1404 transitions.
[2020-11-25 14:43:19,119 INFO  L751         BuchiCegarLoop]: Abstraction has 1295 states and 1404 transitions.
[2020-11-25 14:43:19,120 INFO  L631         BuchiCegarLoop]: Abstraction has 1295 states and 1404 transitions.
[2020-11-25 14:43:19,120 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:43:19,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1295 states and 1404 transitions.
[2020-11-25 14:43:19,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:19,121 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:19,121 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:19,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:19,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == Ducks
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1573]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == Ducks
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1584]              balances_Ducks[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:19,125 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:19,125 INFO  L82        PathProgramCache]: Analyzing trace with hash -611125894, now seen corresponding path program 1 times
[2020-11-25 14:43:19,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:19,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:19,698 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 14:43:19,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:43:19,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-11-25 14:43:19,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:19,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 14:43:19,699 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=451, Unknown=0, NotChecked=0, Total=506
[2020-11-25 14:43:19,700 INFO  L87              Difference]: Start difference. First operand 1295 states and 1404 transitions. cyclomatic complexity: 113 Second operand 23 states.
[2020-11-25 14:43:22,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:22,369 INFO  L93              Difference]: Finished difference Result 1356 states and 1477 transitions.
[2020-11-25 14:43:22,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 14:43:22,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1356 states and 1477 transitions.
[2020-11-25 14:43:22,372 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:22,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1356 states to 1356 states and 1477 transitions.
[2020-11-25 14:43:22,374 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 437
[2020-11-25 14:43:22,375 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 437
[2020-11-25 14:43:22,375 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1356 states and 1477 transitions.
[2020-11-25 14:43:22,376 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:22,376 INFO  L728         BuchiCegarLoop]: Abstraction has 1356 states and 1477 transitions.
[2020-11-25 14:43:22,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1356 states and 1477 transitions.
[2020-11-25 14:43:22,382 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1356 to 1299.
[2020-11-25 14:43:22,382 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1299 states.
[2020-11-25 14:43:22,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1299 states to 1299 states and 1414 transitions.
[2020-11-25 14:43:22,384 INFO  L751         BuchiCegarLoop]: Abstraction has 1299 states and 1414 transitions.
[2020-11-25 14:43:22,384 INFO  L631         BuchiCegarLoop]: Abstraction has 1299 states and 1414 transitions.
[2020-11-25 14:43:22,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:43:22,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1299 states and 1414 transitions.
[2020-11-25 14:43:22,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:43:22,385 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:22,385 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:22,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:22,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:22,389 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:22,389 INFO  L82        PathProgramCache]: Analyzing trace with hash -2113211037, now seen corresponding path program 1 times
[2020-11-25 14:43:22,389 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:22,469 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:23,382 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 74
[2020-11-25 14:43:24,346 WARN  L188               SmtUtils]: Spent 372.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 97
[2020-11-25 14:43:24,769 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 204 DAG size of output: 81
[2020-11-25 14:43:25,074 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 204 DAG size of output: 80
[2020-11-25 14:43:26,054 WARN  L188               SmtUtils]: Spent 847.00 ms on a formula simplification. DAG size of input: 408 DAG size of output: 120
[2020-11-25 14:43:27,169 WARN  L188               SmtUtils]: Spent 506.00 ms on a formula simplification. DAG size of input: 422 DAG size of output: 95
[2020-11-25 14:43:28,618 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 198 DAG size of output: 74
[2020-11-25 14:43:29,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 1 proven. 21 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 14:43:29,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:43:29,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-25 14:43:29,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:43:29,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-25 14:43:29,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=2514, Unknown=0, NotChecked=0, Total=2652
[2020-11-25 14:43:29,977 INFO  L87              Difference]: Start difference. First operand 1299 states and 1414 transitions. cyclomatic complexity: 120 Second operand 52 states.
[2020-11-25 14:43:35,284 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 84
[2020-11-25 14:43:35,596 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 96 DAG size of output: 84
[2020-11-25 14:43:36,019 WARN  L188               SmtUtils]: Spent 305.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 121
[2020-11-25 14:43:36,286 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 90
[2020-11-25 14:43:37,111 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 95
[2020-11-25 14:43:42,771 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:43:42,771 INFO  L93              Difference]: Finished difference Result 1481 states and 1662 transitions.
[2020-11-25 14:43:42,771 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 14:43:42,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1481 states and 1662 transitions.
[2020-11-25 14:43:42,774 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:42,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1481 states to 1481 states and 1662 transitions.
[2020-11-25 14:43:42,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 515
[2020-11-25 14:43:42,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 515
[2020-11-25 14:43:42,778 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1481 states and 1662 transitions.
[2020-11-25 14:43:42,779 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:43:42,779 INFO  L728         BuchiCegarLoop]: Abstraction has 1481 states and 1662 transitions.
[2020-11-25 14:43:42,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1481 states and 1662 transitions.
[2020-11-25 14:43:42,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1481 to 1456.
[2020-11-25 14:43:42,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1456 states.
[2020-11-25 14:43:42,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1456 states to 1456 states and 1630 transitions.
[2020-11-25 14:43:42,788 INFO  L751         BuchiCegarLoop]: Abstraction has 1456 states and 1630 transitions.
[2020-11-25 14:43:42,788 INFO  L631         BuchiCegarLoop]: Abstraction has 1456 states and 1630 transitions.
[2020-11-25 14:43:42,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:43:42,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1456 states and 1630 transitions.
[2020-11-25 14:43:42,789 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:43:42,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:43:42,789 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:43:42,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:43:42,790 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]);
[L3]                 success_transferFrom_Ducks0 := true;
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:43:42,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:43:42,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -495700258, now seen corresponding path program 1 times
[2020-11-25 14:43:42,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:43:42,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:43:44,549 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 63
[2020-11-25 14:43:44,685 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:44,741 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 74
[2020-11-25 14:43:45,327 WARN  L188               SmtUtils]: Spent 435.00 ms on a formula simplification. DAG size of input: 198 DAG size of output: 116
[2020-11-25 14:43:46,103 WARN  L188               SmtUtils]: Spent 645.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 115
[2020-11-25 14:43:46,571 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:46,571 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:46,592 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:46,595 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 14:43:47,406 WARN  L188               SmtUtils]: Spent 995.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 130
[2020-11-25 14:43:48,672 WARN  L188               SmtUtils]: Spent 870.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 115
[2020-11-25 14:43:49,492 WARN  L188               SmtUtils]: Spent 619.00 ms on a formula simplification. DAG size of input: 395 DAG size of output: 98
[2020-11-25 14:43:50,195 WARN  L188               SmtUtils]: Spent 489.00 ms on a formula simplification. DAG size of input: 400 DAG size of output: 69
[2020-11-25 14:43:50,696 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 41
[2020-11-25 14:43:50,996 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 35
[2020-11-25 14:43:52,020 WARN  L188               SmtUtils]: Spent 372.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 83
[2020-11-25 14:43:52,794 WARN  L188               SmtUtils]: Spent 490.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 94
[2020-11-25 14:43:53,304 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 90
[2020-11-25 14:43:54,247 WARN  L188               SmtUtils]: Spent 403.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 93
[2020-11-25 14:43:54,875 WARN  L188               SmtUtils]: Spent 347.00 ms on a formula simplification. DAG size of input: 241 DAG size of output: 103
[2020-11-25 14:43:56,841 WARN  L188               SmtUtils]: Spent 1.47 s on a formula simplification. DAG size of input: 338 DAG size of output: 173
[2020-11-25 14:43:58,768 WARN  L188               SmtUtils]: Spent 1.36 s on a formula simplification. DAG size of input: 339 DAG size of output: 181
[2020-11-25 14:43:59,789 WARN  L188               SmtUtils]: Spent 675.00 ms on a formula simplification. DAG size of input: 281 DAG size of output: 144
[2020-11-25 14:44:00,591 WARN  L188               SmtUtils]: Spent 477.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 113
[2020-11-25 14:44:01,472 WARN  L188               SmtUtils]: Spent 577.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 114
[2020-11-25 14:44:03,438 WARN  L188               SmtUtils]: Spent 1.42 s on a formula simplification. DAG size of input: 496 DAG size of output: 181
[2020-11-25 14:44:05,573 WARN  L188               SmtUtils]: Spent 1.02 s on a formula simplification. DAG size of input: 486 DAG size of output: 145
[2020-11-25 14:44:07,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 2 proven. 7 refuted. 0 times theorem prover too weak. 62 trivial. 0 not checked.
[2020-11-25 14:44:07,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:44:07,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-25 14:44:07,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:44:07,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-25 14:44:07,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=2509, Unknown=0, NotChecked=0, Total=2652
[2020-11-25 14:44:07,068 INFO  L87              Difference]: Start difference. First operand 1456 states and 1630 transitions. cyclomatic complexity: 182 Second operand 52 states.
[2020-11-25 14:44:17,573 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 107
[2020-11-25 14:44:18,082 WARN  L188               SmtUtils]: Spent 202.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 107
[2020-11-25 14:44:18,850 WARN  L188               SmtUtils]: Spent 397.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 123
[2020-11-25 14:44:22,671 WARN  L188               SmtUtils]: Spent 196.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 110
[2020-11-25 14:44:23,150 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 116
[2020-11-25 14:44:28,372 WARN  L188               SmtUtils]: Spent 3.93 s on a formula simplification. DAG size of input: 304 DAG size of output: 194
[2020-11-25 14:44:33,482 WARN  L188               SmtUtils]: Spent 4.45 s on a formula simplification. DAG size of input: 293 DAG size of output: 193
[2020-11-25 14:44:36,001 WARN  L188               SmtUtils]: Spent 2.07 s on a formula simplification. DAG size of input: 211 DAG size of output: 190
[2020-11-25 14:44:36,943 WARN  L188               SmtUtils]: Spent 585.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 157
[2020-11-25 14:44:37,689 WARN  L188               SmtUtils]: Spent 611.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 158
[2020-11-25 14:44:38,699 WARN  L188               SmtUtils]: Spent 773.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 182
[2020-11-25 14:44:40,019 WARN  L188               SmtUtils]: Spent 1.14 s on a formula simplification. DAG size of input: 197 DAG size of output: 195
[2020-11-25 14:44:55,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:44:55,971 INFO  L93              Difference]: Finished difference Result 1635 states and 1875 transitions.
[2020-11-25 14:44:55,972 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 14:44:55,972 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1635 states and 1875 transitions.
[2020-11-25 14:44:55,977 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:44:55,982 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1635 states to 1635 states and 1875 transitions.
[2020-11-25 14:44:55,982 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 599
[2020-11-25 14:44:55,983 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 599
[2020-11-25 14:44:55,983 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1635 states and 1875 transitions.
[2020-11-25 14:44:55,985 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:44:55,985 INFO  L728         BuchiCegarLoop]: Abstraction has 1635 states and 1875 transitions.
[2020-11-25 14:44:55,987 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1635 states and 1875 transitions.
[2020-11-25 14:44:55,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1635 to 1458.
[2020-11-25 14:44:56,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1458 states.
[2020-11-25 14:44:56,002 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1458 states to 1458 states and 1637 transitions.
[2020-11-25 14:44:56,002 INFO  L751         BuchiCegarLoop]: Abstraction has 1458 states and 1637 transitions.
[2020-11-25 14:44:56,002 INFO  L631         BuchiCegarLoop]: Abstraction has 1458 states and 1637 transitions.
[2020-11-25 14:44:56,002 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:44:56,002 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1458 states and 1637 transitions.
[2020-11-25 14:44:56,005 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:44:56,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:44:56,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:44:56,006 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:44:56,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && balances_Ducks[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_Ducks[this][from_s393] == old(balances_Ducks[this][from_s393]) - tokens_s393) && balances_Ducks[this][to_s393] == old(balances_Ducks[this][to_s393]) + tokens_s393) && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this][p1] == old(balances_Ducks[this][p1])) && allowed_Ducks[this][p2][p3] == old(allowed_Ducks[this][p2][p3])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:44:56,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:44:56,011 INFO  L82        PathProgramCache]: Analyzing trace with hash -996591762, now seen corresponding path program 2 times
[2020-11-25 14:44:56,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:44:56,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:44:56,465 INFO  L134       CoverageAnalysis]: Checked inductivity of 189 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 186 trivial. 0 not checked.
[2020-11-25 14:44:56,465 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:44:56,465 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-11-25 14:44:56,466 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:44:56,466 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 14:44:56,466 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=266, Unknown=0, NotChecked=0, Total=306
[2020-11-25 14:44:56,466 INFO  L87              Difference]: Start difference. First operand 1458 states and 1637 transitions. cyclomatic complexity: 188 Second operand 18 states.
[2020-11-25 14:44:57,737 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:44:57,737 INFO  L93              Difference]: Finished difference Result 757 states and 838 transitions.
[2020-11-25 14:44:57,737 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 14:44:57,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 757 states and 838 transitions.
[2020-11-25 14:44:57,739 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:44:57,739 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 757 states to 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:44:57,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:44:57,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:44:57,739 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 14:44:57,739 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:44:57,739 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:44:57,739 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:44:57,742 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:44:57 BasicIcfg
[2020-11-25 14:44:57,742 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:44:57,743 INFO  L168              Benchmark]: Toolchain (without parser) took 115979.28 ms. Allocated memory was 1.0 GB in the beginning and 5.2 GB in the end (delta: 4.2 GB). Free memory was 945.9 MB in the beginning and 1.4 GB in the end (delta: -418.7 MB). Peak memory consumption was 3.8 GB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,743 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,743 INFO  L168              Benchmark]: Boogie Preprocessor took 79.79 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,744 INFO  L168              Benchmark]: UtopiaSpecLang took 55.80 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,744 INFO  L168              Benchmark]: Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,744 INFO  L168              Benchmark]: RCFGBuilder took 594.52 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,745 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.12 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 840.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,745 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1149.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 840.3 MB in the beginning and 777.0 MB in the end (delta: 63.2 MB). Peak memory consumption was 138.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,745 INFO  L168              Benchmark]: BlockEncodingV2 took 130.50 ms. Allocated memory is still 1.1 GB. Free memory was 777.0 MB in the beginning and 728.1 MB in the end (delta: 49.0 MB). Peak memory consumption was 49.0 MB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,746 INFO  L168              Benchmark]: BuchiAutomizer took 113913.56 ms. Allocated memory was 1.1 GB in the beginning and 5.2 GB in the end (delta: 4.1 GB). Free memory was 728.1 MB in the beginning and 1.4 GB in the end (delta: -636.5 MB). Peak memory consumption was 3.5 GB. Max. memory is 15.3 GB.
[2020-11-25 14:44:57,748 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2494 locations, 4287 edges
  - StatisticsResult: Encoded RCFG
    2450 locations, 4169 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.79 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 55.80 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 594.52 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.12 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 840.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1149.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 840.3 MB in the beginning and 777.0 MB in the end (delta: 63.2 MB). Peak memory consumption was 138.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 130.50 ms. Allocated memory is still 1.1 GB. Free memory was 777.0 MB in the beginning and 728.1 MB in the end (delta: 49.0 MB). Peak memory consumption was 49.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 113913.56 ms. Allocated memory was 1.1 GB in the beginning and 5.2 GB in the end (delta: 4.1 GB). Free memory was 728.1 MB in the beginning and 1.4 GB in the end (delta: -636.5 MB). Peak memory consumption was 3.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1052 locations, 1325 edges
  - StatisticsResult: BuchiProgram size
    2494 locations, 4287 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic). 13 modules have a trivial ranking function, the largest among these consists of 52 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 113.8s and 14 iterations.  TraceHistogramMax:3. Analysis of lassos took 35.8s. Construction of modules took 50.4s. BÃ¼chi inclusion checks took 26.9s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 12 MinimizatonAttempts, 1909 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1912 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20388 SDtfs, 23350 SDslu, 98176 SDs, 0 SdLazy, 145355 SolverSat, 3811 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 50.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Ducks0) ==> ( <>(success_transferFrom_Ducks0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
