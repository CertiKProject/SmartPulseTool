This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:32:59,145 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:32:59,147 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:32:59,157 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:32:59,158 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:32:59,158 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:32:59,159 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:32:59,161 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:32:59,162 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:32:59,163 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:32:59,164 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:32:59,164 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:32:59,165 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:32:59,165 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:32:59,166 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:32:59,167 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:32:59,168 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:32:59,169 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:32:59,170 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:32:59,171 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:32:59,173 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:32:59,174 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:32:59,175 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:32:59,175 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:32:59,176 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:32:59,176 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:32:59,176 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:32:59,177 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:32:59,177 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:32:59,177 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:32:59,178 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:32:59,178 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:32:59,179 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:32:59,179 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:32:59,180 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:32:59,180 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:32:59,181 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:32:59,181 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:32:59,181 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:32:59,182 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:32:59,182 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:32:59,183 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:32:59,191 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:32:59,191 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:32:59,192 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:32:59,192 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:32:59,192 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:32:59,192 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:32:59,193 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:32:59,193 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:32:59,193 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:32:59,194 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:32:59,195 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:32:59,195 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:32:59,195 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:32:59,195 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:32:59,222 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:32:59,236 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:32:59,239 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:32:59,240 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:32:59,241 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:32:59,242 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl
[2020-11-25 09:32:59,242 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl'
[2020-11-25 09:32:59,327 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:32:59,328 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:32:59,329 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:32:59,329 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:32:59,329 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:32:59,346 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,348 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,382 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,383 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,408 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,420 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,428 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,438 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:32:59,438 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:32:59,438 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:32:59,441 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:32:59,445 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/1) ...
[2020-11-25 09:32:59,465 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 09:32:59,471 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 09:32:59,479 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 09:32:59,487 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s211!=recipient_s211 && ( ( amount_s211>_balances_ERC20[this][sender_s211] || amount_s211>_allowances_ERC20[this][sender_s211][msg.sender] ) || ( _balances_ERC20[this][recipient_s211] + amount_s211 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s211>=0 ) && amount_s211<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s211]>=0 ) && _balances_ERC20[this][recipient_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s211]>=0 ) && _balances_ERC20[this][sender_s211]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s211][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s211][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s211,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:32:59,496 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 09:32:59,496 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:32:59,509 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:32:59 PropertyContainer
[2020-11-25 09:32:59,509 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:32:59,510 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:32:59,510 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:32:59,510 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:32:59,511 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/2) ...
[2020-11-25 09:32:59,511 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:32:59,511 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:32:59,528 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:32:59" (2/2) ...
[2020-11-25 09:32:59,528 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:32:59,528 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:32:59,528 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:32:59,528 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:32:59,529 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/2) ...
[2020-11-25 09:32:59,583 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:32:59,583 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 09:32:59,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:32:59,584 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 09:32:59,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 09:32:59,585 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 09:32:59,585 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:32:59,585 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:32:59,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:32:59,586 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 09:32:59,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 09:32:59,586 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:32:59,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 09:32:59,586 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:32:59,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:32:59,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 09:32:59,587 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:32:59,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:32:59,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 09:32:59,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 09:32:59,588 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 09:32:59,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 09:32:59,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:32:59,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:32:59,589 INFO  L130     BoogieDeclarations]: Found specification of procedure YFI_YFI_NoBaseCtor__success
[2020-11-25 09:32:59,590 INFO  L130     BoogieDeclarations]: Found specification of procedure YFI_YFI
[2020-11-25 09:32:59,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFI_YFI
[2020-11-25 09:32:59,590 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFI
[2020-11-25 09:32:59,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFI
[2020-11-25 09:32:59,590 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFI
[2020-11-25 09:32:59,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFI
[2020-11-25 09:32:59,590 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFI
[2020-11-25 09:32:59,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFI
[2020-11-25 09:32:59,590 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFI
[2020-11-25 09:32:59,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFI
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFI
[2020-11-25 09:32:59,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFI
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFI
[2020-11-25 09:32:59,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFI
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 09:32:59,591 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YFI
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:32:59,592 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:32:59,593 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:32:59,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:32:59,595 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:32:59,596 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure YFI_YFI_NoBaseCtor__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure YFI_YFI__success
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure YFI_YFI__fail
[2020-11-25 09:32:59,597 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFI__success
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFI__fail
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFI__success
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFI__fail
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFI__success
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFI__fail
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFI__success
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFI__fail
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFI__success
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFI__fail
[2020-11-25 09:32:59,598 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFI__success
[2020-11-25 09:32:59,599 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFI__fail
[2020-11-25 09:32:59,599 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:32:59,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:32:59,599 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:32:59,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:32:59,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:32:59,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:32:59,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:32:59,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:32:59,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:32:59,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:32:59,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:32:59,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:32:59,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFI_YFI_NoBaseCtor__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFI_YFI_NoBaseCtor__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFI_YFI__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFI_YFI__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFI__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFI__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFI__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFI__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFI__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFI__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFI__fail
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFI__success
[2020-11-25 09:32:59,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFI__fail
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFI__success
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFI__fail
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFI__success
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:32:59,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YFI
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:32:59,607 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:32:59,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:32:59,944 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:32:59,945 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:33:00,298 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:33:00,298 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:33:00,300 INFO  L202        PluginConnector]: Adding new model YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:33:00 BoogieIcfgContainer
[2020-11-25 09:33:00,300 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:32:59" (2/2) ...
[2020-11-25 09:33:00,300 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:33:00,300 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5e76ce1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:33:00, skipping insertion in model container
[2020-11-25 09:33:00,301 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:33:00,301 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:33:00,301 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:33:00,303 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:33:00,303 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/3) ...
[2020-11-25 09:33:00,303 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@368861f2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:33:00, skipping insertion in model container
[2020-11-25 09:33:00,303 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:32:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:33:00,338 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:33:00 NWAContainer
[2020-11-25 09:33:00,339 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:33:00,339 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:33:00,339 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:33:00,340 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:33:00,341 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:33:00" (3/4) ...
[2020-11-25 09:33:00,341 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2dd609c2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:33:00, skipping insertion in model container
[2020-11-25 09:33:00,341 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:33:00" (4/4) ...
[2020-11-25 09:33:00,344 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:33:00,348 INFO  L110   BuchiProductObserver]: Initial RCFG 1784 locations, 2441 edges
[2020-11-25 09:33:00,348 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:33:00,359 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:33:01,643 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:33:01,649 INFO  L110   BuchiProductObserver]: BuchiProgram size 4430 locations, 7941 edges
[2020-11-25 09:33:01,650 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:33:01 BoogieIcfgContainer
[2020-11-25 09:33:01,650 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:33:01,650 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:33:01,650 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:33:01,651 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:33:01,652 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:33:01" (1/1) ...
[2020-11-25 09:33:01,741 INFO  L313           BlockEncoder]: Initial Icfg 4430 locations, 7941 edges
[2020-11-25 09:33:01,741 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:33:01,742 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:33:01,742 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:33:01,742 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:33:01,755 INFO  L70    emoveInfeasibleEdges]: Removed 144 edges and 15 locations because of local infeasibility
[2020-11-25 09:33:01,766 INFO  L70        RemoveSinkStates]: Removed 138 edges and 84 locations by removing sink states
[2020-11-25 09:33:01,778 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:33:01,783 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:33:01,787 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:33:01,788 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:33:01,794 INFO  L313           BlockEncoder]: Encoded RCFG 4311 locations, 7630 edges
[2020-11-25 09:33:01,794 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:33:01 BasicIcfg
[2020-11-25 09:33:01,794 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:33:01,794 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:33:01,795 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:33:01,796 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:33:01,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,797 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:32:59" (1/6) ...
[2020-11-25 09:33:01,798 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:33:01, skipping insertion in model container
[2020-11-25 09:33:01,798 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,798 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:32:59" (2/6) ...
[2020-11-25 09:33:01,799 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:33:01, skipping insertion in model container
[2020-11-25 09:33:01,799 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,799 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:33:00" (3/6) ...
[2020-11-25 09:33:01,799 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:33:01, skipping insertion in model container
[2020-11-25 09:33:01,799 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,799 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:33:00" (4/6) ...
[2020-11-25 09:33:01,799 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:33:01, skipping insertion in model container
[2020-11-25 09:33:01,799 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,799 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:33:01" (5/6) ...
[2020-11-25 09:33:01,799 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:33:01, skipping insertion in model container
[2020-11-25 09:33:01,799 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:33:01,799 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:33:01" (6/6) ...
[2020-11-25 09:33:01,800 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YFI_0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e_transferfrom-fail.bpl_BEv2
[2020-11-25 09:33:01,835 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:33:01,836 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:33:01,836 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:33:01,836 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:33:01,836 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:33:01,836 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:33:01,836 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:33:01,836 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:33:01,836 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:33:01,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4311 states.
[2020-11-25 09:33:01,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:01,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:01,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:01,940 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:01,940 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:01,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:33:01,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4311 states.
[2020-11-25 09:33:01,963 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:01,963 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:01,963 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:01,965 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:01,965 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND TRUE   revert
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND TRUE   choice == 17
[L4740]              gas := gas - 21000;
[L4741]  COND FALSE  !(gas >= 0)
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:01,979 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:01,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 905299307, now seen corresponding path program 1 times
[2020-11-25 09:33:01,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:02,007 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:02,045 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:33:02,047 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:02,047 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:33:02,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:02,288 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:33:02,288 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:33:02,290 INFO  L87              Difference]: Start difference. First operand 4311 states. Second operand 4 states.
[2020-11-25 09:33:02,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:02,670 INFO  L93              Difference]: Finished difference Result 2832 states and 3311 transitions.
[2020-11-25 09:33:02,670 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:33:02,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2832 states and 3311 transitions.
[2020-11-25 09:33:02,685 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:02,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2832 states to 2832 states and 3311 transitions.
[2020-11-25 09:33:02,705 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 09:33:02,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 759
[2020-11-25 09:33:02,708 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2832 states and 3311 transitions.
[2020-11-25 09:33:02,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:02,715 INFO  L728         BuchiCegarLoop]: Abstraction has 2832 states and 3311 transitions.
[2020-11-25 09:33:02,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2832 states and 3311 transitions.
[2020-11-25 09:33:02,780 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2832 to 2832.
[2020-11-25 09:33:02,781 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2832 states.
[2020-11-25 09:33:02,785 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2832 states to 2832 states and 3311 transitions.
[2020-11-25 09:33:02,786 INFO  L751         BuchiCegarLoop]: Abstraction has 2832 states and 3311 transitions.
[2020-11-25 09:33:02,786 INFO  L631         BuchiCegarLoop]: Abstraction has 2832 states and 3311 transitions.
[2020-11-25 09:33:02,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:33:02,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2832 states and 3311 transitions.
[2020-11-25 09:33:02,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:02,793 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:02,793 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:02,795 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:02,795 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND TRUE   revert
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND TRUE   !(sender_s323 != null)
[L2737]              revert := true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND TRUE   revert
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND TRUE   !(sender_s323 != null)
[L2737]              revert := true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND TRUE   revert
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:02,799 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:02,799 INFO  L82        PathProgramCache]: Analyzing trace with hash -303569919, now seen corresponding path program 1 times
[2020-11-25 09:33:02,800 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:02,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:02,829 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:33:02,830 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:02,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:33:02,831 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:02,831 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:33:02,831 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:33:02,831 INFO  L87              Difference]: Start difference. First operand 2832 states and 3311 transitions. cyclomatic complexity: 481 Second operand 4 states.
[2020-11-25 09:33:03,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:03,419 INFO  L93              Difference]: Finished difference Result 3629 states and 4116 transitions.
[2020-11-25 09:33:03,419 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:33:03,419 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3629 states and 4116 transitions.
[2020-11-25 09:33:03,432 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:33:03,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3629 states to 3435 states and 3888 transitions.
[2020-11-25 09:33:03,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 932
[2020-11-25 09:33:03,448 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 942
[2020-11-25 09:33:03,448 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3435 states and 3888 transitions.
[2020-11-25 09:33:03,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:03,455 INFO  L728         BuchiCegarLoop]: Abstraction has 3435 states and 3888 transitions.
[2020-11-25 09:33:03,458 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3435 states and 3888 transitions.
[2020-11-25 09:33:03,484 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3435 to 3078.
[2020-11-25 09:33:03,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3078 states.
[2020-11-25 09:33:03,488 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3078 states to 3078 states and 3442 transitions.
[2020-11-25 09:33:03,488 INFO  L751         BuchiCegarLoop]: Abstraction has 3078 states and 3442 transitions.
[2020-11-25 09:33:03,488 INFO  L631         BuchiCegarLoop]: Abstraction has 3078 states and 3442 transitions.
[2020-11-25 09:33:03,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:33:03,488 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3078 states and 3442 transitions.
[2020-11-25 09:33:03,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:33:03,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:03,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:03,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:03,498 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:03,503 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:03,503 INFO  L82        PathProgramCache]: Analyzing trace with hash 1077522864, now seen corresponding path program 1 times
[2020-11-25 09:33:03,504 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:03,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:03,754 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 09:33:03,755 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:03,755 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 09:33:03,756 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:03,756 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 09:33:03,756 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=301, Unknown=0, NotChecked=0, Total=342
[2020-11-25 09:33:03,756 INFO  L87              Difference]: Start difference. First operand 3078 states and 3442 transitions. cyclomatic complexity: 366 Second operand 19 states.
[2020-11-25 09:33:06,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:06,148 INFO  L93              Difference]: Finished difference Result 3184 states and 3568 transitions.
[2020-11-25 09:33:06,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 09:33:06,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3184 states and 3568 transitions.
[2020-11-25 09:33:06,156 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:33:06,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3184 states to 3184 states and 3568 transitions.
[2020-11-25 09:33:06,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 908
[2020-11-25 09:33:06,167 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 908
[2020-11-25 09:33:06,167 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3184 states and 3568 transitions.
[2020-11-25 09:33:06,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:06,170 INFO  L728         BuchiCegarLoop]: Abstraction has 3184 states and 3568 transitions.
[2020-11-25 09:33:06,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3184 states and 3568 transitions.
[2020-11-25 09:33:06,197 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3184 to 2963.
[2020-11-25 09:33:06,197 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2963 states.
[2020-11-25 09:33:06,200 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2963 states to 2963 states and 3296 transitions.
[2020-11-25 09:33:06,200 INFO  L751         BuchiCegarLoop]: Abstraction has 2963 states and 3296 transitions.
[2020-11-25 09:33:06,200 INFO  L631         BuchiCegarLoop]: Abstraction has 2963 states and 3296 transitions.
[2020-11-25 09:33:06,201 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:33:06,201 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2963 states and 3296 transitions.
[2020-11-25 09:33:06,204 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:06,204 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:06,204 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:06,207 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:06,207 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND TRUE   __exception
[L1101]              __tmp__Balance := Balance;
[L1102]              __tmp__DType := DType;
[L1103]              __tmp__Alloc := Alloc;
[L1104]              __tmp__balance_ADDR := balance_ADDR;
[L1105]              __tmp__M_Ref_int := M_Ref_int;
[L1106]              __tmp__sum__balances0 := sum__balances0;
[L1107]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1108]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1109]              __tmp__sum__allowances1 := sum__allowances1;
[L1110]              __tmp__M_Ref_bool := M_Ref_bool;
[L1111]              __tmp__sum_minters2 := sum_minters2;
[L1112]              __tmp__Length := Length;
[L1113]              __tmp__now := now;
[L1114]              __tmp___balances_ERC20 := _balances_ERC20;
[L1115]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1116]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1117]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1118]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1119]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1120]              __tmp__governance_YFI := governance_YFI;
[L1121]              __tmp__minters_YFI := minters_YFI;
[L1122]  CALL        call YFI_YFI__fail(this, msgsender_MSG, msgvalue_MSG);
[L3147]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2107]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2092]              assume msgsender_MSG != null;
[L2093]              __tmp__Balance[this] := 0;
[L2107]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2108]  COND FALSE  !(revert)
[L3147]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3148]  COND FALSE  !(revert)
[L3151]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2075]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2060]              assume msgsender_MSG != null;
[L2061]              __tmp__Balance[this] := 0;
[L2075]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2076]  COND FALSE  !(revert)
[L3151]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3152]  COND FALSE  !(revert)
[L3155]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2161]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2107]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2092]              assume msgsender_MSG != null;
[L2093]              __tmp__Balance[this] := 0;
[L2107]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2108]  COND FALSE  !(revert)
[L2161]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2162]  COND FALSE  !(revert)
[L2165]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2075]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2060]              assume msgsender_MSG != null;
[L2061]              __tmp__Balance[this] := 0;
[L2075]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2076]  COND FALSE  !(revert)
[L2165]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2166]  COND FALSE  !(revert)
[L2169]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2136]              assume msgsender_MSG != null;
[L2137]              __tmp__Balance[this] := 0;
[L2138]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2139]              __tmp__sum__balances0[this] := 0;
[L2140]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2141]              __tmp__sum__allowances1[this] := 0;
[L2142]              __tmp___totalSupply_ERC20[this] := 0;
[L2169]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2170]  COND FALSE  !(revert)
[L3155]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3156]  COND FALSE  !(revert)
[L3159]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2929]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2075]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2060]              assume msgsender_MSG != null;
[L2061]              __tmp__Balance[this] := 0;
[L2075]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2076]  COND FALSE  !(revert)
[L2929]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]  COND FALSE  !(revert)
[L2933]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2902]              assume msgsender_MSG != null;
[L2903]              __tmp__Balance[this] := 0;
[L2904]              __tmp___name_ERC20Detailed[this] := -1481597706;
[L2905]              __tmp___symbol_ERC20Detailed[this] := -1481597706;
[L2906]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2908]              __tmp___name_ERC20Detailed[this] := name_s484;
[L2909]              __tmp___symbol_ERC20Detailed[this] := symbol_s484;
[L2910]              __tmp___decimals_ERC20Detailed[this] := decimals_s484;
[L2933]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2934]  COND FALSE  !(revert)
[L3159]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3160]  COND FALSE  !(revert)
[L3163]  CALL        call YFI_YFI_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3126]              assume msgsender_MSG != null;
[L3127]              __tmp__Balance[this] := 0;
[L3128]              __tmp__governance_YFI[this] := null;
[L3129]              __tmp__minters_YFI[this] := zeroRefboolArr();
[L3131]              __tmp__governance_YFI[this] := msgsender_MSG;
[L3163]  RET         call YFI_YFI_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3164]  COND FALSE  !(revert)
[L1122]  RET         call YFI_YFI__fail(this, msgsender_MSG, msgvalue_MSG);
[L1123]              assume revert || gas < 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:06,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:06,211 INFO  L82        PathProgramCache]: Analyzing trace with hash 627345364, now seen corresponding path program 1 times
[2020-11-25 09:33:06,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:06,219 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:06,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 09:33:06,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:06,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:33:06,258 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:06,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:33:06,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:33:06,259 INFO  L87              Difference]: Start difference. First operand 2963 states and 3296 transitions. cyclomatic complexity: 336 Second operand 4 states.
[2020-11-25 09:33:06,533 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:06,534 INFO  L93              Difference]: Finished difference Result 3662 states and 4179 transitions.
[2020-11-25 09:33:06,534 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:33:06,534 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3662 states and 4179 transitions.
[2020-11-25 09:33:06,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:33:06,551 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3662 states to 3541 states and 4055 transitions.
[2020-11-25 09:33:06,552 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1002
[2020-11-25 09:33:06,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1002
[2020-11-25 09:33:06,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3541 states and 4055 transitions.
[2020-11-25 09:33:06,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:06,556 INFO  L728         BuchiCegarLoop]: Abstraction has 3541 states and 4055 transitions.
[2020-11-25 09:33:06,558 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3541 states and 4055 transitions.
[2020-11-25 09:33:06,576 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3541 to 2842.
[2020-11-25 09:33:06,577 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2842 states.
[2020-11-25 09:33:06,579 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2842 states to 2842 states and 3171 transitions.
[2020-11-25 09:33:06,579 INFO  L751         BuchiCegarLoop]: Abstraction has 2842 states and 3171 transitions.
[2020-11-25 09:33:06,579 INFO  L631         BuchiCegarLoop]: Abstraction has 2842 states and 3171 transitions.
[2020-11-25 09:33:06,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:33:06,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2842 states and 3171 transitions.
[2020-11-25 09:33:06,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:06,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:06,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:06,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:06,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND TRUE   choice == 13
[L4765]              gas := gas - 21000;
[L4766]  COND TRUE   gas >= 0
[L4767]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4768]              assume msgvalue_MSG == 0;
[L4769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L537]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2329]  COND TRUE   DType[this] == YFI
[L2330]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2330]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2331]  COND FALSE  !(revert)
[L2342]  COND TRUE   DType[this] == YFI
[L2343]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2343]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2344]  COND FALSE  !(revert)
[L2355]              __ret_0_ := true;
[L537]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L538]               assume !revert && gas >= 0;
[L4769]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4865]  RET         call CorralChoice_YFI(this);
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:06,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:06,590 INFO  L82        PathProgramCache]: Analyzing trace with hash 1874871078, now seen corresponding path program 1 times
[2020-11-25 09:33:06,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:06,611 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:06,785 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 09:33:06,785 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:33:06,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 09:33:06,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:06,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 09:33:06,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 09:33:06,786 INFO  L87              Difference]: Start difference. First operand 2842 states and 3171 transitions. cyclomatic complexity: 332 Second operand 15 states.
[2020-11-25 09:33:08,254 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:08,254 INFO  L93              Difference]: Finished difference Result 2885 states and 3219 transitions.
[2020-11-25 09:33:08,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 09:33:08,254 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2885 states and 3219 transitions.
[2020-11-25 09:33:08,259 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:08,265 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2885 states to 2885 states and 3219 transitions.
[2020-11-25 09:33:08,265 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 810
[2020-11-25 09:33:08,266 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 810
[2020-11-25 09:33:08,266 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2885 states and 3219 transitions.
[2020-11-25 09:33:08,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:08,269 INFO  L728         BuchiCegarLoop]: Abstraction has 2885 states and 3219 transitions.
[2020-11-25 09:33:08,271 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2885 states and 3219 transitions.
[2020-11-25 09:33:08,283 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2885 to 2833.
[2020-11-25 09:33:08,284 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2833 states.
[2020-11-25 09:33:08,286 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2833 states to 2833 states and 3162 transitions.
[2020-11-25 09:33:08,286 INFO  L751         BuchiCegarLoop]: Abstraction has 2833 states and 3162 transitions.
[2020-11-25 09:33:08,286 INFO  L631         BuchiCegarLoop]: Abstraction has 2833 states and 3162 transitions.
[2020-11-25 09:33:08,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:33:08,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2833 states and 3162 transitions.
[2020-11-25 09:33:08,289 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:08,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:08,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:08,291 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:08,291 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND FALSE  !(choice == 12)
[L4778]  COND FALSE  !(choice == 11)
[L4785]  COND FALSE  !(choice == 10)
[L4792]  COND FALSE  !(choice == 9)
[L4798]  COND FALSE  !(choice == 8)
[L4804]  COND FALSE  !(choice == 7)
[L4810]  COND FALSE  !(choice == 6)
[L4816]  COND FALSE  !(choice == 5)
[L4822]  COND TRUE   choice == 4
[L4823]              gas := gas - 21000;
[L4824]  COND TRUE   gas >= 0
[L4825]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4826]              assume msgvalue_MSG == 0;
[L4827]  CALL        call mint~address~uint256_YFI(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFI__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3211]  COND FALSE  !(!minters_YFI[this][msgsender_MSG])
[L3215]  COND TRUE   DType[this] == YFI
[L3216]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2791]              __var_16 := null;
[L2792]  COND FALSE  !(!(account_s366 != null))
[L2796]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2796]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2797]  COND FALSE  !(revert)
[L2800]              _totalSupply_ERC20[this] := __var_17;
[L2801]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2801]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2802]  COND FALSE  !(revert)
[L2805]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2806]              _balances_ERC20[this][account_s366] := __var_18;
[L2807]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2808]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3216]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3217]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFI__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4827]  RET         call mint~address~uint256_YFI(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4865]  RET         call CorralChoice_YFI(this);
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND FALSE  !(DType[this] == YFI)
[L2460]  COND TRUE   DType[this] == ERC20
[L2461]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2461]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND FALSE  !(DType[this] == YFI)
[L2460]  COND TRUE   DType[this] == ERC20
[L2461]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2461]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:08,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:08,296 INFO  L82        PathProgramCache]: Analyzing trace with hash -188863358, now seen corresponding path program 1 times
[2020-11-25 09:33:08,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:08,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:08,369 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-11-25 09:33:08,369 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:08,369 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:33:08,370 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:08,370 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:33:08,370 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:33:08,370 INFO  L87              Difference]: Start difference. First operand 2833 states and 3162 transitions. cyclomatic complexity: 332 Second operand 3 states.
[2020-11-25 09:33:08,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:08,389 INFO  L93              Difference]: Finished difference Result 2851 states and 3184 transitions.
[2020-11-25 09:33:08,389 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:33:08,389 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2851 states and 3184 transitions.
[2020-11-25 09:33:08,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:08,399 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2851 states to 2851 states and 3184 transitions.
[2020-11-25 09:33:08,399 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-11-25 09:33:08,399 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-11-25 09:33:08,399 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2851 states and 3184 transitions.
[2020-11-25 09:33:08,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:08,402 INFO  L728         BuchiCegarLoop]: Abstraction has 2851 states and 3184 transitions.
[2020-11-25 09:33:08,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2851 states and 3184 transitions.
[2020-11-25 09:33:08,416 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2851 to 2845.
[2020-11-25 09:33:08,416 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2845 states.
[2020-11-25 09:33:08,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2845 states to 2845 states and 3176 transitions.
[2020-11-25 09:33:08,419 INFO  L751         BuchiCegarLoop]: Abstraction has 2845 states and 3176 transitions.
[2020-11-25 09:33:08,419 INFO  L631         BuchiCegarLoop]: Abstraction has 2845 states and 3176 transitions.
[2020-11-25 09:33:08,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:33:08,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2845 states and 3176 transitions.
[2020-11-25 09:33:08,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:33:08,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:08,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:08,423 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:08,423 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND FALSE  !(choice == 12)
[L4778]  COND FALSE  !(choice == 11)
[L4785]  COND FALSE  !(choice == 10)
[L4792]  COND FALSE  !(choice == 9)
[L4798]  COND FALSE  !(choice == 8)
[L4804]  COND FALSE  !(choice == 7)
[L4810]  COND FALSE  !(choice == 6)
[L4816]  COND FALSE  !(choice == 5)
[L4822]  COND TRUE   choice == 4
[L4823]              gas := gas - 21000;
[L4824]  COND TRUE   gas >= 0
[L4825]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4826]              assume msgvalue_MSG == 0;
[L4827]  CALL        call mint~address~uint256_YFI(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFI__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3211]  COND FALSE  !(!minters_YFI[this][msgsender_MSG])
[L3215]  COND TRUE   DType[this] == YFI
[L3216]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2791]              __var_16 := null;
[L2792]  COND FALSE  !(!(account_s366 != null))
[L2796]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2796]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2797]  COND FALSE  !(revert)
[L2800]              _totalSupply_ERC20[this] := __var_17;
[L2801]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2801]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2802]  COND FALSE  !(revert)
[L2805]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2806]              _balances_ERC20[this][account_s366] := __var_18;
[L2807]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2808]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3216]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3217]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFI__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4827]  RET         call mint~address~uint256_YFI(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4865]  RET         call CorralChoice_YFI(this);
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:08,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:08,427 INFO  L82        PathProgramCache]: Analyzing trace with hash -879479803, now seen corresponding path program 1 times
[2020-11-25 09:33:08,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:08,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:08,529 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 1 proven. 60 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 09:33:08,529 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:33:08,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 09:33:08,530 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:08,530 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:33:08,530 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:33:08,530 INFO  L87              Difference]: Start difference. First operand 2845 states and 3176 transitions. cyclomatic complexity: 334 Second operand 10 states.
[2020-11-25 09:33:09,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:09,298 INFO  L93              Difference]: Finished difference Result 2874 states and 3218 transitions.
[2020-11-25 09:33:09,298 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:33:09,298 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2874 states and 3218 transitions.
[2020-11-25 09:33:09,303 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:33:09,309 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2874 states to 2874 states and 3218 transitions.
[2020-11-25 09:33:09,309 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 820
[2020-11-25 09:33:09,309 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 820
[2020-11-25 09:33:09,309 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2874 states and 3218 transitions.
[2020-11-25 09:33:09,311 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:09,311 INFO  L728         BuchiCegarLoop]: Abstraction has 2874 states and 3218 transitions.
[2020-11-25 09:33:09,316 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2874 states and 3218 transitions.
[2020-11-25 09:33:09,338 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2874 to 2874.
[2020-11-25 09:33:09,338 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2874 states.
[2020-11-25 09:33:09,342 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2874 states to 2874 states and 3218 transitions.
[2020-11-25 09:33:09,342 INFO  L751         BuchiCegarLoop]: Abstraction has 2874 states and 3218 transitions.
[2020-11-25 09:33:09,342 INFO  L631         BuchiCegarLoop]: Abstraction has 2874 states and 3218 transitions.
[2020-11-25 09:33:09,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:33:09,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2874 states and 3218 transitions.
[2020-11-25 09:33:09,346 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:33:09,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:09,347 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:09,348 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:09,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND TRUE   choice == 15
[L4752]              gas := gas - 21000;
[L4753]  COND TRUE   gas >= 0
[L4754]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4755]              assume msgvalue_MSG == 0;
[L4756]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFI
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFI
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4756]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4865]  RET         call CorralChoice_YFI(this);
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:09,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:09,354 INFO  L82        PathProgramCache]: Analyzing trace with hash -618021834, now seen corresponding path program 1 times
[2020-11-25 09:33:09,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:09,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:09,534 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 09:33:09,535 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:09,535 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:33:09,535 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:09,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:33:09,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=237, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:33:09,536 INFO  L87              Difference]: Start difference. First operand 2874 states and 3218 transitions. cyclomatic complexity: 350 Second operand 17 states.
[2020-11-25 09:33:10,942 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:10,942 INFO  L93              Difference]: Finished difference Result 2937 states and 3311 transitions.
[2020-11-25 09:33:10,942 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:33:10,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2937 states and 3311 transitions.
[2020-11-25 09:33:10,947 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:33:10,953 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2937 states to 2937 states and 3311 transitions.
[2020-11-25 09:33:10,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 831
[2020-11-25 09:33:10,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 831
[2020-11-25 09:33:10,954 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2937 states and 3311 transitions.
[2020-11-25 09:33:10,957 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:10,957 INFO  L728         BuchiCegarLoop]: Abstraction has 2937 states and 3311 transitions.
[2020-11-25 09:33:10,959 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2937 states and 3311 transitions.
[2020-11-25 09:33:10,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2937 to 2895.
[2020-11-25 09:33:10,975 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2895 states.
[2020-11-25 09:33:10,978 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2895 states to 2895 states and 3267 transitions.
[2020-11-25 09:33:10,978 INFO  L751         BuchiCegarLoop]: Abstraction has 2895 states and 3267 transitions.
[2020-11-25 09:33:10,978 INFO  L631         BuchiCegarLoop]: Abstraction has 2895 states and 3267 transitions.
[2020-11-25 09:33:10,978 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:33:10,978 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2895 states and 3267 transitions.
[2020-11-25 09:33:10,981 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:33:10,981 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:33:10,981 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:33:10,982 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:33:10,982 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4855]              assume null == 0;
[L4856]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4856]  RET         call this := FreshRefGenerator__success();
[L4857]              assume now >= 0;
[L4858]              assume DType[this] == YFI;
[L4859]              assume msgvalue_MSG == 0;
[L4860]              gas := gas - 53000;
[L4861]  CALL        call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L3171]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3171]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3172]  COND FALSE  !(revert)
[L3175]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3175]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3176]  COND FALSE  !(revert)
[L3179]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3179]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1481597706;
[L2919]              _symbol_ERC20Detailed[this] := -1481597706;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3183]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 762212438, -1133113545, 18);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]              assume msgsender_MSG != null;
[L3138]              Balance[this] := 0;
[L3139]              governance_YFI[this] := null;
[L3140]              minters_YFI[this] := zeroRefboolArr();
[L3142]              governance_YFI[this] := msgsender_MSG;
[L3187]  RET         call YFI_YFI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L1125]  RET         call YFI_YFI__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4861]  RET         call YFI_YFI(this, msgsender_MSG, msgvalue_MSG);
[L4862]              assume !revert && gas >= 0;
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND FALSE  !(choice == 17)
[L4745]  COND FALSE  !(choice == 16)
[L4751]  COND FALSE  !(choice == 15)
[L4758]  COND FALSE  !(choice == 14)
[L4764]  COND FALSE  !(choice == 13)
[L4771]  COND TRUE   choice == 12
[L4772]              gas := gas - 21000;
[L4773]  COND TRUE   gas >= 0
[L4774]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4775]              assume msgvalue_MSG == 0;
[L4776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s211 != recipient_s211 && ((amount_s211 > _balances_ERC20[this][sender_s211] || amount_s211 > _allowances_ERC20[this][sender_s211][msgsender_MSG]) || _balances_ERC20[this][recipient_s211] + amount_s211 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s211 >= 0) && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s211] >= 0) && _balances_ERC20[this][recipient_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s211] >= 0) && _balances_ERC20[this][sender_s211] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s211][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s211][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFI
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -1810562161);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFI
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFI
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 1916719363);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFI
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4865]  RET         call CorralChoice_YFI(this);

Loop:
[L4865]  CALL        call CorralChoice_YFI(this);
[L4686]              havoc msgsender_MSG;
[L4687]              havoc msgvalue_MSG;
[L4688]              havoc choice;
[L4689]              havoc __ret_0_totalSupply;
[L4690]              havoc account_s121;
[L4691]              havoc __ret_0_balanceOf;
[L4692]              havoc recipient_s140;
[L4693]              havoc amount_s140;
[L4694]              havoc __ret_0_transfer;
[L4695]              havoc owner_s156;
[L4696]              havoc spender_s156;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc spender_s175;
[L4699]              havoc amount_s175;
[L4700]              havoc __ret_0_approve;
[L4701]              havoc sender_s211;
[L4702]              havoc recipient_s211;
[L4703]              havoc amount_s211;
[L4704]              havoc __ret_0_transferFrom;
[L4705]              havoc spender_s238;
[L4706]              havoc addedValue_s238;
[L4707]              havoc __ret_0_increaseAllowance;
[L4708]              havoc spender_s266;
[L4709]              havoc subtractedValue_s266;
[L4710]              havoc __ret_0_decreaseAllowance;
[L4711]              havoc name_s484;
[L4712]              havoc symbol_s484;
[L4713]              havoc decimals_s484;
[L4714]              havoc __ret_0_name;
[L4715]              havoc __ret_0_symbol;
[L4716]              havoc __ret_0_decimals;
[L4717]              havoc __ret_0_governance;
[L4718]              havoc arg732_s0;
[L4719]              havoc __ret_0_minters;
[L4720]              havoc account_s671;
[L4721]              havoc amount_s671;
[L4722]              havoc _governance_s689;
[L4723]              havoc _minter_s709;
[L4724]              havoc _minter_s729;
[L4725]              havoc tmpNow;
[L4726]              havoc gas;
[L4727]              assume gas > 4000000 && gas <= 8000000;
[L4728]              tmpNow := now;
[L4729]              havoc now;
[L4730]              assume now > tmpNow;
[L4731]              assume msgsender_MSG != null;
[L4732]              assume DType[msgsender_MSG] != IERC20;
[L4733]              assume DType[msgsender_MSG] != Context;
[L4734]              assume DType[msgsender_MSG] != ERC20;
[L4735]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4736]              assume DType[msgsender_MSG] != SafeMath;
[L4737]              assume DType[msgsender_MSG] != YFI;
[L4738]              Alloc[msgsender_MSG] := true;
[L4739]  COND TRUE   choice == 17
[L4740]              gas := gas - 21000;
[L4741]  COND FALSE  !(gas >= 0)
[L4865]  RET         call CorralChoice_YFI(this);

[2020-11-25 09:33:10,985 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:33:10,985 INFO  L82        PathProgramCache]: Analyzing trace with hash -1026035771, now seen corresponding path program 1 times
[2020-11-25 09:33:10,987 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:33:11,018 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:33:11,215 INFO  L134       CoverageAnalysis]: Checked inductivity of 126 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 09:33:11,215 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:33:11,215 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 09:33:11,216 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:33:11,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:33:11,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=233, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:33:11,216 INFO  L87              Difference]: Start difference. First operand 2895 states and 3267 transitions. cyclomatic complexity: 382 Second operand 17 states.
[2020-11-25 09:33:12,913 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:33:12,913 INFO  L93              Difference]: Finished difference Result 1703 states and 1929 transitions.
[2020-11-25 09:33:12,913 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:33:12,913 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1703 states and 1929 transitions.
[2020-11-25 09:33:12,916 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:33:12,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1703 states to 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:33:12,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:33:12,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:33:12,917 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:33:12,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:33:12,917 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:33:12,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:33:12,920 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:33:12 BasicIcfg
[2020-11-25 09:33:12,920 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:33:12,921 INFO  L168              Benchmark]: Toolchain (without parser) took 13593.20 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.0 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -516.5 MB). Peak memory consumption was 524.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,921 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.25 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,922 INFO  L168              Benchmark]: Boogie Preprocessor took 109.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,922 INFO  L168              Benchmark]: UtopiaSpecLang took 71.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,922 INFO  L168              Benchmark]: Boogie Printer took 18.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,922 INFO  L168              Benchmark]: RCFGBuilder took 772.39 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,923 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.99 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,923 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1310.85 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 781.3 MB in the beginning and 918.6 MB in the end (delta: -137.3 MB). Peak memory consumption was 163.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,924 INFO  L168              Benchmark]: BlockEncodingV2 took 144.25 ms. Allocated memory is still 1.2 GB. Free memory was 918.6 MB in the beginning and 847.4 MB in the end (delta: 71.2 MB). Peak memory consumption was 71.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,924 INFO  L168              Benchmark]: BuchiAutomizer took 11125.87 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 844.6 MB). Free memory was 847.4 MB in the beginning and 1.5 GB in the end (delta: -604.4 MB). Peak memory consumption was 240.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:33:12,926 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4430 locations, 7941 edges
  - StatisticsResult: Encoded RCFG
    4311 locations, 7630 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.25 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.32 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 772.39 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.99 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1310.85 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 781.3 MB in the beginning and 918.6 MB in the end (delta: -137.3 MB). Peak memory consumption was 163.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 144.25 ms. Allocated memory is still 1.2 GB. Free memory was 918.6 MB in the beginning and 847.4 MB in the end (delta: 71.2 MB). Peak memory consumption was 71.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11125.87 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 844.6 MB). Free memory was 847.4 MB in the beginning and 1.5 GB in the end (delta: -604.4 MB). Peak memory consumption was 240.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1784 locations, 2441 edges
  - StatisticsResult: BuchiProgram size
    4430 locations, 7941 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.0s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.2s. Construction of modules took 6.7s. BÃ¼chi inclusion checks took 2.5s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 8 MinimizatonAttempts, 1377 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3078 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 26071 SDtfs, 21899 SDslu, 51081 SDs, 0 SdLazy, 128517 SolverSat, 3260 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
