This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 10:43:49,399 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 10:43:49,400 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 10:43:49,410 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 10:43:49,410 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 10:43:49,411 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 10:43:49,412 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 10:43:49,413 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 10:43:49,415 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 10:43:49,415 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 10:43:49,416 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 10:43:49,416 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 10:43:49,417 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 10:43:49,417 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 10:43:49,418 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 10:43:49,419 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 10:43:49,419 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 10:43:49,420 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 10:43:49,422 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 10:43:49,423 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 10:43:49,424 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 10:43:49,425 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 10:43:49,426 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 10:43:49,426 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 10:43:49,426 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 10:43:49,427 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 10:43:49,427 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 10:43:49,428 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 10:43:49,428 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 10:43:49,428 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 10:43:49,429 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 10:43:49,429 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 10:43:49,429 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 10:43:49,430 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 10:43:49,431 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 10:43:49,431 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 10:43:49,431 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 10:43:49,431 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 10:43:49,432 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 10:43:49,432 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 10:43:49,433 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 10:43:49,433 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 10:43:49,440 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 10:43:49,440 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 10:43:49,441 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 10:43:49,441 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 10:43:49,442 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 10:43:49,442 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 10:43:49,442 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 10:43:49,443 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 10:43:49,443 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 10:43:49,444 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 10:43:49,444 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 10:43:49,444 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 10:43:49,463 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 10:43:49,472 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 10:43:49,474 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 10:43:49,475 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 10:43:49,475 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 10:43:49,476 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl
[2020-11-25 10:43:49,476 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl'
[2020-11-25 10:43:49,576 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 10:43:49,578 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 10:43:49,578 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 10:43:49,579 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 10:43:49,579 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 10:43:49,597 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,599 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,631 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,631 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,659 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,671 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,682 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,695 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 10:43:49,695 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 10:43:49,696 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 10:43:49,698 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 10:43:49,702 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/1) ...
[2020-11-25 10:43:49,725 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this]) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this]) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this]) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this]) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this]) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this]) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this]) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this]) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this]) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this]) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:43:49,734 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this]) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this]) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this]) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this]) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this]) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this]) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this]) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this]) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this]) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this]) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:43:49,745 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this]) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this]) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this]) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this]) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this]) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this]) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this]) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this]) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this]) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this]) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:43:49,754 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s381 && tokens_s381<=balances_TokenERC20[this][msg.sender] ) && tokens_s381>=0 ) && tokens_s381<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s381]>=0 ) && balances_TokenERC20[this][to_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][msg.sender]>=0 ) && balances_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 10:43:49,761 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s381==true && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this]==( old(balances_TokenERC20[this]) ) ) && allowed_TokenERC20[this]==( old(allowed_TokenERC20[this]) ) ) && aSBlock_Zhey_ERC20[this]==( old(aSBlock_Zhey_ERC20[this]) ) ) && aEBlock_Zhey_ERC20[this]==( old(aEBlock_Zhey_ERC20[this]) ) ) && aCap_Zhey_ERC20[this]==( old(aCap_Zhey_ERC20[this]) ) ) && aTot_Zhey_ERC20[this]==( old(aTot_Zhey_ERC20[this]) ) ) && aAmt_Zhey_ERC20[this]==( old(aAmt_Zhey_ERC20[this]) ) ) && sSBlock_Zhey_ERC20[this]==( old(sSBlock_Zhey_ERC20[this]) ) ) && sEBlock_Zhey_ERC20[this]==( old(sEBlock_Zhey_ERC20[this]) ) ) && sCap_Zhey_ERC20[this]==( old(sCap_Zhey_ERC20[this]) ) ) && sTot_Zhey_ERC20[this]==( old(sTot_Zhey_ERC20[this]) ) ) && sChunk_Zhey_ERC20[this]==( old(sChunk_Zhey_ERC20[this]) ) ) && sPrice_Zhey_ERC20[this]==( old(sPrice_Zhey_ERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s381,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_Zhey_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 10:43:49,771 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this]) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this]) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this]) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this]) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this]) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this]) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this]) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this]) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this]) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this]) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:43:49,772 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 10:43:49,788 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:43:49 PropertyContainer
[2020-11-25 10:43:49,788 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 10:43:49,788 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 10:43:49,788 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 10:43:49,788 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 10:43:49,789 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/2) ...
[2020-11-25 10:43:49,789 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 10:43:49,790 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 10:43:49,809 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:43:49" (2/2) ...
[2020-11-25 10:43:49,810 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 10:43:49,810 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 10:43:49,810 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 10:43:49,810 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 10:43:49,811 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/2) ...
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 10:43:49,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,869 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 10:43:49,870 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 10:43:49,870 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 10:43:49,871 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 10:43:49,871 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 10:43:49,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 10:43:49,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 10:43:49,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 10:43:49,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 10:43:49,872 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 10:43:49,872 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 10:43:49,873 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 10:43:49,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 10:43:49,873 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 10:43:49,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 10:43:49,873 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 10:43:49,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 10:43:49,873 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 10:43:49,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 10:43:49,873 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 10:43:49,873 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 10:43:49,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 10:43:49,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 10:43:49,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 10:43:49,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 10:43:49,874 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 10:43:49,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 10:43:49,875 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 10:43:49,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 10:43:49,875 INFO  L130     BoogieDeclarations]: Found specification of procedure Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success
[2020-11-25 10:43:49,875 INFO  L130     BoogieDeclarations]: Found specification of procedure Zhey_ERC20_Zhey_ERC20
[2020-11-25 10:43:49,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure Zhey_ERC20_Zhey_ERC20
[2020-11-25 10:43:49,875 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_Zhey_ERC20
[2020-11-25 10:43:49,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_Zhey_ERC20
[2020-11-25 10:43:49,875 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_Zhey_ERC20
[2020-11-25 10:43:49,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_Zhey_ERC20
[2020-11-25 10:43:49,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Zhey_ERC20__success
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_Zhey_ERC20
[2020-11-25 10:43:49,877 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_Zhey_ERC20
[2020-11-25 10:43:49,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_Zhey_ERC20
[2020-11-25 10:43:49,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_Zhey_ERC20
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_Zhey_ERC20
[2020-11-25 10:43:49,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_Zhey_ERC20
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 10:43:49,879 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Zhey_ERC20
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 10:43:49,880 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 10:43:49,881 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 10:43:49,882 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 10:43:49,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 10:43:49,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Zhey_ERC20_Zhey_ERC20_NoBaseCtor__fail
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Zhey_ERC20_Zhey_ERC20__success
[2020-11-25 10:43:49,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Zhey_ERC20_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_Zhey_ERC20__success
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_Zhey_ERC20__success
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_Zhey_ERC20__success
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_Zhey_ERC20__success
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20__success
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20__fail
[2020-11-25 10:43:49,886 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20__success
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_Zhey_ERC20__success
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_Zhey_ERC20__success
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_Zhey_ERC20__fail
[2020-11-25 10:43:49,887 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_Zhey_ERC20__success
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_Zhey_ERC20__fail
[2020-11-25 10:43:49,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_Zhey_ERC20__success
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_Zhey_ERC20__fail
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_Zhey_ERC20__success
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_Zhey_ERC20__fail
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 10:43:49,889 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 10:43:49,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 10:43:49,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 10:43:49,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:43:49,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 10:43:49,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:43:49,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 10:43:49,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 10:43:49,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure Zhey_ERC20_Zhey_ERC20_NoBaseCtor__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure Zhey_ERC20_Zhey_ERC20__fail
[2020-11-25 10:43:49,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure Zhey_ERC20_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_Zhey_ERC20__fail
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_Zhey_ERC20__fail
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_Zhey_ERC20__fail
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_Zhey_ERC20__fail
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20__fail
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_Zhey_ERC20__success
[2020-11-25 10:43:49,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_Zhey_ERC20__success
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_Zhey_ERC20__success
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Zhey_ERC20__success
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_Zhey_ERC20__fail
[2020-11-25 10:43:49,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_Zhey_ERC20__fail
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_Zhey_ERC20__fail
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_Zhey_ERC20__fail
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_Zhey_ERC20__fail
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_Zhey_ERC20__success
[2020-11-25 10:43:49,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_Zhey_ERC20__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_Zhey_ERC20__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_Zhey_ERC20__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_Zhey_ERC20__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_Zhey_ERC20__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_Zhey_ERC20__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 10:43:49,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 10:43:49,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Zhey_ERC20
[2020-11-25 10:43:49,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 10:43:49,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 10:43:49,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 10:43:50,814 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:43:50,814 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:43:50,814 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:43:50,872 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 10:43:50,872 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 10:43:50,875 INFO  L202        PluginConnector]: Adding new model Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:43:50 BoogieIcfgContainer
[2020-11-25 10:43:50,875 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:43:49" (2/2) ...
[2020-11-25 10:43:50,875 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 10:43:50,876 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6fd2b67c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:43:50, skipping insertion in model container
[2020-11-25 10:43:50,876 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 10:43:50,876 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 10:43:50,876 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 10:43:50,877 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 10:43:50,878 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/3) ...
[2020-11-25 10:43:50,878 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@65268613 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:43:50, skipping insertion in model container
[2020-11-25 10:43:50,878 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:43:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 10:43:50,914 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:43:50 NWAContainer
[2020-11-25 10:43:50,914 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 10:43:50,914 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 10:43:50,914 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 10:43:50,915 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 10:43:50,916 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:43:50" (3/4) ...
[2020-11-25 10:43:50,916 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@502d4978 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:43:50, skipping insertion in model container
[2020-11-25 10:43:50,916 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:43:50" (4/4) ...
[2020-11-25 10:43:50,919 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 10:43:50,926 INFO  L110   BuchiProductObserver]: Initial RCFG 3566 locations, 4642 edges
[2020-11-25 10:43:50,926 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 10:43:50,939 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 10:43:52,669 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 10:43:52,679 INFO  L110   BuchiProductObserver]: BuchiProgram size 8358 locations, 14611 edges
[2020-11-25 10:43:52,679 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:43:52 BoogieIcfgContainer
[2020-11-25 10:43:52,679 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 10:43:52,679 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 10:43:52,679 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 10:43:52,681 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 10:43:52,681 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:43:52" (1/1) ...
[2020-11-25 10:43:52,805 INFO  L313           BlockEncoder]: Initial Icfg 8358 locations, 14611 edges
[2020-11-25 10:43:52,805 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 10:43:52,806 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 10:43:52,806 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 10:43:52,806 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 10:43:52,823 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 10:43:52,838 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 10:43:52,859 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 10:43:52,865 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 10:43:52,870 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 10:43:52,871 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 10:43:52,876 INFO  L313           BlockEncoder]: Encoded RCFG 8302 locations, 14466 edges
[2020-11-25 10:43:52,876 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:43:52 BasicIcfg
[2020-11-25 10:43:52,876 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 10:43:52,877 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 10:43:52,877 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 10:43:52,879 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 10:43:52,879 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,879 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:43:49" (1/6) ...
[2020-11-25 10:43:52,880 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e0ac3a4 and model type Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:43:52, skipping insertion in model container
[2020-11-25 10:43:52,880 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,880 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:43:49" (2/6) ...
[2020-11-25 10:43:52,881 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e0ac3a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:43:52, skipping insertion in model container
[2020-11-25 10:43:52,881 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,881 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:43:50" (3/6) ...
[2020-11-25 10:43:52,881 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e0ac3a4 and model type Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:43:52, skipping insertion in model container
[2020-11-25 10:43:52,881 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,881 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:43:50" (4/6) ...
[2020-11-25 10:43:52,881 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e0ac3a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:43:52, skipping insertion in model container
[2020-11-25 10:43:52,881 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,881 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:43:52" (5/6) ...
[2020-11-25 10:43:52,882 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e0ac3a4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 10:43:52, skipping insertion in model container
[2020-11-25 10:43:52,882 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:43:52,882 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:43:52" (6/6) ...
[2020-11-25 10:43:52,883 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Zhey_ERC20_0x851be0d936cb611d2cab3c3963338288445c1e52_transfer-self.bpl_BEv2
[2020-11-25 10:43:52,909 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 10:43:52,910 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 10:43:52,910 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 10:43:52,910 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 10:43:52,910 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 10:43:52,910 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 10:43:52,910 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 10:43:52,910 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 10:43:52,910 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 10:43:52,960 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-25 10:43:53,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:53,034 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:43:53,034 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:43:53,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:53,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:53,041 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 10:43:53,041 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-25 10:43:53,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:53,082 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:43:53,082 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:43:53,083 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:53,084 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:43:53,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:43:53,098 INFO  L82        PathProgramCache]: Analyzing trace with hash 177710997, now seen corresponding path program 1 times
[2020-11-25 10:43:53,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:43:53,118 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:43:53,145 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:43:53,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:43:53,597 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 10:43:53,601 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:43:53,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 10:43:53,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 10:43:53,611 INFO  L87              Difference]: Start difference. First operand 8302 states. Second operand 4 states.
[2020-11-25 10:43:54,530 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:43:54,530 INFO  L93              Difference]: Finished difference Result 7020 states and 8361 transitions.
[2020-11-25 10:43:54,530 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 10:43:54,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7020 states and 8361 transitions.
[2020-11-25 10:43:54,567 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:54,600 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7020 states to 7020 states and 8361 transitions.
[2020-11-25 10:43:54,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 10:43:54,602 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 10:43:54,602 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7020 states and 8361 transitions.
[2020-11-25 10:43:54,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:43:54,615 INFO  L728         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-25 10:43:54,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7020 states and 8361 transitions.
[2020-11-25 10:43:54,734 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7020 to 7020.
[2020-11-25 10:43:54,735 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7020 states.
[2020-11-25 10:43:54,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7020 states to 7020 states and 8361 transitions.
[2020-11-25 10:43:54,746 INFO  L751         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-25 10:43:54,746 INFO  L631         BuchiCegarLoop]: Abstraction has 7020 states and 8361 transitions.
[2020-11-25 10:43:54,746 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 10:43:54,746 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7020 states and 8361 transitions.
[2020-11-25 10:43:54,755 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:54,755 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:43:54,755 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:43:54,758 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:54,758 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:43:54,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:43:54,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1291403587, now seen corresponding path program 1 times
[2020-11-25 10:43:54,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:43:54,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:43:54,800 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:43:54,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:43:54,801 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:43:54,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:43:54,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:43:54,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:43:54,802 INFO  L87              Difference]: Start difference. First operand 7020 states and 8361 transitions. cyclomatic complexity: 1347 Second operand 3 states.
[2020-11-25 10:43:54,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:43:54,930 INFO  L93              Difference]: Finished difference Result 8376 states and 9920 transitions.
[2020-11-25 10:43:54,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:43:54,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8376 states and 9920 transitions.
[2020-11-25 10:43:54,957 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:43:54,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8376 states to 8376 states and 9920 transitions.
[2020-11-25 10:43:54,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 326
[2020-11-25 10:43:54,999 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 326
[2020-11-25 10:43:54,999 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8376 states and 9920 transitions.
[2020-11-25 10:43:55,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:43:55,007 INFO  L728         BuchiCegarLoop]: Abstraction has 8376 states and 9920 transitions.
[2020-11-25 10:43:55,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8376 states and 9920 transitions.
[2020-11-25 10:43:55,121 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8376 to 7432.
[2020-11-25 10:43:55,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7432 states.
[2020-11-25 10:43:55,130 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7432 states to 7432 states and 8750 transitions.
[2020-11-25 10:43:55,131 INFO  L751         BuchiCegarLoop]: Abstraction has 7432 states and 8750 transitions.
[2020-11-25 10:43:55,131 INFO  L631         BuchiCegarLoop]: Abstraction has 7432 states and 8750 transitions.
[2020-11-25 10:43:55,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 10:43:55,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7432 states and 8750 transitions.
[2020-11-25 10:43:55,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:55,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:43:55,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:43:55,140 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:55,140 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND TRUE   revert
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND TRUE   !(b_s45 <= a_s45)
[L4118]              revert := true;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND TRUE   revert
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:43:55,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:43:55,149 INFO  L82        PathProgramCache]: Analyzing trace with hash -746531013, now seen corresponding path program 1 times
[2020-11-25 10:43:55,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:43:55,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:43:55,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:43:55,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:43:55,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:43:55,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:43:55,173 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:43:55,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:43:55,173 INFO  L87              Difference]: Start difference. First operand 7432 states and 8750 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 10:43:55,258 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:43:55,258 INFO  L93              Difference]: Finished difference Result 8376 states and 9746 transitions.
[2020-11-25 10:43:55,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:43:55,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8376 states and 9746 transitions.
[2020-11-25 10:43:55,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:43:55,306 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8376 states to 8072 states and 9378 transitions.
[2020-11-25 10:43:55,306 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-25 10:43:55,307 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-25 10:43:55,307 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8072 states and 9378 transitions.
[2020-11-25 10:43:55,315 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:43:55,315 INFO  L728         BuchiCegarLoop]: Abstraction has 8072 states and 9378 transitions.
[2020-11-25 10:43:55,322 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8072 states and 9378 transitions.
[2020-11-25 10:43:55,380 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8072 to 7184.
[2020-11-25 10:43:55,380 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7184 states.
[2020-11-25 10:43:55,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7184 states to 7184 states and 8268 transitions.
[2020-11-25 10:43:55,389 INFO  L751         BuchiCegarLoop]: Abstraction has 7184 states and 8268 transitions.
[2020-11-25 10:43:55,389 INFO  L631         BuchiCegarLoop]: Abstraction has 7184 states and 8268 transitions.
[2020-11-25 10:43:55,389 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 10:43:55,389 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7184 states and 8268 transitions.
[2020-11-25 10:43:55,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:43:55,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:43:55,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:43:55,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:43:55,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1366384072;
[L4361]              name_TokenERC20[this] := 1366384072;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := -1247778171;
[L4370]              name_TokenERC20[this] := -727247216;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999990000044999818990997584229966666223163025858915555344384, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_Zhey_ERC20[this] := 0;
[L4705]              aEBlock_Zhey_ERC20[this] := 0;
[L4706]              aCap_Zhey_ERC20[this] := 0;
[L4707]              aTot_Zhey_ERC20[this] := 0;
[L4708]              aAmt_Zhey_ERC20[this] := 0;
[L4709]              sSBlock_Zhey_ERC20[this] := 0;
[L4710]              sEBlock_Zhey_ERC20[this] := 0;
[L4711]              sCap_Zhey_ERC20[this] := 0;
[L4712]              sTot_Zhey_ERC20[this] := 0;
[L4713]              sChunk_Zhey_ERC20[this] := 0;
[L4714]              sPrice_Zhey_ERC20[this] := 0;
[L4752]  RET         call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:43:55,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:43:55,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -468062792, now seen corresponding path program 1 times
[2020-11-25 10:43:55,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:43:55,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:43:55,934 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 10:43:55,934 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:43:55,934 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 10:43:55,934 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:43:55,934 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 10:43:55,935 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=410, Unknown=0, NotChecked=0, Total=462
[2020-11-25 10:43:55,935 INFO  L87              Difference]: Start difference. First operand 7184 states and 8268 transitions. cyclomatic complexity: 1090 Second operand 22 states.
[2020-11-25 10:44:05,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:44:05,376 INFO  L93              Difference]: Finished difference Result 7395 states and 8501 transitions.
[2020-11-25 10:44:05,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 10:44:05,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7395 states and 8501 transitions.
[2020-11-25 10:44:05,423 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:44:05,443 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7395 states to 7395 states and 8501 transitions.
[2020-11-25 10:44:05,443 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 281
[2020-11-25 10:44:05,444 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 281
[2020-11-25 10:44:05,444 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7395 states and 8501 transitions.
[2020-11-25 10:44:05,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:44:05,450 INFO  L728         BuchiCegarLoop]: Abstraction has 7395 states and 8501 transitions.
[2020-11-25 10:44:05,456 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7395 states and 8501 transitions.
[2020-11-25 10:44:05,504 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7395 to 7329.
[2020-11-25 10:44:05,505 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 10:44:05,512 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 8429 transitions.
[2020-11-25 10:44:05,512 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 8429 transitions.
[2020-11-25 10:44:05,512 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 8429 transitions.
[2020-11-25 10:44:05,512 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 10:44:05,512 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 8429 transitions.
[2020-11-25 10:44:05,519 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:44:05,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:44:05,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:44:05,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:44:05,521 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1366384072;
[L4361]              name_TokenERC20[this] := 1366384072;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := -1247778171;
[L4370]              name_TokenERC20[this] := -727247216;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999990000044999818990997584229966666223163025858915555344384, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_Zhey_ERC20[this] := 0;
[L4705]              aEBlock_Zhey_ERC20[this] := 0;
[L4706]              aCap_Zhey_ERC20[this] := 0;
[L4707]              aTot_Zhey_ERC20[this] := 0;
[L4708]              aAmt_Zhey_ERC20[this] := 0;
[L4709]              sSBlock_Zhey_ERC20[this] := 0;
[L4710]              sEBlock_Zhey_ERC20[this] := 0;
[L4711]              sCap_Zhey_ERC20[this] := 0;
[L4712]              sTot_Zhey_ERC20[this] := 0;
[L4713]              sChunk_Zhey_ERC20[this] := 0;
[L4714]              sPrice_Zhey_ERC20[this] := 0;
[L4752]  RET         call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_Zhey_ERC20 := aSBlock_Zhey_ERC20;
[L1001]              __tmp__aEBlock_Zhey_ERC20 := aEBlock_Zhey_ERC20;
[L1002]              __tmp__aCap_Zhey_ERC20 := aCap_Zhey_ERC20;
[L1003]              __tmp__aTot_Zhey_ERC20 := aTot_Zhey_ERC20;
[L1004]              __tmp__aAmt_Zhey_ERC20 := aAmt_Zhey_ERC20;
[L1005]              __tmp__sSBlock_Zhey_ERC20 := sSBlock_Zhey_ERC20;
[L1006]              __tmp__sEBlock_Zhey_ERC20 := sEBlock_Zhey_ERC20;
[L1007]              __tmp__sCap_Zhey_ERC20 := sCap_Zhey_ERC20;
[L1008]              __tmp__sTot_Zhey_ERC20 := sTot_Zhey_ERC20;
[L1009]              __tmp__sChunk_Zhey_ERC20 := sChunk_Zhey_ERC20;
[L1010]              __tmp__sPrice_Zhey_ERC20 := sPrice_Zhey_ERC20;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_Zhey_ERC20 := aSBlock_Zhey_ERC20;
[L1001]              __tmp__aEBlock_Zhey_ERC20 := aEBlock_Zhey_ERC20;
[L1002]              __tmp__aCap_Zhey_ERC20 := aCap_Zhey_ERC20;
[L1003]              __tmp__aTot_Zhey_ERC20 := aTot_Zhey_ERC20;
[L1004]              __tmp__aAmt_Zhey_ERC20 := aAmt_Zhey_ERC20;
[L1005]              __tmp__sSBlock_Zhey_ERC20 := sSBlock_Zhey_ERC20;
[L1006]              __tmp__sEBlock_Zhey_ERC20 := sEBlock_Zhey_ERC20;
[L1007]              __tmp__sCap_Zhey_ERC20 := sCap_Zhey_ERC20;
[L1008]              __tmp__sTot_Zhey_ERC20 := sTot_Zhey_ERC20;
[L1009]              __tmp__sChunk_Zhey_ERC20 := sChunk_Zhey_ERC20;
[L1010]              __tmp__sPrice_Zhey_ERC20 := sPrice_Zhey_ERC20;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:44:05,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:44:05,538 INFO  L82        PathProgramCache]: Analyzing trace with hash 1388033895, now seen corresponding path program 1 times
[2020-11-25 10:44:05,539 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:44:05,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:44:05,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 10:44:05,600 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:44:05,600 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 10:44:05,600 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:44:05,600 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 10:44:05,600 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 10:44:05,600 INFO  L87              Difference]: Start difference. First operand 7329 states and 8429 transitions. cyclomatic complexity: 1108 Second operand 7 states.
[2020-11-25 10:44:07,011 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:44:07,011 INFO  L93              Difference]: Finished difference Result 7758 states and 8910 transitions.
[2020-11-25 10:44:07,011 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 10:44:07,011 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7758 states and 8910 transitions.
[2020-11-25 10:44:07,027 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:44:07,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7758 states to 7758 states and 8910 transitions.
[2020-11-25 10:44:07,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 10:44:07,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 10:44:07,043 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7758 states and 8910 transitions.
[2020-11-25 10:44:07,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:44:07,048 INFO  L728         BuchiCegarLoop]: Abstraction has 7758 states and 8910 transitions.
[2020-11-25 10:44:07,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7758 states and 8910 transitions.
[2020-11-25 10:44:07,094 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7758 to 7470.
[2020-11-25 10:44:07,094 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7470 states.
[2020-11-25 10:44:07,101 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7470 states to 7470 states and 8578 transitions.
[2020-11-25 10:44:07,101 INFO  L751         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-25 10:44:07,101 INFO  L631         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-25 10:44:07,101 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 10:44:07,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7470 states and 8578 transitions.
[2020-11-25 10:44:07,107 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:44:07,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:44:07,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:44:07,109 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:44:07,109 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1366384072;
[L4361]              name_TokenERC20[this] := 1366384072;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := -1247778171;
[L4370]              name_TokenERC20[this] := -727247216;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999990000044999818990997584229966666223163025858915555344384, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_Zhey_ERC20[this] := 0;
[L4705]              aEBlock_Zhey_ERC20[this] := 0;
[L4706]              aCap_Zhey_ERC20[this] := 0;
[L4707]              aTot_Zhey_ERC20[this] := 0;
[L4708]              aAmt_Zhey_ERC20[this] := 0;
[L4709]              sSBlock_Zhey_ERC20[this] := 0;
[L4710]              sEBlock_Zhey_ERC20[this] := 0;
[L4711]              sCap_Zhey_ERC20[this] := 0;
[L4712]              sTot_Zhey_ERC20[this] := 0;
[L4713]              sChunk_Zhey_ERC20[this] := 0;
[L4714]              sPrice_Zhey_ERC20[this] := 0;
[L4752]  RET         call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_Zhey_ERC20 := aSBlock_Zhey_ERC20;
[L1001]              __tmp__aEBlock_Zhey_ERC20 := aEBlock_Zhey_ERC20;
[L1002]              __tmp__aCap_Zhey_ERC20 := aCap_Zhey_ERC20;
[L1003]              __tmp__aTot_Zhey_ERC20 := aTot_Zhey_ERC20;
[L1004]              __tmp__aAmt_Zhey_ERC20 := aAmt_Zhey_ERC20;
[L1005]              __tmp__sSBlock_Zhey_ERC20 := sSBlock_Zhey_ERC20;
[L1006]              __tmp__sEBlock_Zhey_ERC20 := sEBlock_Zhey_ERC20;
[L1007]              __tmp__sCap_Zhey_ERC20 := sCap_Zhey_ERC20;
[L1008]              __tmp__sTot_Zhey_ERC20 := sTot_Zhey_ERC20;
[L1009]              __tmp__sChunk_Zhey_ERC20 := sChunk_Zhey_ERC20;
[L1010]              __tmp__sPrice_Zhey_ERC20 := sPrice_Zhey_ERC20;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND TRUE   !(c_s23 >= a_s23)
[L4092]              revert := true;
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:44:07,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:44:07,112 INFO  L82        PathProgramCache]: Analyzing trace with hash 211027649, now seen corresponding path program 1 times
[2020-11-25 10:44:07,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:44:07,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:44:07,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 10:44:07,191 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:44:07,191 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 10:44:07,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:44:07,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 10:44:07,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 10:44:07,191 INFO  L87              Difference]: Start difference. First operand 7470 states and 8578 transitions. cyclomatic complexity: 1116 Second operand 12 states.
[2020-11-25 10:44:10,565 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:44:10,565 INFO  L93              Difference]: Finished difference Result 7758 states and 8908 transitions.
[2020-11-25 10:44:10,566 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 10:44:10,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7758 states and 8908 transitions.
[2020-11-25 10:44:10,582 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:44:10,601 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7758 states to 7758 states and 8908 transitions.
[2020-11-25 10:44:10,602 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 10:44:10,602 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 10:44:10,602 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7758 states and 8908 transitions.
[2020-11-25 10:44:10,606 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:44:10,606 INFO  L728         BuchiCegarLoop]: Abstraction has 7758 states and 8908 transitions.
[2020-11-25 10:44:10,613 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7758 states and 8908 transitions.
[2020-11-25 10:44:10,657 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7758 to 7466.
[2020-11-25 10:44:10,657 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7466 states.
[2020-11-25 10:44:10,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7466 states to 7466 states and 8568 transitions.
[2020-11-25 10:44:10,666 INFO  L751         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-25 10:44:10,666 INFO  L631         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-25 10:44:10,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 10:44:10,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7466 states and 8568 transitions.
[2020-11-25 10:44:10,672 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:44:10,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:44:10,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:44:10,673 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:44:10,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1366384072;
[L4361]              name_TokenERC20[this] := 1366384072;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := -1247778171;
[L4370]              name_TokenERC20[this] := -727247216;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999990000044999818990997584229966666223163025858915555344384, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_Zhey_ERC20[this] := 0;
[L4705]              aEBlock_Zhey_ERC20[this] := 0;
[L4706]              aCap_Zhey_ERC20[this] := 0;
[L4707]              aTot_Zhey_ERC20[this] := 0;
[L4708]              aAmt_Zhey_ERC20[this] := 0;
[L4709]              sSBlock_Zhey_ERC20[this] := 0;
[L4710]              sEBlock_Zhey_ERC20[this] := 0;
[L4711]              sCap_Zhey_ERC20[this] := 0;
[L4712]              sTot_Zhey_ERC20[this] := 0;
[L4713]              sChunk_Zhey_ERC20[this] := 0;
[L4714]              sPrice_Zhey_ERC20[this] := 0;
[L4752]  RET         call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_Zhey_ERC20 := aSBlock_Zhey_ERC20;
[L1001]              __tmp__aEBlock_Zhey_ERC20 := aEBlock_Zhey_ERC20;
[L1002]              __tmp__aCap_Zhey_ERC20 := aCap_Zhey_ERC20;
[L1003]              __tmp__aTot_Zhey_ERC20 := aTot_Zhey_ERC20;
[L1004]              __tmp__aAmt_Zhey_ERC20 := aAmt_Zhey_ERC20;
[L1005]              __tmp__sSBlock_Zhey_ERC20 := sSBlock_Zhey_ERC20;
[L1006]              __tmp__sEBlock_Zhey_ERC20 := sEBlock_Zhey_ERC20;
[L1007]              __tmp__sCap_Zhey_ERC20 := sCap_Zhey_ERC20;
[L1008]              __tmp__sTot_Zhey_ERC20 := sTot_Zhey_ERC20;
[L1009]              __tmp__sChunk_Zhey_ERC20 := sChunk_Zhey_ERC20;
[L1010]              __tmp__sPrice_Zhey_ERC20 := sPrice_Zhey_ERC20;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_Zhey_ERC20 := aSBlock_Zhey_ERC20;
[L1001]              __tmp__aEBlock_Zhey_ERC20 := aEBlock_Zhey_ERC20;
[L1002]              __tmp__aCap_Zhey_ERC20 := aCap_Zhey_ERC20;
[L1003]              __tmp__aTot_Zhey_ERC20 := aTot_Zhey_ERC20;
[L1004]              __tmp__aAmt_Zhey_ERC20 := aAmt_Zhey_ERC20;
[L1005]              __tmp__sSBlock_Zhey_ERC20 := sSBlock_Zhey_ERC20;
[L1006]              __tmp__sEBlock_Zhey_ERC20 := sEBlock_Zhey_ERC20;
[L1007]              __tmp__sCap_Zhey_ERC20 := sCap_Zhey_ERC20;
[L1008]              __tmp__sTot_Zhey_ERC20 := sTot_Zhey_ERC20;
[L1009]              __tmp__sChunk_Zhey_ERC20 := sChunk_Zhey_ERC20;
[L1010]              __tmp__sPrice_Zhey_ERC20 := sPrice_Zhey_ERC20;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:44:10,677 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:44:10,677 INFO  L82        PathProgramCache]: Analyzing trace with hash -769078570, now seen corresponding path program 1 times
[2020-11-25 10:44:10,678 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:44:10,717 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:44:10,791 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 10:44:10,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:44:10,792 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 10:44:10,792 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:44:10,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 10:44:10,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 10:44:10,792 INFO  L87              Difference]: Start difference. First operand 7466 states and 8568 transitions. cyclomatic complexity: 1110 Second operand 5 states.
[2020-11-25 10:44:11,736 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:44:11,736 INFO  L93              Difference]: Finished difference Result 8793 states and 10127 transitions.
[2020-11-25 10:44:11,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 10:44:11,736 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8793 states and 10127 transitions.
[2020-11-25 10:44:11,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 10:44:11,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8793 states to 7161 states and 8332 transitions.
[2020-11-25 10:44:11,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 294
[2020-11-25 10:44:11,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 294
[2020-11-25 10:44:11,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7161 states and 8332 transitions.
[2020-11-25 10:44:11,776 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:44:11,776 INFO  L728         BuchiCegarLoop]: Abstraction has 7161 states and 8332 transitions.
[2020-11-25 10:44:11,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7161 states and 8332 transitions.
[2020-11-25 10:44:11,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7161 to 5779.
[2020-11-25 10:44:11,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5779 states.
[2020-11-25 10:44:11,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5779 states to 5779 states and 6645 transitions.
[2020-11-25 10:44:11,816 INFO  L751         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-25 10:44:11,816 INFO  L631         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-25 10:44:11,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 10:44:11,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5779 states and 6645 transitions.
[2020-11-25 10:44:11,821 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:44:11,821 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:44:11,821 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:44:11,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:44:11,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == Zhey_ERC20;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 1366384072;
[L4361]              name_TokenERC20[this] := 1366384072;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := -1247778171;
[L4370]              name_TokenERC20[this] := -727247216;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(999990000044999818990997584229966666223163025858915555344384, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_Zhey_ERC20[this] := 0;
[L4705]              aEBlock_Zhey_ERC20[this] := 0;
[L4706]              aCap_Zhey_ERC20[this] := 0;
[L4707]              aTot_Zhey_ERC20[this] := 0;
[L4708]              aAmt_Zhey_ERC20[this] := 0;
[L4709]              sSBlock_Zhey_ERC20[this] := 0;
[L4710]              sEBlock_Zhey_ERC20[this] := 0;
[L4711]              sCap_Zhey_ERC20[this] := 0;
[L4712]              sTot_Zhey_ERC20[this] := 0;
[L4713]              sChunk_Zhey_ERC20[this] := 0;
[L4714]              sPrice_Zhey_ERC20[this] := 0;
[L4752]  RET         call Zhey_ERC20_Zhey_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call Zhey_ERC20_Zhey_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

Loop:
[L7682]  CALL        call CorralChoice_Zhey_ERC20(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != Zhey_ERC20;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_Zhey_ERC20[this] == old(aSBlock_Zhey_ERC20[this])) && aEBlock_Zhey_ERC20[this] == old(aEBlock_Zhey_ERC20[this])) && aCap_Zhey_ERC20[this] == old(aCap_Zhey_ERC20[this])) && aTot_Zhey_ERC20[this] == old(aTot_Zhey_ERC20[this])) && aAmt_Zhey_ERC20[this] == old(aAmt_Zhey_ERC20[this])) && sSBlock_Zhey_ERC20[this] == old(sSBlock_Zhey_ERC20[this])) && sEBlock_Zhey_ERC20[this] == old(sEBlock_Zhey_ERC20[this])) && sCap_Zhey_ERC20[this] == old(sCap_Zhey_ERC20[this])) && sTot_Zhey_ERC20[this] == old(sTot_Zhey_ERC20[this])) && sChunk_Zhey_ERC20[this] == old(sChunk_Zhey_ERC20[this])) && sPrice_Zhey_ERC20[this] == old(sPrice_Zhey_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_Zhey_ERC20(this);

[2020-11-25 10:44:11,826 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:44:11,826 INFO  L82        PathProgramCache]: Analyzing trace with hash -1825889970, now seen corresponding path program 1 times
[2020-11-25 10:44:11,827 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:44:11,961 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:44:12,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-11-25 10:44:12,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:44:12,508 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 10:44:12,508 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:44:12,508 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 10:44:12,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=790, Unknown=0, NotChecked=0, Total=870
[2020-11-25 10:44:12,509 INFO  L87              Difference]: Start difference. First operand 5779 states and 6645 transitions. cyclomatic complexity: 873 Second operand 30 states.
[2020-11-25 10:44:18,903 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:44:18,903 INFO  L93              Difference]: Finished difference Result 3021 states and 3459 transitions.
[2020-11-25 10:44:18,904 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 10:44:18,904 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3021 states and 3459 transitions.
[2020-11-25 10:44:18,908 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 10:44:18,908 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3021 states to 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 10:44:18,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 10:44:18,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:44:18,908 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 10:44:18,908 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 10:44:18,908 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 10:44:18,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 10:44:18,911 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:44:18 BasicIcfg
[2020-11-25 10:44:18,911 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 10:44:18,912 INFO  L168              Benchmark]: Toolchain (without parser) took 29335.11 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 344.2 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,912 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,913 INFO  L168              Benchmark]: Boogie Preprocessor took 116.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,913 INFO  L168              Benchmark]: UtopiaSpecLang took 92.41 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 897.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,913 INFO  L168              Benchmark]: Boogie Printer took 21.72 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,913 INFO  L168              Benchmark]: RCFGBuilder took 1065.72 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 892.3 MB in the beginning and 995.2 MB in the end (delta: -102.9 MB). Peak memory consumption was 181.7 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,914 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.97 ms. Allocated memory is still 1.1 GB. Free memory was 995.2 MB in the beginning and 982.2 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,915 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1765.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 982.2 MB in the beginning and 892.9 MB in the end (delta: 89.3 MB). Peak memory consumption was 491.4 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,915 INFO  L168              Benchmark]: BlockEncodingV2 took 197.05 ms. Allocated memory is still 1.3 GB. Free memory was 892.9 MB in the beginning and 795.0 MB in the end (delta: 97.9 MB). Peak memory consumption was 97.9 MB. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,915 INFO  L168              Benchmark]: BuchiAutomizer took 26034.68 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 795.0 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:44:18,918 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8358 locations, 14611 edges
  - StatisticsResult: Encoded RCFG
    8302 locations, 14466 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 116.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 92.41 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 897.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.72 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1065.72 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 892.3 MB in the beginning and 995.2 MB in the end (delta: -102.9 MB). Peak memory consumption was 181.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.97 ms. Allocated memory is still 1.1 GB. Free memory was 995.2 MB in the beginning and 982.2 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1765.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 982.2 MB in the beginning and 892.9 MB in the end (delta: 89.3 MB). Peak memory consumption was 491.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 197.05 ms. Allocated memory is still 1.3 GB. Free memory was 892.9 MB in the beginning and 795.0 MB in the end (delta: 97.9 MB). Peak memory consumption was 97.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 26034.68 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 795.0 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3566 locations, 4642 edges
  - StatisticsResult: BuchiProgram size
    8358 locations, 14611 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 30 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 26.0s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 2.0s. Construction of modules took 18.4s. BÃ¼chi inclusion checks took 4.2s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 7 MinimizatonAttempts, 3860 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 7470 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 60398 SDtfs, 53394 SDslu, 168954 SDs, 0 SdLazy, 164289 SolverSat, 9516 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_TokenERC200) ==> ( <>(success_transfer_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
