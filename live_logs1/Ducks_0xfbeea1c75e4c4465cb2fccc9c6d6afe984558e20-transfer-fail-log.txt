This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:42:49,104 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:42:49,105 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:42:49,115 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:42:49,115 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:42:49,116 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:42:49,117 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:42:49,118 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:42:49,120 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:42:49,120 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:42:49,121 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:42:49,121 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:42:49,122 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:42:49,122 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:42:49,123 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:42:49,124 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:42:49,124 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:42:49,125 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:42:49,126 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:42:49,128 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:42:49,129 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:42:49,129 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:42:49,131 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:42:49,131 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:42:49,131 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:42:49,132 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:42:49,132 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:42:49,133 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:42:49,133 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:42:49,133 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:42:49,133 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:42:49,134 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:42:49,134 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:42:49,135 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:42:49,136 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:42:49,136 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:42:49,136 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:42:49,136 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:42:49,136 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:42:49,137 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:42:49,138 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:42:49,138 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:42:49,146 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:42:49,146 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:42:49,146 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:42:49,147 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:42:49,147 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:42:49,147 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:42:49,148 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:42:49,148 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:42:49,149 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:42:49,149 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:42:49,149 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:42:49,149 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:42:49,173 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:42:49,186 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:42:49,189 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:42:49,190 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:42:49,190 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:42:49,191 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl
[2020-11-25 14:42:49,191 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl'
[2020-11-25 14:42:49,259 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:42:49,260 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:42:49,260 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:42:49,261 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:42:49,261 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:42:49,277 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,279 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,304 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,304 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,319 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,327 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,333 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,340 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:42:49,341 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:42:49,341 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:42:49,342 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:42:49,346 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/1) ...
[2020-11-25 14:42:49,361 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transfer(to, value), msg.sender != to && (value > balances_Ducks[this][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transfer)))
[2020-11-25 14:42:49,367 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transfer(to, value), msg.sender != to && (value > balances_Ducks[this][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transfer)))
[2020-11-25 14:42:49,374 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transfer(to, value), msg.sender != to && (value > balances_Ducks[this][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transfer)))
[2020-11-25 14:42:49,380 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s334 && ( tokens_s334>balances_Ducks[this][msg.sender] || ( balances_Ducks[this][to_s334] + tokens_s334 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && tokens_s334>=0 ) && tokens_s334<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s334]>=0 ) && balances_Ducks[this][to_s334]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][msg.sender]>=0 ) && balances_Ducks[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[to_s334,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:42:49,384 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transfer(to, value), msg.sender != to && (value > balances_Ducks[this][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][msg.sender] >= 0 &&  balances_Ducks[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transfer)))
[2020-11-25 14:42:49,384 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Ducks0) ==> ( <>AP(fail_transfer_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:42:49,390 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:42:49 PropertyContainer
[2020-11-25 14:42:49,390 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:42:49,390 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:42:49,391 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:42:49,391 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:42:49,391 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/2) ...
[2020-11-25 14:42:49,392 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:42:49,392 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:42:49,402 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:42:49" (2/2) ...
[2020-11-25 14:42:49,402 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:42:49,403 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:42:49,403 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:42:49,403 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:42:49,404 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/2) ...
[2020-11-25 14:42:49,456 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:42:49,456 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:42:49,456 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:42:49,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:42:49,457 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:42:49,458 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:42:49,458 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:42:49,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:42:49,459 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:42:49,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:42:49,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:42:49,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:42:49,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:42:49,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:42:49,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,461 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:42:49,462 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:42:49,463 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:42:49,464 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:42:49,464 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:42:49,464 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:42:49,464 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:42:49,464 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:42:49,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:42:49,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:42:49,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:42:49,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:42:49,468 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:42:49,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:42:49,825 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:42:49,826 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:42:49,986 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:42:49,986 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 14:42:49,988 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:42:49 BoogieIcfgContainer
[2020-11-25 14:42:49,988 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:42:49" (2/2) ...
[2020-11-25 14:42:49,988 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:42:49,989 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4b61ffb2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:42:49, skipping insertion in model container
[2020-11-25 14:42:49,989 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:42:49,989 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:42:49,989 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:42:49,990 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:42:49,991 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/3) ...
[2020-11-25 14:42:49,991 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@369ab1cd and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:42:49, skipping insertion in model container
[2020-11-25 14:42:49,991 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:42:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:42:50,026 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:42:50 NWAContainer
[2020-11-25 14:42:50,026 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:42:50,026 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:42:50,026 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:42:50,027 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:42:50,028 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:42:49" (3/4) ...
[2020-11-25 14:42:50,029 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7b4e29bf and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:42:50, skipping insertion in model container
[2020-11-25 14:42:50,029 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:42:50" (4/4) ...
[2020-11-25 14:42:50,032 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:42:50,035 INFO  L110   BuchiProductObserver]: Initial RCFG 1053 locations, 1325 edges
[2020-11-25 14:42:50,035 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:42:50,044 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:42:51,099 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:42:51,104 INFO  L110   BuchiProductObserver]: BuchiProgram size 2496 locations, 4287 edges
[2020-11-25 14:42:51,104 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:42:51 BoogieIcfgContainer
[2020-11-25 14:42:51,104 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:42:51,104 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:42:51,105 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:42:51,106 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:42:51,107 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:42:51" (1/1) ...
[2020-11-25 14:42:51,190 INFO  L313           BlockEncoder]: Initial Icfg 2496 locations, 4287 edges
[2020-11-25 14:42:51,190 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:42:51,191 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:42:51,192 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:42:51,192 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:42:51,203 INFO  L70    emoveInfeasibleEdges]: Removed 69 edges and 10 locations because of local infeasibility
[2020-11-25 14:42:51,212 INFO  L70        RemoveSinkStates]: Removed 110 edges and 60 locations by removing sink states
[2020-11-25 14:42:51,222 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:42:51,227 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:42:51,229 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:42:51,230 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:42:51,234 INFO  L313           BlockEncoder]: Encoded RCFG 2412 locations, 4088 edges
[2020-11-25 14:42:51,235 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:42:51 BasicIcfg
[2020-11-25 14:42:51,235 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:42:51,235 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:42:51,235 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:42:51,238 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:42:51,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:42:49" (1/6) ...
[2020-11-25 14:42:51,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e43a4b2 and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:42:51, skipping insertion in model container
[2020-11-25 14:42:51,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:42:49" (2/6) ...
[2020-11-25 14:42:51,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e43a4b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:42:51, skipping insertion in model container
[2020-11-25 14:42:51,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:42:49" (3/6) ...
[2020-11-25 14:42:51,241 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e43a4b2 and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:42:51, skipping insertion in model container
[2020-11-25 14:42:51,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:42:50" (4/6) ...
[2020-11-25 14:42:51,241 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e43a4b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:42:51, skipping insertion in model container
[2020-11-25 14:42:51,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:42:51" (5/6) ...
[2020-11-25 14:42:51,242 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e43a4b2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:42:51, skipping insertion in model container
[2020-11-25 14:42:51,242 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:42:51,242 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:42:51" (6/6) ...
[2020-11-25 14:42:51,243 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transfer-fail.bpl_BEv2
[2020-11-25 14:42:51,284 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:42:51,285 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:42:51,285 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:42:51,285 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:42:51,285 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:42:51,285 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:42:51,285 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:42:51,285 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:42:51,285 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:42:51,317 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2412 states.
[2020-11-25 14:42:51,367 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:51,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:51,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:51,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:51,377 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:51,377 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:42:51,377 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2412 states.
[2020-11-25 14:42:51,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:51,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:51,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:51,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:51,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:42:51,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:42:51,415 INFO  L82        PathProgramCache]: Analyzing trace with hash 608992137, now seen corresponding path program 1 times
[2020-11-25 14:42:51,420 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:42:51,474 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:42:51,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:42:51,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:42:51,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:42:51,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:42:51,635 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:42:51,636 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:42:51,638 INFO  L87              Difference]: Start difference. First operand 2412 states. Second operand 3 states.
[2020-11-25 14:42:51,787 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:42:51,787 INFO  L93              Difference]: Finished difference Result 1634 states and 1778 transitions.
[2020-11-25 14:42:51,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:42:51,789 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1634 states and 1778 transitions.
[2020-11-25 14:42:51,799 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:51,813 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1634 states to 1634 states and 1778 transitions.
[2020-11-25 14:42:51,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 14:42:51,816 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 587
[2020-11-25 14:42:51,816 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1634 states and 1778 transitions.
[2020-11-25 14:42:51,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:42:51,822 INFO  L728         BuchiCegarLoop]: Abstraction has 1634 states and 1778 transitions.
[2020-11-25 14:42:51,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1634 states and 1778 transitions.
[2020-11-25 14:42:51,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1634 to 1634.
[2020-11-25 14:42:51,880 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1634 states.
[2020-11-25 14:42:51,885 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1634 states to 1634 states and 1778 transitions.
[2020-11-25 14:42:51,886 INFO  L751         BuchiCegarLoop]: Abstraction has 1634 states and 1778 transitions.
[2020-11-25 14:42:51,886 INFO  L631         BuchiCegarLoop]: Abstraction has 1634 states and 1778 transitions.
[2020-11-25 14:42:51,886 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:42:51,887 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1634 states and 1778 transitions.
[2020-11-25 14:42:51,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:51,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:51,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:51,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:51,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND TRUE   revert
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND TRUE   revert
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:42:51,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:42:51,900 INFO  L82        PathProgramCache]: Analyzing trace with hash -481442314, now seen corresponding path program 1 times
[2020-11-25 14:42:51,901 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:42:51,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:42:51,935 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:42:51,935 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:42:51,935 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:42:51,937 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:42:51,937 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:42:51,937 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:42:51,937 INFO  L87              Difference]: Start difference. First operand 1634 states and 1778 transitions. cyclomatic complexity: 146 Second operand 4 states.
[2020-11-25 14:42:52,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:42:52,179 INFO  L93              Difference]: Finished difference Result 2135 states and 2359 transitions.
[2020-11-25 14:42:52,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:42:52,180 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2135 states and 2359 transitions.
[2020-11-25 14:42:52,192 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:42:52,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2135 states to 2059 states and 2277 transitions.
[2020-11-25 14:42:52,204 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 14:42:52,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 14:42:52,205 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2059 states and 2277 transitions.
[2020-11-25 14:42:52,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:42:52,209 INFO  L728         BuchiCegarLoop]: Abstraction has 2059 states and 2277 transitions.
[2020-11-25 14:42:52,211 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2059 states and 2277 transitions.
[2020-11-25 14:42:52,234 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2059 to 1765.
[2020-11-25 14:42:52,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1765 states.
[2020-11-25 14:42:52,238 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1765 states to 1765 states and 1913 transitions.
[2020-11-25 14:42:52,239 INFO  L751         BuchiCegarLoop]: Abstraction has 1765 states and 1913 transitions.
[2020-11-25 14:42:52,239 INFO  L631         BuchiCegarLoop]: Abstraction has 1765 states and 1913 transitions.
[2020-11-25 14:42:52,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:42:52,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1765 states and 1913 transitions.
[2020-11-25 14:42:52,244 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:42:52,245 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:52,245 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:52,247 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:52,247 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:42:52,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:42:52,255 INFO  L82        PathProgramCache]: Analyzing trace with hash 822011615, now seen corresponding path program 1 times
[2020-11-25 14:42:52,256 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:42:52,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:42:52,499 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:42:52,499 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:42:52,499 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 14:42:52,500 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:42:52,500 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 14:42:52,500 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=203, Unknown=0, NotChecked=0, Total=240
[2020-11-25 14:42:52,500 INFO  L87              Difference]: Start difference. First operand 1765 states and 1913 transitions. cyclomatic complexity: 150 Second operand 16 states.
[2020-11-25 14:42:54,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:42:54,137 INFO  L93              Difference]: Finished difference Result 1834 states and 1994 transitions.
[2020-11-25 14:42:54,137 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:42:54,137 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1834 states and 1994 transitions.
[2020-11-25 14:42:54,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:42:54,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1834 states to 1834 states and 1994 transitions.
[2020-11-25 14:42:54,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 656
[2020-11-25 14:42:54,168 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 656
[2020-11-25 14:42:54,168 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1834 states and 1994 transitions.
[2020-11-25 14:42:54,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:42:54,170 INFO  L728         BuchiCegarLoop]: Abstraction has 1834 states and 1994 transitions.
[2020-11-25 14:42:54,171 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1834 states and 1994 transitions.
[2020-11-25 14:42:54,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1834 to 1682.
[2020-11-25 14:42:54,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1682 states.
[2020-11-25 14:42:54,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1682 states to 1682 states and 1805 transitions.
[2020-11-25 14:42:54,188 INFO  L751         BuchiCegarLoop]: Abstraction has 1682 states and 1805 transitions.
[2020-11-25 14:42:54,188 INFO  L631         BuchiCegarLoop]: Abstraction has 1682 states and 1805 transitions.
[2020-11-25 14:42:54,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:42:54,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1682 states and 1805 transitions.
[2020-11-25 14:42:54,191 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:54,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:54,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:54,193 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:54,193 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND TRUE   __exception
[L401]               __tmp__Balance := Balance;
[L402]               __tmp__DType := DType;
[L403]               __tmp__Alloc := Alloc;
[L404]               __tmp__balance_ADDR := balance_ADDR;
[L405]               __tmp__M_Ref_int := M_Ref_int;
[L406]               __tmp__sum_balances0 := sum_balances0;
[L407]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L408]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L409]               __tmp__sum_allowed1 := sum_allowed1;
[L410]               __tmp__Length := Length;
[L411]               __tmp__now := now;
[L412]               __tmp__name_Ducks := name_Ducks;
[L413]               __tmp__symbol_Ducks := symbol_Ducks;
[L414]               __tmp__decimals_Ducks := decimals_Ducks;
[L415]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L416]               __tmp__balances_Ducks := balances_Ducks;
[L417]               __tmp__allowed_Ducks := allowed_Ducks;
[L418]   CALL        call Ducks_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L1440]  CALL        call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1273]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1258]              assume msgsender_MSG != null;
[L1259]              __tmp__Balance[this] := 0;
[L1273]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1274]  COND FALSE  !(revert)
[L1440]  RET         call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1441]  COND FALSE  !(revert)
[L1444]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1305]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1290]              assume msgsender_MSG != null;
[L1291]              __tmp__Balance[this] := 0;
[L1305]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1306]  COND FALSE  !(revert)
[L1444]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1445]  COND FALSE  !(revert)
[L1448]  CALL        call Ducks_Ducks_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1394]              assume msgsender_MSG != null;
[L1395]              __tmp__Balance[this] := 0;
[L1396]              __tmp__name_Ducks[this] := 560717954;
[L1397]              __tmp__symbol_Ducks[this] := 560717954;
[L1398]              __tmp__decimals_Ducks[this] := 0;
[L1399]              __tmp___totalSupply_Ducks[this] := 0;
[L1400]              __tmp__balances_Ducks[this] := zeroRefintArr();
[L1401]              __tmp__sum_balances0[this] := 0;
[L1402]              __tmp__allowed_Ducks[this] := zeroRefRefintArr();
[L1403]              __tmp__sum_allowed1[this] := 0;
[L1405]              __tmp__name_Ducks[this] := 1576131613;
[L1406]              __tmp__symbol_Ducks[this] := -1943651461;
[L1407]              __tmp__decimals_Ducks[this] := 18;
[L1408]              __tmp___totalSupply_Ducks[this] := 1500000000000000000000000;
[L1409]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1410]              __tmp__balances_Ducks[this][msgsender_MSG] := __tmp___totalSupply_Ducks[this];
[L1411]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1448]  RET         call Ducks_Ducks_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1449]  COND FALSE  !(revert)
[L418]   RET         call Ducks_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L419]               assume revert || gas < 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:42:54,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:42:54,198 INFO  L82        PathProgramCache]: Analyzing trace with hash 428494502, now seen corresponding path program 1 times
[2020-11-25 14:42:54,198 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:42:54,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:42:54,224 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:42:54,224 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:42:54,224 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:42:54,224 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:42:54,225 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:42:54,225 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:42:54,225 INFO  L87              Difference]: Start difference. First operand 1682 states and 1805 transitions. cyclomatic complexity: 126 Second operand 4 states.
[2020-11-25 14:42:54,339 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:42:54,339 INFO  L93              Difference]: Finished difference Result 2257 states and 2532 transitions.
[2020-11-25 14:42:54,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:42:54,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2257 states and 2532 transitions.
[2020-11-25 14:42:54,347 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:42:54,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2257 states to 2179 states and 2454 transitions.
[2020-11-25 14:42:54,354 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 762
[2020-11-25 14:42:54,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 762
[2020-11-25 14:42:54,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2179 states and 2454 transitions.
[2020-11-25 14:42:54,357 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:42:54,357 INFO  L728         BuchiCegarLoop]: Abstraction has 2179 states and 2454 transitions.
[2020-11-25 14:42:54,359 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2179 states and 2454 transitions.
[2020-11-25 14:42:54,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2179 to 1604.
[2020-11-25 14:42:54,373 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1604 states.
[2020-11-25 14:42:54,375 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1604 states to 1604 states and 1726 transitions.
[2020-11-25 14:42:54,375 INFO  L751         BuchiCegarLoop]: Abstraction has 1604 states and 1726 transitions.
[2020-11-25 14:42:54,375 INFO  L631         BuchiCegarLoop]: Abstraction has 1604 states and 1726 transitions.
[2020-11-25 14:42:54,375 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:42:54,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1604 states and 1726 transitions.
[2020-11-25 14:42:54,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:42:54,378 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:42:54,378 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:42:54,380 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:42:54,380 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_Ducks0 := false;
[L2]                 call_transfer_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND TRUE   choice == 11
[L2769]              gas := gas - 21000;
[L2770]  COND TRUE   gas >= 0
[L2771]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2772]              assume msgvalue_MSG == 0;
[L2773]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s334 && (tokens_s334 > balances_Ducks[this][msgsender_MSG] || balances_Ducks[this][to_s334] + tokens_s334 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s334 >= 0) && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s334] >= 0) && balances_Ducks[this][to_s334] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][msgsender_MSG] >= 0) && balances_Ducks[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Ducks0 := true;
[L2]                 call_transfer_Ducks0 := false;
[L2]                 revert := revert_hold;
[L652]               havoc __exception;
[L653]               revert := false;
[L654]   COND FALSE  !(__exception)
[L675]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1563]  COND TRUE   DType[this] == Ducks
[L1564]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1564]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1565]  COND FALSE  !(revert)
[L1571]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1572]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1573]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1574]  COND TRUE   DType[this] == Ducks
[L1575]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1575]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1576]  COND FALSE  !(revert)
[L1582]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1583]              balances_Ducks[this][to_s334] := __var_3;
[L1584]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1585]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1586]              success_s334 := true;
[L675]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L676]               assume !revert && gas >= 0;
[L2773]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:42:54,383 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:42:54,383 INFO  L82        PathProgramCache]: Analyzing trace with hash -1636644695, now seen corresponding path program 1 times
[2020-11-25 14:42:54,384 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:42:54,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:42:54,497 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-11-25 14:42:54,497 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:42:54,497 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 14:42:54,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:42:54,498 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 14:42:54,498 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=130, Unknown=0, NotChecked=0, Total=156
[2020-11-25 14:42:54,498 INFO  L87              Difference]: Start difference. First operand 1604 states and 1726 transitions. cyclomatic complexity: 125 Second operand 13 states.
[2020-11-25 14:42:55,086 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:42:55,086 INFO  L93              Difference]: Finished difference Result 974 states and 1044 transitions.
[2020-11-25 14:42:55,086 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 14:42:55,086 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 974 states and 1044 transitions.
[2020-11-25 14:42:55,089 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:42:55,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 974 states to 0 states and 0 transitions.
[2020-11-25 14:42:55,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:42:55,090 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:42:55,090 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:42:55,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:42:55,090 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:42:55,090 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:42:55,090 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:42:55,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:42:55,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:42:55,090 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:42:55,090 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:42:55,093 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:42:55 BasicIcfg
[2020-11-25 14:42:55,093 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:42:55,093 INFO  L168              Benchmark]: Toolchain (without parser) took 5834.00 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 501.2 MB). Free memory was 940.6 MB in the beginning and 780.1 MB in the end (delta: 160.4 MB). Peak memory consumption was 661.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,094 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,094 INFO  L168              Benchmark]: Boogie Preprocessor took 79.85 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,095 INFO  L168              Benchmark]: UtopiaSpecLang took 49.75 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,095 INFO  L168              Benchmark]: Boogie Printer took 12.08 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,095 INFO  L168              Benchmark]: RCFGBuilder took 586.15 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,095 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.18 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,096 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1077.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.0 MB). Free memory was 845.7 MB in the beginning and 768.2 MB in the end (delta: 77.5 MB). Peak memory consumption was 141.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,096 INFO  L168              Benchmark]: BlockEncodingV2 took 130.36 ms. Allocated memory is still 1.1 GB. Free memory was 768.2 MB in the beginning and 727.2 MB in the end (delta: 41.0 MB). Peak memory consumption was 41.0 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,097 INFO  L168              Benchmark]: BuchiAutomizer took 3857.78 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 437.3 MB). Free memory was 727.2 MB in the beginning and 780.1 MB in the end (delta: -52.9 MB). Peak memory consumption was 384.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:42:55,099 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2496 locations, 4287 edges
  - StatisticsResult: Encoded RCFG
    2412 locations, 4088 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.85 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.75 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Printer took 12.08 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 586.15 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.18 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1077.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.0 MB). Free memory was 845.7 MB in the beginning and 768.2 MB in the end (delta: 77.5 MB). Peak memory consumption was 141.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 130.36 ms. Allocated memory is still 1.1 GB. Free memory was 768.2 MB in the beginning and 727.2 MB in the end (delta: 41.0 MB). Peak memory consumption was 41.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3857.78 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 437.3 MB). Free memory was 727.2 MB in the beginning and 780.1 MB in the end (delta: -52.9 MB). Peak memory consumption was 384.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1053 locations, 1325 edges
  - StatisticsResult: BuchiProgram size
    2496 locations, 4287 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.8s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.5s. Construction of modules took 2.0s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1021 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1765 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 8437 SDtfs, 8140 SDslu, 14511 SDs, 0 SdLazy, 23673 SolverSat, 1248 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_Ducks0) ==> ( <>(fail_transfer_Ducks0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
