This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:01:21,520 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:01:21,521 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:01:21,532 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:01:21,532 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:01:21,532 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:01:21,533 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:01:21,535 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:01:21,536 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:01:21,537 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:01:21,537 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:01:21,538 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:01:21,538 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:01:21,539 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:01:21,540 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:01:21,540 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:01:21,541 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:01:21,542 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:01:21,543 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:01:21,544 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:01:21,545 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:01:21,546 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:01:21,547 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:01:21,547 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:01:21,548 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:01:21,548 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:01:21,548 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:01:21,549 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:01:21,549 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:01:21,549 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:01:21,550 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:01:21,550 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:01:21,551 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:01:21,551 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:01:21,552 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:01:21,552 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:01:21,552 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:01:21,553 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:01:21,553 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:01:21,553 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:01:21,554 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:01:21,554 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:01:21,562 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:01:21,562 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:01:21,562 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:01:21,563 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:01:21,563 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:01:21,563 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:01:21,564 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:01:21,564 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:01:21,565 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:01:21,565 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:01:21,565 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:01:21,565 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:01:21,565 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:01:21,588 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:01:21,600 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:01:21,603 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:01:21,604 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:01:21,604 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:01:21,605 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl
[2020-11-25 15:01:21,605 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl'
[2020-11-25 15:01:21,705 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:01:21,706 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:01:21,707 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:01:21,707 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:01:21,707 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:01:21,723 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,724 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,757 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,758 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,784 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,797 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,807 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,820 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:01:21,821 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:01:21,821 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:01:21,823 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:01:21,827 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/1) ...
[2020-11-25 15:01:21,845 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 15:01:21,851 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 15:01:21,858 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 15:01:21,865 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s340 && ( _value_s340>balances_BasicToken[this][msg.sender] || ( balances_BasicToken[this][_to_s340] + _value_s340 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s340>=0 ) && _value_s340<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s340]>=0 ) && balances_BasicToken[this][_to_s340]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IdentifierExpression[_value_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s340,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:01:21,875 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 15:01:21,876 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(fail_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:01:21,891 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:01:21 PropertyContainer
[2020-11-25 15:01:21,891 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:01:21,891 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:01:21,891 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:01:21,891 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:01:21,892 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/2) ...
[2020-11-25 15:01:21,893 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:01:21,893 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:01:21,912 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:01:21" (2/2) ...
[2020-11-25 15:01:21,912 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:01:21,912 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:01:21,913 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:01:21,913 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:01:21,913 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/2) ...
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:01:21,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,965 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 15:01:21,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 15:01:21,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 15:01:21,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:01:21,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 15:01:21,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 15:01:21,967 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:01:21,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:01:21,968 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:01:21,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken
[2020-11-25 15:01:21,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:01:21,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:01:21,969 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 15:01:21,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 15:01:21,970 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 15:01:21,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 15:01:21,970 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:01:21,970 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:01:21,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 15:01:21,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 15:01:21,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU
[2020-11-25 15:01:21,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU
[2020-11-25 15:01:21,971 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU
[2020-11-25 15:01:21,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU
[2020-11-25 15:01:21,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU
[2020-11-25 15:01:21,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU
[2020-11-25 15:01:21,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:01:21,972 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 15:01:21,973 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ECU
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:01:21,974 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 15:01:21,975 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 15:01:21,976 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:01:21,976 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:01:21,976 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 15:01:21,976 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 15:01:21,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:01:21,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:01:21,977 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:01:21,977 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:01:21,978 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:01:21,978 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:01:21,978 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 15:01:21,978 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 15:01:21,978 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:01:21,979 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:01:21,979 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:01:21,979 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:01:21,979 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:01:21,979 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:01:21,980 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:01:21,980 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:01:21,980 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:01:21,980 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:01:21,980 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:01:21,981 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:01:21,981 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:01:21,981 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:01:21,981 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:01:21,981 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__success
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__fail
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:01:21,982 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:01:21,983 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:01:21,984 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:01:21,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__success
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__fail
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__success
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__fail
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__success
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__fail
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__success
[2020-11-25 15:01:21,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__fail
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__success
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__fail
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:01:21,987 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:01:21,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:01:21,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 15:01:21,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:01:21,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:01:21,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:01:21,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:01:21,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:01:21,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:01:21,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 15:01:21,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ECU
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:01:21,998 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:01:21,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:01:22,559 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:01:22,560 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:01:22,975 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:01:22,975 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 15:01:22,978 INFO  L202        PluginConnector]: Adding new model ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:01:22 BoogieIcfgContainer
[2020-11-25 15:01:22,978 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:01:21" (2/2) ...
[2020-11-25 15:01:22,978 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:01:22,978 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4cb733d7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:01:22, skipping insertion in model container
[2020-11-25 15:01:22,978 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:01:22,979 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:01:22,979 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:01:22,980 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:01:22,980 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/3) ...
[2020-11-25 15:01:22,980 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@fdef6d0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:01:22, skipping insertion in model container
[2020-11-25 15:01:22,980 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:01:21" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:01:23,015 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:01:23 NWAContainer
[2020-11-25 15:01:23,015 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:01:23,015 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:01:23,015 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:01:23,016 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:01:23,017 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:01:22" (3/4) ...
[2020-11-25 15:01:23,017 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3b6678f3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:01:23, skipping insertion in model container
[2020-11-25 15:01:23,018 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:01:23" (4/4) ...
[2020-11-25 15:01:23,020 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:01:23,025 INFO  L110   BuchiProductObserver]: Initial RCFG 2504 locations, 3474 edges
[2020-11-25 15:01:23,026 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:01:23,037 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:01:24,861 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:01:24,869 INFO  L110   BuchiProductObserver]: BuchiProgram size 6258 locations, 11456 edges
[2020-11-25 15:01:24,870 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:01:24 BoogieIcfgContainer
[2020-11-25 15:01:24,870 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:01:24,870 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:01:24,870 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:01:24,871 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:01:24,872 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:01:24" (1/1) ...
[2020-11-25 15:01:24,999 INFO  L313           BlockEncoder]: Initial Icfg 6258 locations, 11456 edges
[2020-11-25 15:01:24,999 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:01:25,000 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:01:25,000 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:01:25,000 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:01:25,015 INFO  L70    emoveInfeasibleEdges]: Removed 93 edges and 19 locations because of local infeasibility
[2020-11-25 15:01:25,027 INFO  L70        RemoveSinkStates]: Removed 68 edges and 36 locations by removing sink states
[2020-11-25 15:01:25,041 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:01:25,046 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:01:25,050 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:01:25,051 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:01:25,054 INFO  L313           BlockEncoder]: Encoded RCFG 6169 locations, 11245 edges
[2020-11-25 15:01:25,055 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:01:25 BasicIcfg
[2020-11-25 15:01:25,055 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:01:25,055 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:01:25,055 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:01:25,057 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:01:25,057 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,057 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:01:21" (1/6) ...
[2020-11-25 15:01:25,059 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d624c98 and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:01:25, skipping insertion in model container
[2020-11-25 15:01:25,059 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,059 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:01:21" (2/6) ...
[2020-11-25 15:01:25,059 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d624c98 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:01:25, skipping insertion in model container
[2020-11-25 15:01:25,059 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,059 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:01:22" (3/6) ...
[2020-11-25 15:01:25,059 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d624c98 and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:01:25, skipping insertion in model container
[2020-11-25 15:01:25,059 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,060 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:01:23" (4/6) ...
[2020-11-25 15:01:25,060 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d624c98 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:01:25, skipping insertion in model container
[2020-11-25 15:01:25,060 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,060 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:01:24" (5/6) ...
[2020-11-25 15:01:25,060 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d624c98 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:01:25, skipping insertion in model container
[2020-11-25 15:01:25,060 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:01:25,060 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:01:25" (6/6) ...
[2020-11-25 15:01:25,061 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transfer-fail.bpl_BEv2
[2020-11-25 15:01:25,087 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:01:25,088 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:01:25,088 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:01:25,088 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:01:25,088 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:01:25,088 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:01:25,088 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:01:25,088 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:01:25,088 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:01:25,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6169 states.
[2020-11-25 15:01:25,190 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:25,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:25,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:25,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:25,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:25,198 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:01:25,198 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6169 states.
[2020-11-25 15:01:25,222 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:25,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:25,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:25,224 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:25,225 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND TRUE   revert
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND TRUE   choice == 22
[L7089]              gas := gas - 21000;
[L7090]  COND FALSE  !(gas >= 0)
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:25,238 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:25,238 INFO  L82        PathProgramCache]: Analyzing trace with hash -597512550, now seen corresponding path program 1 times
[2020-11-25 15:01:25,242 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:25,260 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:25,299 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:01:25,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:25,301 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:01:25,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:25,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:01:25,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:01:25,770 INFO  L87              Difference]: Start difference. First operand 6169 states. Second operand 4 states.
[2020-11-25 15:01:26,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:26,307 INFO  L93              Difference]: Finished difference Result 3372 states and 3794 transitions.
[2020-11-25 15:01:26,307 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:01:26,309 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3372 states and 3794 transitions.
[2020-11-25 15:01:26,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:26,352 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3372 states to 3368 states and 3786 transitions.
[2020-11-25 15:01:26,353 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 15:01:26,356 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 15:01:26,356 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3368 states and 3786 transitions.
[2020-11-25 15:01:26,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:26,370 INFO  L728         BuchiCegarLoop]: Abstraction has 3368 states and 3786 transitions.
[2020-11-25 15:01:26,388 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3368 states and 3786 transitions.
[2020-11-25 15:01:26,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3368 to 3368.
[2020-11-25 15:01:26,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3368 states.
[2020-11-25 15:01:26,449 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3368 states to 3368 states and 3786 transitions.
[2020-11-25 15:01:26,449 INFO  L751         BuchiCegarLoop]: Abstraction has 3368 states and 3786 transitions.
[2020-11-25 15:01:26,449 INFO  L631         BuchiCegarLoop]: Abstraction has 3368 states and 3786 transitions.
[2020-11-25 15:01:26,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:01:26,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3368 states and 3786 transitions.
[2020-11-25 15:01:26,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:26,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:26,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:26,458 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:26,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND TRUE   revert
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND TRUE   !(_to_s340 != null)
[L3513]              revert := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND TRUE   !(_to_s340 != null)
[L3513]              revert := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:26,463 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:26,463 INFO  L82        PathProgramCache]: Analyzing trace with hash 364573512, now seen corresponding path program 1 times
[2020-11-25 15:01:26,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:26,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:26,511 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:01:26,511 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:26,511 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:01:26,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:26,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:01:26,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:01:26,513 INFO  L87              Difference]: Start difference. First operand 3368 states and 3786 transitions. cyclomatic complexity: 420 Second operand 4 states.
[2020-11-25 15:01:27,114 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:27,114 INFO  L93              Difference]: Finished difference Result 4057 states and 4506 transitions.
[2020-11-25 15:01:27,114 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:01:27,114 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4057 states and 4506 transitions.
[2020-11-25 15:01:27,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:01:27,145 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4057 states to 3961 states and 4398 transitions.
[2020-11-25 15:01:27,145 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-25 15:01:27,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-11-25 15:01:27,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3961 states and 4398 transitions.
[2020-11-25 15:01:27,153 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:27,153 INFO  L728         BuchiCegarLoop]: Abstraction has 3961 states and 4398 transitions.
[2020-11-25 15:01:27,157 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3961 states and 4398 transitions.
[2020-11-25 15:01:27,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3961 to 3549.
[2020-11-25 15:01:27,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3549 states.
[2020-11-25 15:01:27,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3549 states to 3549 states and 3881 transitions.
[2020-11-25 15:01:27,192 INFO  L751         BuchiCegarLoop]: Abstraction has 3549 states and 3881 transitions.
[2020-11-25 15:01:27,193 INFO  L631         BuchiCegarLoop]: Abstraction has 3549 states and 3881 transitions.
[2020-11-25 15:01:27,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:01:27,193 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3549 states and 3881 transitions.
[2020-11-25 15:01:27,199 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:01:27,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:27,200 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:27,203 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:27,203 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND TRUE   !allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this]
[L3438]              __ret_0_ := false;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND TRUE   !allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this]
[L3438]              __ret_0_ := false;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:27,210 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:27,210 INFO  L82        PathProgramCache]: Analyzing trace with hash -1245797505, now seen corresponding path program 1 times
[2020-11-25 15:01:27,211 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:27,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:27,399 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1312 trivial. 0 not checked.
[2020-11-25 15:01:27,400 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:27,400 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:01:27,400 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:27,401 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:01:27,401 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:01:27,401 INFO  L87              Difference]: Start difference. First operand 3549 states and 3881 transitions. cyclomatic complexity: 334 Second operand 4 states.
[2020-11-25 15:01:27,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:27,441 INFO  L93              Difference]: Finished difference Result 3571 states and 3915 transitions.
[2020-11-25 15:01:27,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:01:27,442 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3571 states and 3915 transitions.
[2020-11-25 15:01:27,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:01:27,458 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3571 states to 3553 states and 3891 transitions.
[2020-11-25 15:01:27,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1095
[2020-11-25 15:01:27,459 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1095
[2020-11-25 15:01:27,459 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3553 states and 3891 transitions.
[2020-11-25 15:01:27,462 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:27,462 INFO  L728         BuchiCegarLoop]: Abstraction has 3553 states and 3891 transitions.
[2020-11-25 15:01:27,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3553 states and 3891 transitions.
[2020-11-25 15:01:27,489 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3553 to 3553.
[2020-11-25 15:01:27,489 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3553 states.
[2020-11-25 15:01:27,492 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3553 states to 3553 states and 3891 transitions.
[2020-11-25 15:01:27,492 INFO  L751         BuchiCegarLoop]: Abstraction has 3553 states and 3891 transitions.
[2020-11-25 15:01:27,492 INFO  L631         BuchiCegarLoop]: Abstraction has 3553 states and 3891 transitions.
[2020-11-25 15:01:27,492 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:01:27,492 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3553 states and 3891 transitions.
[2020-11-25 15:01:27,497 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:01:27,497 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:27,497 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:27,499 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:27,499 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:27,504 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:27,504 INFO  L82        PathProgramCache]: Analyzing trace with hash -1739038734, now seen corresponding path program 1 times
[2020-11-25 15:01:27,505 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:27,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:27,905 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 37 proven. 0 refuted. 0 times theorem prover too weak. 1275 trivial. 0 not checked.
[2020-11-25 15:01:27,905 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:27,906 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 15:01:27,908 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:27,908 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 15:01:27,909 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=333, Unknown=0, NotChecked=0, Total=380
[2020-11-25 15:01:27,909 INFO  L87              Difference]: Start difference. First operand 3553 states and 3891 transitions. cyclomatic complexity: 340 Second operand 20 states.
[2020-11-25 15:01:30,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:30,875 INFO  L93              Difference]: Finished difference Result 3660 states and 4011 transitions.
[2020-11-25 15:01:30,875 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 15:01:30,875 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3660 states and 4011 transitions.
[2020-11-25 15:01:30,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:01:30,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3660 states to 3660 states and 4011 transitions.
[2020-11-25 15:01:30,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1111
[2020-11-25 15:01:30,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1111
[2020-11-25 15:01:30,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3660 states and 4011 transitions.
[2020-11-25 15:01:30,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:30,896 INFO  L728         BuchiCegarLoop]: Abstraction has 3660 states and 4011 transitions.
[2020-11-25 15:01:30,899 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3660 states and 4011 transitions.
[2020-11-25 15:01:30,925 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3660 to 3442.
[2020-11-25 15:01:30,925 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3442 states.
[2020-11-25 15:01:30,928 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3442 states to 3442 states and 3740 transitions.
[2020-11-25 15:01:30,928 INFO  L751         BuchiCegarLoop]: Abstraction has 3442 states and 3740 transitions.
[2020-11-25 15:01:30,928 INFO  L631         BuchiCegarLoop]: Abstraction has 3442 states and 3740 transitions.
[2020-11-25 15:01:30,928 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:01:30,928 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3442 states and 3740 transitions.
[2020-11-25 15:01:30,932 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:30,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:30,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:30,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:30,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND TRUE   __exception
[L1852]              __tmp__Balance := Balance;
[L1853]              __tmp__DType := DType;
[L1854]              __tmp__Alloc := Alloc;
[L1855]              __tmp__balance_ADDR := balance_ADDR;
[L1856]              __tmp__M_Ref_int := M_Ref_int;
[L1857]              __tmp__sum_balances0 := sum_balances0;
[L1858]              __tmp__M_Ref_bool := M_Ref_bool;
[L1859]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1860]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1861]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1862]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1863]              __tmp__sum_allowed3 := sum_allowed3;
[L1864]              __tmp__Length := Length;
[L1865]              __tmp__now := now;
[L1866]              __tmp__owner_Ownable := owner_Ownable;
[L1867]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1868]              __tmp__balances_BasicToken := balances_BasicToken;
[L1869]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1870]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1871]              __tmp__locked_BasicToken := locked_BasicToken;
[L1872]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1873]              __tmp__name_ECU := name_ECU;
[L1874]              __tmp__symbol_ECU := symbol_ECU;
[L1875]              __tmp__decimals_ECU := decimals_ECU;
[L1876]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1877]  CALL        call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L4118]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L4118]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4119]  COND FALSE  !(revert)
[L4122]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L4122]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4123]  COND FALSE  !(revert)
[L4126]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L4126]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4127]  COND FALSE  !(revert)
[L4130]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L4130]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4131]  COND FALSE  !(revert)
[L4134]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L4134]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4135]  COND FALSE  !(revert)
[L4138]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3964]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  COND FALSE  !(revert)
[L3968]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3968]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3969]  COND FALSE  !(revert)
[L3972]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3972]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3973]  COND FALSE  !(revert)
[L3976]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3976]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  COND FALSE  !(revert)
[L3980]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L3980]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]  COND FALSE  !(revert)
[L3984]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3949]              assume msgsender_MSG != null;
[L3950]              __tmp__Balance[this] := 0;
[L3984]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3985]  COND FALSE  !(revert)
[L4138]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              __tmp__Balance[this] := 0;
[L4082]              __tmp__name_ECU[this] := -2027621617;
[L4083]              __tmp__symbol_ECU[this] := 1342424742;
[L4084]              __tmp__decimals_ECU[this] := 18;
[L4085]              __var_15 := __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4086]              __tmp__initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4088]              __tmp__totalSupply_ERC20Basic[this] := __tmp__initialSupply_ECU[this];
[L4089]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4090]              __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509] := __tmp__initialSupply_ECU[this];
[L4091]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4092]              __tmp__allowedAddresses_BasicToken[this][__tmp__owner_Ownable[this]] := true;
[L4142]  RET         call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L1877]  RET         call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]              assume revert || gas < 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:30,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:30,941 INFO  L82        PathProgramCache]: Analyzing trace with hash 517245515, now seen corresponding path program 1 times
[2020-11-25 15:01:30,942 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:30,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:31,078 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1312 trivial. 0 not checked.
[2020-11-25 15:01:31,079 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:31,079 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:01:31,079 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:31,079 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:01:31,080 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:01:31,080 INFO  L87              Difference]: Start difference. First operand 3442 states and 3740 transitions. cyclomatic complexity: 301 Second operand 4 states.
[2020-11-25 15:01:31,340 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:31,340 INFO  L93              Difference]: Finished difference Result 4253 states and 4771 transitions.
[2020-11-25 15:01:31,340 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:01:31,340 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4253 states and 4771 transitions.
[2020-11-25 15:01:31,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:01:31,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4253 states to 4058 states and 4564 transitions.
[2020-11-25 15:01:31,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1257
[2020-11-25 15:01:31,366 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1257
[2020-11-25 15:01:31,366 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4058 states and 4564 transitions.
[2020-11-25 15:01:31,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:31,370 INFO  L728         BuchiCegarLoop]: Abstraction has 4058 states and 4564 transitions.
[2020-11-25 15:01:31,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4058 states and 4564 transitions.
[2020-11-25 15:01:31,393 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4058 to 3247.
[2020-11-25 15:01:31,393 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3247 states.
[2020-11-25 15:01:31,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3247 states to 3247 states and 3532 transitions.
[2020-11-25 15:01:31,396 INFO  L751         BuchiCegarLoop]: Abstraction has 3247 states and 3532 transitions.
[2020-11-25 15:01:31,396 INFO  L631         BuchiCegarLoop]: Abstraction has 3247 states and 3532 transitions.
[2020-11-25 15:01:31,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:01:31,397 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3247 states and 3532 transitions.
[2020-11-25 15:01:31,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:31,401 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:31,401 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:31,404 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:31,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND FALSE  !(choice == 9)
[L7174]  COND FALSE  !(choice == 8)
[L7181]  COND FALSE  !(choice == 7)
[L7188]  COND FALSE  !(choice == 6)
[L7195]  COND TRUE   choice == 5
[L7196]              gas := gas - 21000;
[L7197]  COND TRUE   gas >= 0
[L7198]              assume _value_s692 >= 0 && _value_s692 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7199]              assume msgvalue_MSG == 0;
[L7200]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L1755]              havoc __exception;
[L1756]              revert := false;
[L1757]  COND FALSE  !(__exception)
[L1786]  CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L4051]  COND FALSE  !(!(_value_s692 > 0))
[L4055]  COND FALSE  !(!(_value_s692 <= balances_BasicToken[this][msgsender_MSG]))
[L4059]              burner_s692 := msgsender_MSG;
[L4060]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][burner_s692], _value_s692);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4060]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][burner_s692], _value_s692);
[L4061]  COND FALSE  !(revert)
[L4064]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][burner_s692];
[L4065]              balances_BasicToken[this][burner_s692] := __var_13;
[L4066]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][burner_s692];
[L4067]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_ERC20Basic[this], _value_s692);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4067]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_ERC20Basic[this], _value_s692);
[L4068]  COND FALSE  !(revert)
[L4071]              totalSupply_ERC20Basic[this] := __var_14;
[L4072]              assert { :EventEmitted "Burn_BurnableToken" } true;
[L4073]              assert { :EventEmitted "Transfer_BurnableToken" } true;
[L1786]  RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L1787]              assume !revert && gas >= 0;
[L7200]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L7244]  RET         call CorralChoice_ECU(this);
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:31,410 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:31,410 INFO  L82        PathProgramCache]: Analyzing trace with hash -1526970760, now seen corresponding path program 1 times
[2020-11-25 15:01:31,411 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:31,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:32,251 INFO  L134       CoverageAnalysis]: Checked inductivity of 1383 backedges. 88 proven. 0 refuted. 0 times theorem prover too weak. 1295 trivial. 0 not checked.
[2020-11-25 15:01:32,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:32,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [34] imperfect sequences [] total 34
[2020-11-25 15:01:32,252 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:32,252 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 15:01:32,252 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=1089, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 15:01:32,252 INFO  L87              Difference]: Start difference. First operand 3247 states and 3532 transitions. cyclomatic complexity: 288 Second operand 35 states.
[2020-11-25 15:01:39,719 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:39,719 INFO  L93              Difference]: Finished difference Result 3394 states and 3718 transitions.
[2020-11-25 15:01:39,719 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 15:01:39,719 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3394 states and 3718 transitions.
[2020-11-25 15:01:39,724 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:39,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3394 states to 3394 states and 3718 transitions.
[2020-11-25 15:01:39,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1055
[2020-11-25 15:01:39,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1055
[2020-11-25 15:01:39,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3394 states and 3718 transitions.
[2020-11-25 15:01:39,736 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:39,736 INFO  L728         BuchiCegarLoop]: Abstraction has 3394 states and 3718 transitions.
[2020-11-25 15:01:39,738 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3394 states and 3718 transitions.
[2020-11-25 15:01:39,758 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3394 to 3331.
[2020-11-25 15:01:39,758 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3331 states.
[2020-11-25 15:01:39,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3331 states to 3331 states and 3650 transitions.
[2020-11-25 15:01:39,761 INFO  L751         BuchiCegarLoop]: Abstraction has 3331 states and 3650 transitions.
[2020-11-25 15:01:39,761 INFO  L631         BuchiCegarLoop]: Abstraction has 3331 states and 3650 transitions.
[2020-11-25 15:01:39,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:01:39,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3331 states and 3650 transitions.
[2020-11-25 15:01:39,764 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:01:39,764 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:39,764 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:39,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:39,766 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND FALSE  !(choice == 9)
[L7174]  COND FALSE  !(choice == 8)
[L7181]  COND FALSE  !(choice == 7)
[L7188]  COND FALSE  !(choice == 6)
[L7195]  COND TRUE   choice == 5
[L7196]              gas := gas - 21000;
[L7197]  COND TRUE   gas >= 0
[L7198]              assume _value_s692 >= 0 && _value_s692 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7199]              assume msgvalue_MSG == 0;
[L7200]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L1755]              havoc __exception;
[L1756]              revert := false;
[L1757]  COND FALSE  !(__exception)
[L1786]  CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L4051]  COND FALSE  !(!(_value_s692 > 0))
[L4055]  COND FALSE  !(!(_value_s692 <= balances_BasicToken[this][msgsender_MSG]))
[L4059]              burner_s692 := msgsender_MSG;
[L4060]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][burner_s692], _value_s692);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4060]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][burner_s692], _value_s692);
[L4061]  COND FALSE  !(revert)
[L4064]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][burner_s692];
[L4065]              balances_BasicToken[this][burner_s692] := __var_13;
[L4066]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][burner_s692];
[L4067]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_ERC20Basic[this], _value_s692);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4067]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_ERC20Basic[this], _value_s692);
[L4068]  COND FALSE  !(revert)
[L4071]              totalSupply_ERC20Basic[this] := __var_14;
[L4072]              assert { :EventEmitted "Burn_BurnableToken" } true;
[L4073]              assert { :EventEmitted "Transfer_BurnableToken" } true;
[L1786]  RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L1787]              assume !revert && gas >= 0;
[L7200]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s692);
[L7244]  RET         call CorralChoice_ECU(this);
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND FALSE  !(locked_BasicToken[this])
[L3441]  COND FALSE  !(lockedAddresses_BasicToken[this][_addr_s282])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND FALSE  !(locked_BasicToken[this])
[L3441]  COND FALSE  !(lockedAddresses_BasicToken[this][_addr_s282])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:39,771 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:39,771 INFO  L82        PathProgramCache]: Analyzing trace with hash -971740336, now seen corresponding path program 1 times
[2020-11-25 15:01:39,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:39,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:40,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 1383 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1358 trivial. 0 not checked.
[2020-11-25 15:01:40,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:40,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 15:01:40,007 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:40,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 15:01:40,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 15:01:40,008 INFO  L87              Difference]: Start difference. First operand 3331 states and 3650 transitions. cyclomatic complexity: 324 Second operand 14 states.
[2020-11-25 15:01:41,557 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:41,557 INFO  L93              Difference]: Finished difference Result 3369 states and 3725 transitions.
[2020-11-25 15:01:41,557 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 15:01:41,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3369 states and 3725 transitions.
[2020-11-25 15:01:41,563 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:01:41,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3369 states to 3369 states and 3725 transitions.
[2020-11-25 15:01:41,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1049
[2020-11-25 15:01:41,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1049
[2020-11-25 15:01:41,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3369 states and 3725 transitions.
[2020-11-25 15:01:41,574 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:41,574 INFO  L728         BuchiCegarLoop]: Abstraction has 3369 states and 3725 transitions.
[2020-11-25 15:01:41,577 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3369 states and 3725 transitions.
[2020-11-25 15:01:41,596 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3369 to 3365.
[2020-11-25 15:01:41,596 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3365 states.
[2020-11-25 15:01:41,600 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3365 states to 3365 states and 3715 transitions.
[2020-11-25 15:01:41,600 INFO  L751         BuchiCegarLoop]: Abstraction has 3365 states and 3715 transitions.
[2020-11-25 15:01:41,600 INFO  L631         BuchiCegarLoop]: Abstraction has 3365 states and 3715 transitions.
[2020-11-25 15:01:41,600 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:01:41,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3365 states and 3715 transitions.
[2020-11-25 15:01:41,603 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:01:41,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:41,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:41,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:41,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND FALSE  !(DType[this] == ECU)
[L3521]  COND TRUE   DType[this] == BurnableToken
[L3522]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3522]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3523]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:41,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:41,611 INFO  L82        PathProgramCache]: Analyzing trace with hash -1212955269, now seen corresponding path program 1 times
[2020-11-25 15:01:41,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:41,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:41,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 1388 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1387 trivial. 0 not checked.
[2020-11-25 15:01:41,797 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:41,797 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 15:01:41,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:41,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:01:41,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:01:41,798 INFO  L87              Difference]: Start difference. First operand 3365 states and 3715 transitions. cyclomatic complexity: 360 Second operand 6 states.
[2020-11-25 15:01:41,852 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:41,852 INFO  L93              Difference]: Finished difference Result 3489 states and 3845 transitions.
[2020-11-25 15:01:41,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 15:01:41,853 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3489 states and 3845 transitions.
[2020-11-25 15:01:41,859 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:01:41,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3489 states to 3323 states and 3655 transitions.
[2020-11-25 15:01:41,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1049
[2020-11-25 15:01:41,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1049
[2020-11-25 15:01:41,868 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3323 states and 3655 transitions.
[2020-11-25 15:01:41,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:41,870 INFO  L728         BuchiCegarLoop]: Abstraction has 3323 states and 3655 transitions.
[2020-11-25 15:01:41,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3323 states and 3655 transitions.
[2020-11-25 15:01:41,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3323 to 3323.
[2020-11-25 15:01:41,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3323 states.
[2020-11-25 15:01:41,893 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3323 states to 3323 states and 3655 transitions.
[2020-11-25 15:01:41,893 INFO  L751         BuchiCegarLoop]: Abstraction has 3323 states and 3655 transitions.
[2020-11-25 15:01:41,893 INFO  L631         BuchiCegarLoop]: Abstraction has 3323 states and 3655 transitions.
[2020-11-25 15:01:41,893 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 15:01:41,893 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3323 states and 3655 transitions.
[2020-11-25 15:01:41,896 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:01:41,896 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:01:41,896 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:01:41,898 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:01:41,898 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND TRUE   choice == 18
[L7113]              gas := gas - 21000;
[L7114]  COND TRUE   gas >= 0
[L7115]              assume _value_s340 >= 0 && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7116]              assume msgvalue_MSG == 0;
[L7117]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s340 && (_value_s340 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s340] + _value_s340 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s340 >= 0) && _value_s340 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s340] >= 0) && balances_BasicToken[this][_to_s340] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L3511]              __var_2 := null;
[L3512]  COND FALSE  !(!(_to_s340 != null))
[L3516]  COND TRUE   DType[this] == ECU
[L3517]  CALL        call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3517]  RET         call __var_3 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3518]  COND FALSE  !(revert)
[L3539]  COND FALSE  !(!__var_3)
[L3543]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3543]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s340);
[L3544]  COND FALSE  !(revert)
[L3547]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3548]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L3549]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3550]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3550]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s340], _value_s340);
[L3551]  COND FALSE  !(revert)
[L3554]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s340];
[L3555]              balances_BasicToken[this][_to_s340] := __var_5;
[L3556]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s340];
[L3557]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3558]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L882]               assume !revert && gas >= 0;
[L7117]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s340, _value_s340);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:01:41,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:01:41,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 1276827208, now seen corresponding path program 1 times
[2020-11-25 15:01:41,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:01:41,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:01:42,199 INFO  L134       CoverageAnalysis]: Checked inductivity of 1388 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1386 trivial. 0 not checked.
[2020-11-25 15:01:42,199 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:01:42,199 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 15:01:42,200 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:01:42,200 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:01:42,200 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:01:42,200 INFO  L87              Difference]: Start difference. First operand 3323 states and 3655 transitions. cyclomatic complexity: 342 Second operand 13 states.
[2020-11-25 15:01:43,237 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:01:43,237 INFO  L93              Difference]: Finished difference Result 1942 states and 2153 transitions.
[2020-11-25 15:01:43,237 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 15:01:43,237 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1942 states and 2153 transitions.
[2020-11-25 15:01:43,240 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:01:43,240 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1942 states to 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:01:43,240 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:01:43,240 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:01:43,240 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 15:01:43,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:01:43,240 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:01:43,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:01:43,243 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:01:43 BasicIcfg
[2020-11-25 15:01:43,243 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:01:43,244 INFO  L168              Benchmark]: Toolchain (without parser) took 21538.19 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 72.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,245 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,245 INFO  L168              Benchmark]: Boogie Preprocessor took 114.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,245 INFO  L168              Benchmark]: UtopiaSpecLang took 69.98 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,245 INFO  L168              Benchmark]: Boogie Printer took 21.03 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,246 INFO  L168              Benchmark]: RCFGBuilder took 1065.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 903.0 MB in the beginning and 986.4 MB in the end (delta: -83.5 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,246 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.62 ms. Allocated memory is still 1.1 GB. Free memory was 986.4 MB in the beginning and 979.1 MB in the end (delta: 7.3 MB). Peak memory consumption was 7.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,246 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1854.39 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 979.1 MB in the beginning and 792.2 MB in the end (delta: 187.0 MB). Peak memory consumption was 481.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,246 INFO  L168              Benchmark]: BlockEncodingV2 took 185.15 ms. Allocated memory is still 1.3 GB. Free memory was 792.2 MB in the beginning and 695.2 MB in the end (delta: 97.0 MB). Peak memory consumption was 97.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,247 INFO  L168              Benchmark]: BuchiAutomizer took 18188.20 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 695.2 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:01:43,249 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6258 locations, 11456 edges
  - StatisticsResult: Encoded RCFG
    6169 locations, 11245 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 114.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 69.98 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.03 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1065.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 903.0 MB in the beginning and 986.4 MB in the end (delta: -83.5 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.62 ms. Allocated memory is still 1.1 GB. Free memory was 986.4 MB in the beginning and 979.1 MB in the end (delta: 7.3 MB). Peak memory consumption was 7.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1854.39 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 979.1 MB in the beginning and 792.2 MB in the end (delta: 187.0 MB). Peak memory consumption was 481.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 185.15 ms. Allocated memory is still 1.3 GB. Free memory was 792.2 MB in the beginning and 695.2 MB in the end (delta: 97.0 MB). Peak memory consumption was 97.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 18188.20 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 695.2 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2504 locations, 3474 edges
  - StatisticsResult: BuchiProgram size
    6258 locations, 11456 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 35 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 18.1s and 10 iterations.  TraceHistogramMax:12. Analysis of lassos took 2.9s. Construction of modules took 11.2s. BÃ¼chi inclusion checks took 3.3s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 8 MinimizatonAttempts, 1508 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3553 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30337 SDtfs, 25543 SDslu, 72188 SDs, 0 SdLazy, 158478 SolverSat, 3735 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 11.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(fail_transfer_BasicToken0)asicToken0) ==> ( <>(fail_transfer_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
