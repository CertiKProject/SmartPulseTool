This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 04:15:50,516 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 04:15:50,517 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 04:15:50,529 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 04:15:50,530 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 04:15:50,531 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 04:15:50,533 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 04:15:50,534 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 04:15:50,536 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 04:15:50,537 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 04:15:50,537 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 04:15:50,538 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 04:15:50,538 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 04:15:50,539 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 04:15:50,540 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 04:15:50,541 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 04:15:50,541 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 04:15:50,543 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 04:15:50,544 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 04:15:50,546 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 04:15:50,547 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 04:15:50,547 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 04:15:50,549 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 04:15:50,549 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 04:15:50,550 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 04:15:50,550 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 04:15:50,550 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 04:15:50,551 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 04:15:50,551 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 04:15:50,552 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 04:15:50,552 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 04:15:50,553 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 04:15:50,553 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 04:15:50,554 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 04:15:50,554 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 04:15:50,555 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 04:15:50,555 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 04:15:50,555 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 04:15:50,555 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 04:15:50,556 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 04:15:50,557 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 04:15:50,557 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 04:15:50,565 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 04:15:50,565 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 04:15:50,566 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 04:15:50,566 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 04:15:50,566 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 04:15:50,567 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 04:15:50,567 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 04:15:50,567 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 04:15:50,567 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 04:15:50,568 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 04:15:50,568 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 04:15:50,569 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 04:15:50,569 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 04:15:50,592 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 04:15:50,604 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 04:15:50,607 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 04:15:50,608 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 04:15:50,609 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 04:15:50,609 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl
[2020-11-25 04:15:50,610 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl'
[2020-11-25 04:15:50,674 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 04:15:50,675 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 04:15:50,676 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 04:15:50,676 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 04:15:50,676 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 04:15:50,692 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,694 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,719 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,720 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,737 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,744 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,748 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,758 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 04:15:50,759 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 04:15:50,759 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 04:15:50,763 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 04:15:50,767 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/1) ...
[2020-11-25 04:15:50,781 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiToken.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiToken[this][msg.sender] || balanceOf_SpaghettiToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiToken.transfer)))
[2020-11-25 04:15:50,786 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiToken.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiToken[this][msg.sender] || balanceOf_SpaghettiToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiToken.transfer)))
[2020-11-25 04:15:50,794 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiToken.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiToken[this][msg.sender] || balanceOf_SpaghettiToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiToken.transfer)))
[2020-11-25 04:15:50,799 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=dst_s194 && ( wad_s194>balanceOf_SpaghettiToken[this][msg.sender] || ( balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && wad_s194>=0 ) && wad_s194<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][dst_s194]>=0 ) && balanceOf_SpaghettiToken[this][dst_s194]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][msg.sender]>=0 ) && balanceOf_SpaghettiToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 04:15:50,804 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiToken.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiToken[this][msg.sender] || balanceOf_SpaghettiToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiToken.transfer)))
[2020-11-25 04:15:50,804 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_SpaghettiToken0) ==> ( <>AP(fail_transfer_SpaghettiToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 04:15:50,809 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:50 PropertyContainer
[2020-11-25 04:15:50,810 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 04:15:50,810 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 04:15:50,810 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 04:15:50,810 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 04:15:50,811 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/2) ...
[2020-11-25 04:15:50,811 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 04:15:50,811 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 04:15:50,819 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:50" (2/2) ...
[2020-11-25 04:15:50,820 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 04:15:50,820 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 04:15:50,820 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 04:15:50,820 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 04:15:50,821 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/2) ...
[2020-11-25 04:15:50,874 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 04:15:50,874 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:50,874 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 04:15:50,874 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 04:15:50,874 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,875 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken
[2020-11-25 04:15:50,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 04:15:50,877 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,878 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:50,879 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__success
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:50,880 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 04:15:50,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:50,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:50,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 04:15:50,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 04:15:50,884 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 04:15:50,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 04:15:51,295 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:51,296 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:51,400 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 04:15:51,400 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 04:15:51,402 INFO  L202        PluginConnector]: Adding new model SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:51 BoogieIcfgContainer
[2020-11-25 04:15:51,402 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:50" (2/2) ...
[2020-11-25 04:15:51,402 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 04:15:51,403 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3b564071 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:51, skipping insertion in model container
[2020-11-25 04:15:51,403 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 04:15:51,403 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:51,403 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 04:15:51,405 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 04:15:51,405 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/3) ...
[2020-11-25 04:15:51,405 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@84ce756 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:51, skipping insertion in model container
[2020-11-25 04:15:51,406 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 04:15:51,442 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:51 NWAContainer
[2020-11-25 04:15:51,442 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:51,442 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:51,442 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 04:15:51,443 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 04:15:51,444 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:51" (3/4) ...
[2020-11-25 04:15:51,445 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1bde843c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:51, skipping insertion in model container
[2020-11-25 04:15:51,445 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:51" (4/4) ...
[2020-11-25 04:15:51,448 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 04:15:51,451 INFO  L110   BuchiProductObserver]: Initial RCFG 748 locations, 937 edges
[2020-11-25 04:15:51,451 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 04:15:51,462 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 04:15:52,396 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 04:15:52,398 INFO  L110   BuchiProductObserver]: BuchiProgram size 1784 locations, 3025 edges
[2020-11-25 04:15:52,398 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:52 BoogieIcfgContainer
[2020-11-25 04:15:52,399 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:52,399 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 04:15:52,399 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 04:15:52,400 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 04:15:52,401 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:52" (1/1) ...
[2020-11-25 04:15:52,442 INFO  L313           BlockEncoder]: Initial Icfg 1784 locations, 3025 edges
[2020-11-25 04:15:52,442 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 04:15:52,442 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:52,442 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 04:15:52,443 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 04:15:52,449 INFO  L70    emoveInfeasibleEdges]: Removed 60 edges and 8 locations because of local infeasibility
[2020-11-25 04:15:52,453 INFO  L70        RemoveSinkStates]: Removed 110 edges and 60 locations by removing sink states
[2020-11-25 04:15:52,458 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 04:15:52,460 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 04:15:52,461 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 04:15:52,462 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 04:15:52,464 INFO  L313           BlockEncoder]: Encoded RCFG 1706 locations, 2841 edges
[2020-11-25 04:15:52,464 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:52 BasicIcfg
[2020-11-25 04:15:52,464 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 04:15:52,465 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 04:15:52,465 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 04:15:52,466 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 04:15:52,467 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,467 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:50" (1/6) ...
[2020-11-25 04:15:52,468 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ef4ac44 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:52, skipping insertion in model container
[2020-11-25 04:15:52,468 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,468 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:50" (2/6) ...
[2020-11-25 04:15:52,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ef4ac44 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:52, skipping insertion in model container
[2020-11-25 04:15:52,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:51" (3/6) ...
[2020-11-25 04:15:52,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ef4ac44 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:15:52, skipping insertion in model container
[2020-11-25 04:15:52,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:51" (4/6) ...
[2020-11-25 04:15:52,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ef4ac44 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:52, skipping insertion in model container
[2020-11-25 04:15:52,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:52" (5/6) ...
[2020-11-25 04:15:52,469 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ef4ac44 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:15:52, skipping insertion in model container
[2020-11-25 04:15:52,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:52,470 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:52" (6/6) ...
[2020-11-25 04:15:52,470 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-fail.bpl_BEv2
[2020-11-25 04:15:52,501 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 04:15:52,502 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 04:15:52,502 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 04:15:52,502 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 04:15:52,502 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 04:15:52,502 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 04:15:52,502 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 04:15:52,502 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 04:15:52,502 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 04:15:52,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1706 states.
[2020-11-25 04:15:52,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:52,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:52,562 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:52,571 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:52,571 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:52,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 04:15:52,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1706 states.
[2020-11-25 04:15:52,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:52,584 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:52,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:52,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:52,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND TRUE   revert
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:52,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:52,603 INFO  L82        PathProgramCache]: Analyzing trace with hash -1181808443, now seen corresponding path program 1 times
[2020-11-25 04:15:52,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:52,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:52,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:52,677 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:52,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:52,681 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:52,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:52,793 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:52,796 INFO  L87              Difference]: Start difference. First operand 1706 states. Second operand 4 states.
[2020-11-25 04:15:53,207 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:53,207 INFO  L93              Difference]: Finished difference Result 1858 states and 2900 transitions.
[2020-11-25 04:15:53,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:53,209 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1858 states and 2900 transitions.
[2020-11-25 04:15:53,224 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:53,246 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1858 states to 1794 states and 2795 transitions.
[2020-11-25 04:15:53,247 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 04:15:53,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 04:15:53,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1794 states and 2795 transitions.
[2020-11-25 04:15:53,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:53,263 INFO  L728         BuchiCegarLoop]: Abstraction has 1794 states and 2795 transitions.
[2020-11-25 04:15:53,280 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1794 states and 2795 transitions.
[2020-11-25 04:15:53,329 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1794 to 1540.
[2020-11-25 04:15:53,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1540 states.
[2020-11-25 04:15:53,336 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1540 states to 1540 states and 2330 transitions.
[2020-11-25 04:15:53,337 INFO  L751         BuchiCegarLoop]: Abstraction has 1540 states and 2330 transitions.
[2020-11-25 04:15:53,337 INFO  L631         BuchiCegarLoop]: Abstraction has 1540 states and 2330 transitions.
[2020-11-25 04:15:53,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 04:15:53,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1540 states and 2330 transitions.
[2020-11-25 04:15:53,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:53,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:53,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:53,346 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:53,346 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:53,352 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:53,352 INFO  L82        PathProgramCache]: Analyzing trace with hash -678695713, now seen corresponding path program 1 times
[2020-11-25 04:15:53,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:53,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:53,379 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:53,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:53,380 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:53,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:53,381 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:53,381 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:53,382 INFO  L87              Difference]: Start difference. First operand 1540 states and 2330 transitions. cyclomatic complexity: 792 Second operand 4 states.
[2020-11-25 04:15:53,617 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:53,617 INFO  L93              Difference]: Finished difference Result 1300 states and 1396 transitions.
[2020-11-25 04:15:53,618 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:53,618 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1300 states and 1396 transitions.
[2020-11-25 04:15:53,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:53,630 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1300 states to 1300 states and 1396 transitions.
[2020-11-25 04:15:53,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 397
[2020-11-25 04:15:53,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 397
[2020-11-25 04:15:53,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1300 states and 1396 transitions.
[2020-11-25 04:15:53,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:53,632 INFO  L728         BuchiCegarLoop]: Abstraction has 1300 states and 1396 transitions.
[2020-11-25 04:15:53,633 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1300 states and 1396 transitions.
[2020-11-25 04:15:53,642 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1300 to 1292.
[2020-11-25 04:15:53,643 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1292 states.
[2020-11-25 04:15:53,645 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1292 states to 1292 states and 1388 transitions.
[2020-11-25 04:15:53,645 INFO  L751         BuchiCegarLoop]: Abstraction has 1292 states and 1388 transitions.
[2020-11-25 04:15:53,645 INFO  L631         BuchiCegarLoop]: Abstraction has 1292 states and 1388 transitions.
[2020-11-25 04:15:53,645 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 04:15:53,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1292 states and 1388 transitions.
[2020-11-25 04:15:53,648 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:53,648 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:53,648 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:53,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:53,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:53,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:53,655 INFO  L82        PathProgramCache]: Analyzing trace with hash -1130364886, now seen corresponding path program 1 times
[2020-11-25 04:15:53,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:53,675 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:53,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 04:15:53,954 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:53,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 04:15:53,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:53,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 04:15:53,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=263, Unknown=0, NotChecked=0, Total=306
[2020-11-25 04:15:53,955 INFO  L87              Difference]: Start difference. First operand 1292 states and 1388 transitions. cyclomatic complexity: 98 Second operand 18 states.
[2020-11-25 04:15:55,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:55,725 INFO  L93              Difference]: Finished difference Result 1391 states and 1501 transitions.
[2020-11-25 04:15:55,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 04:15:55,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1391 states and 1501 transitions.
[2020-11-25 04:15:55,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:55,733 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1391 states to 1391 states and 1501 transitions.
[2020-11-25 04:15:55,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 415
[2020-11-25 04:15:55,734 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 415
[2020-11-25 04:15:55,734 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1391 states and 1501 transitions.
[2020-11-25 04:15:55,735 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:55,736 INFO  L728         BuchiCegarLoop]: Abstraction has 1391 states and 1501 transitions.
[2020-11-25 04:15:55,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1391 states and 1501 transitions.
[2020-11-25 04:15:55,746 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1391 to 1336.
[2020-11-25 04:15:55,746 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1336 states.
[2020-11-25 04:15:55,748 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1336 states to 1336 states and 1437 transitions.
[2020-11-25 04:15:55,748 INFO  L751         BuchiCegarLoop]: Abstraction has 1336 states and 1437 transitions.
[2020-11-25 04:15:55,748 INFO  L631         BuchiCegarLoop]: Abstraction has 1336 states and 1437 transitions.
[2020-11-25 04:15:55,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 04:15:55,749 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1336 states and 1437 transitions.
[2020-11-25 04:15:55,751 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:55,751 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:55,751 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:55,753 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:55,753 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND TRUE   __exception
[L147]               __tmp__Balance := Balance;
[L148]               __tmp__DType := DType;
[L149]               __tmp__Alloc := Alloc;
[L150]               __tmp__balance_ADDR := balance_ADDR;
[L151]               __tmp__M_Ref_int := M_Ref_int;
[L152]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L153]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L154]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L155]               __tmp__sum_allowance1 := sum_allowance1;
[L156]               __tmp__Length := Length;
[L157]               __tmp__now := now;
[L158]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L159]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L160]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L161]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L162]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L163]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L164]   CALL        call SpaghettiToken_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1098]  CALL        call DSMath_DSMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L988]   CALL        call DSMath_DSMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L973]               assume msgsender_MSG != null;
[L974]               __tmp__Balance[this] := 0;
[L988]   RET         call DSMath_DSMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L989]   COND FALSE  !(revert)
[L1098]  RET         call DSMath_DSMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1099]  COND FALSE  !(revert)
[L1102]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1059]              assume msgsender_MSG != null;
[L1060]              __tmp__Balance[this] := 0;
[L1061]              __tmp__totalSupply_SpaghettiToken[this] := 0;
[L1062]              __tmp__balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1063]              __tmp__sum_balanceOf0[this] := 0;
[L1064]              __tmp__allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1065]              __tmp__sum_allowance1[this] := 0;
[L1066]              __tmp__symbol_SpaghettiToken[this] := 2010503932;
[L1067]              __tmp__decimals_SpaghettiToken[this] := 18;
[L1068]              __tmp__name_SpaghettiToken[this] := 408148383;
[L1070]              __tmp__totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1071]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][chef_s113];
[L1072]              __tmp__balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1073]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][chef_s113];
[L1102]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1103]  COND FALSE  !(revert)
[L164]   RET         call SpaghettiToken_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L165]               assume revert || gas < 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:55,755 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:55,755 INFO  L82        PathProgramCache]: Analyzing trace with hash -1358969016, now seen corresponding path program 1 times
[2020-11-25 04:15:55,756 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:55,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:55,785 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 04:15:55,785 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:55,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:55,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:55,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:55,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:55,786 INFO  L87              Difference]: Start difference. First operand 1336 states and 1437 transitions. cyclomatic complexity: 104 Second operand 4 states.
[2020-11-25 04:15:55,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:55,869 INFO  L93              Difference]: Finished difference Result 1580 states and 1749 transitions.
[2020-11-25 04:15:55,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:55,871 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1580 states and 1749 transitions.
[2020-11-25 04:15:55,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 04:15:55,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1580 states to 1519 states and 1688 transitions.
[2020-11-25 04:15:55,889 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 433
[2020-11-25 04:15:55,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 433
[2020-11-25 04:15:55,889 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1519 states and 1688 transitions.
[2020-11-25 04:15:55,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:55,891 INFO  L728         BuchiCegarLoop]: Abstraction has 1519 states and 1688 transitions.
[2020-11-25 04:15:55,893 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1519 states and 1688 transitions.
[2020-11-25 04:15:55,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1519 to 1275.
[2020-11-25 04:15:55,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1275 states.
[2020-11-25 04:15:55,905 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1275 states to 1275 states and 1375 transitions.
[2020-11-25 04:15:55,905 INFO  L751         BuchiCegarLoop]: Abstraction has 1275 states and 1375 transitions.
[2020-11-25 04:15:55,905 INFO  L631         BuchiCegarLoop]: Abstraction has 1275 states and 1375 transitions.
[2020-11-25 04:15:55,905 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 04:15:55,905 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1275 states and 1375 transitions.
[2020-11-25 04:15:55,908 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:55,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:55,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:55,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:55,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND TRUE   choice == 3
[L1987]              gas := gas - 21000;
[L1988]  COND TRUE   gas >= 0
[L1989]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1990]              assume msgvalue_MSG == 0;
[L1991]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1157]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1158]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1159]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1160]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1161]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L272]               assume !revert && gas >= 0;
[L1991]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:55,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:55,912 INFO  L82        PathProgramCache]: Analyzing trace with hash 1154636312, now seen corresponding path program 1 times
[2020-11-25 04:15:55,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:55,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:56,084 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-11-25 04:15:56,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:56,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 04:15:56,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:56,084 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 04:15:56,084 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 04:15:56,085 INFO  L87              Difference]: Start difference. First operand 1275 states and 1375 transitions. cyclomatic complexity: 103 Second operand 14 states.
[2020-11-25 04:15:56,898 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:56,898 INFO  L93              Difference]: Finished difference Result 1308 states and 1413 transitions.
[2020-11-25 04:15:56,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 04:15:56,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1308 states and 1413 transitions.
[2020-11-25 04:15:56,902 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:56,906 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1308 states to 1308 states and 1413 transitions.
[2020-11-25 04:15:56,906 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 407
[2020-11-25 04:15:56,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 407
[2020-11-25 04:15:56,907 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1308 states and 1413 transitions.
[2020-11-25 04:15:56,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:56,908 INFO  L728         BuchiCegarLoop]: Abstraction has 1308 states and 1413 transitions.
[2020-11-25 04:15:56,909 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1308 states and 1413 transitions.
[2020-11-25 04:15:56,917 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1308 to 1269.
[2020-11-25 04:15:56,918 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1269 states.
[2020-11-25 04:15:56,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1269 states to 1269 states and 1369 transitions.
[2020-11-25 04:15:56,919 INFO  L751         BuchiCegarLoop]: Abstraction has 1269 states and 1369 transitions.
[2020-11-25 04:15:56,919 INFO  L631         BuchiCegarLoop]: Abstraction has 1269 states and 1369 transitions.
[2020-11-25 04:15:56,919 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 04:15:56,919 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1269 states and 1369 transitions.
[2020-11-25 04:15:56,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:56,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:56,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:56,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:56,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND FALSE  !(choice == 2)
[L2000]  COND TRUE   choice == 1
[L2001]              gas := gas - 21000;
[L2002]  COND TRUE   gas >= 0
[L2003]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2004]              assume msgvalue_MSG == 0;
[L2005]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L358]               havoc __exception;
[L359]               revert := false;
[L360]   COND FALSE  !(__exception)
[L381]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L381]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L382]               assume !revert && gas >= 0;
[L2005]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:56,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:56,927 INFO  L82        PathProgramCache]: Analyzing trace with hash -1761484698, now seen corresponding path program 1 times
[2020-11-25 04:15:56,927 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:56,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:59,341 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 110 DAG size of output: 83
[2020-11-25 04:15:59,486 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 85
[2020-11-25 04:16:00,718 WARN  L188               SmtUtils]: Spent 935.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 126
[2020-11-25 04:16:02,395 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification. DAG size of input: 263 DAG size of output: 128
[2020-11-25 04:16:04,552 WARN  L188               SmtUtils]: Spent 1.82 s on a formula simplification. DAG size of input: 213 DAG size of output: 147
[2020-11-25 04:16:05,229 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 85 DAG size of output: 70
[2020-11-25 04:16:05,736 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification. DAG size of input: 85 DAG size of output: 64
[2020-11-25 04:16:07,314 WARN  L188               SmtUtils]: Spent 1.05 s on a formula simplification. DAG size of input: 235 DAG size of output: 76
[2020-11-25 04:16:09,013 WARN  L188               SmtUtils]: Spent 811.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 112
[2020-11-25 04:16:12,084 WARN  L188               SmtUtils]: Spent 2.04 s on a formula simplification. DAG size of input: 245 DAG size of output: 158
[2020-11-25 04:16:13,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 5 proven. 13 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 04:16:13,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:16:13,238 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-11-25 04:16:13,238 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:16:13,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-11-25 04:16:13,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=2407, Unknown=0, NotChecked=0, Total=2550
[2020-11-25 04:16:13,239 INFO  L87              Difference]: Start difference. First operand 1269 states and 1369 transitions. cyclomatic complexity: 103 Second operand 51 states.
[2020-11-25 04:16:14,492 WARN  L188               SmtUtils]: Spent 707.00 ms on a formula simplification that was a NOOP. DAG size: 234
[2020-11-25 04:16:15,405 WARN  L188               SmtUtils]: Spent 659.00 ms on a formula simplification that was a NOOP. DAG size: 237
[2020-11-25 04:18:28,092 WARN  L188               SmtUtils]: Spent 2.12 m on a formula simplification. DAG size of input: 233 DAG size of output: 173
[2020-11-25 04:18:35,280 WARN  L188               SmtUtils]: Spent 2.14 s on a formula simplification. DAG size of input: 286 DAG size of output: 269
[2020-11-25 04:18:38,356 WARN  L188               SmtUtils]: Spent 2.52 s on a formula simplification. DAG size of input: 309 DAG size of output: 288
[2020-11-25 04:18:55,347 WARN  L188               SmtUtils]: Spent 764.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 88
[2020-11-25 04:19:04,359 WARN  L188               SmtUtils]: Spent 3.24 s on a formula simplification. DAG size of input: 340 DAG size of output: 311
[2020-11-25 04:20:26,707 WARN  L188               SmtUtils]: Spent 1.33 m on a formula simplification. DAG size of input: 398 DAG size of output: 355
[2020-11-25 04:20:29,432 WARN  L188               SmtUtils]: Spent 344.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 120
[2020-11-25 04:21:00,501 WARN  L188               SmtUtils]: Spent 694.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 89
[2020-11-25 04:21:04,419 WARN  L188               SmtUtils]: Spent 1.54 s on a formula simplification. DAG size of input: 256 DAG size of output: 249
[2020-11-25 04:21:06,772 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 65 DAG size of output: 65
[2020-11-25 04:21:08,160 WARN  L188               SmtUtils]: Spent 689.00 ms on a formula simplification. DAG size of input: 93 DAG size of output: 92
[2020-11-25 04:21:17,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:21:17,669 INFO  L93              Difference]: Finished difference Result 1454 states and 1590 transitions.
[2020-11-25 04:21:17,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 04:21:17,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1454 states and 1590 transitions.
[2020-11-25 04:21:17,673 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:17,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1454 states to 1454 states and 1590 transitions.
[2020-11-25 04:21:17,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 428
[2020-11-25 04:21:17,677 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 428
[2020-11-25 04:21:17,677 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1454 states and 1590 transitions.
[2020-11-25 04:21:17,678 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:21:17,679 INFO  L728         BuchiCegarLoop]: Abstraction has 1454 states and 1590 transitions.
[2020-11-25 04:21:17,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1454 states and 1590 transitions.
[2020-11-25 04:21:17,687 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1454 to 1316.
[2020-11-25 04:21:17,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1316 states.
[2020-11-25 04:21:17,688 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1316 states to 1316 states and 1431 transitions.
[2020-11-25 04:21:17,688 INFO  L751         BuchiCegarLoop]: Abstraction has 1316 states and 1431 transitions.
[2020-11-25 04:21:17,688 INFO  L631         BuchiCegarLoop]: Abstraction has 1316 states and 1431 transitions.
[2020-11-25 04:21:17,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 04:21:17,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1316 states and 1431 transitions.
[2020-11-25 04:21:17,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:17,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:21:17,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:21:17,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:21:17,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND FALSE  !(choice == 2)
[L2000]  COND TRUE   choice == 1
[L2001]              gas := gas - 21000;
[L2002]  COND TRUE   gas >= 0
[L2003]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2004]              assume msgvalue_MSG == 0;
[L2005]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L358]               havoc __exception;
[L359]               revert := false;
[L360]   COND FALSE  !(__exception)
[L381]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1267]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1271]  COND TRUE   DType[this] == SpaghettiToken
[L1272]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1272]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1273]  COND FALSE  !(revert)
[L1279]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1280]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1281]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L381]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L382]               assume !revert && gas >= 0;
[L2005]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:21:17,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:21:17,696 INFO  L82        PathProgramCache]: Analyzing trace with hash -2123845816, now seen corresponding path program 1 times
[2020-11-25 04:21:17,696 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:21:17,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:21:18,328 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 04:21:18,329 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 04:21:18,939 WARN  L188               SmtUtils]: Spent 501.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 112
[2020-11-25 04:21:19,517 WARN  L188               SmtUtils]: Spent 373.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 101
[2020-11-25 04:21:20,633 WARN  L188               SmtUtils]: Spent 872.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 71
[2020-11-25 04:21:21,321 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 54
[2020-11-25 04:21:22,404 WARN  L188               SmtUtils]: Spent 573.00 ms on a formula simplification. DAG size of input: 255 DAG size of output: 61
[2020-11-25 04:21:22,893 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 9 proven. 7 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 04:21:22,893 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:21:22,894 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 04:21:22,894 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:21:22,894 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 04:21:22,894 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=1097, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 04:21:22,895 INFO  L87              Difference]: Start difference. First operand 1316 states and 1431 transitions. cyclomatic complexity: 120 Second operand 35 states.
[2020-11-25 04:21:23,425 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification that was a NOOP. DAG size: 203
[2020-11-25 04:21:23,895 WARN  L188               SmtUtils]: Spent 378.00 ms on a formula simplification that was a NOOP. DAG size: 205
[2020-11-25 04:21:26,857 WARN  L188               SmtUtils]: Spent 432.00 ms on a formula simplification that was a NOOP. DAG size: 232
[2020-11-25 04:21:28,423 WARN  L188               SmtUtils]: Spent 937.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 236
[2020-11-25 04:21:30,129 WARN  L188               SmtUtils]: Spent 1.25 s on a formula simplification. DAG size of input: 266 DAG size of output: 254
[2020-11-25 04:21:30,835 WARN  L188               SmtUtils]: Spent 498.00 ms on a formula simplification that was a NOOP. DAG size: 250
[2020-11-25 04:21:32,935 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:21:32,935 INFO  L93              Difference]: Finished difference Result 1394 states and 1528 transitions.
[2020-11-25 04:21:32,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 04:21:32,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1394 states and 1528 transitions.
[2020-11-25 04:21:32,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:32,942 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1394 states to 1394 states and 1528 transitions.
[2020-11-25 04:21:32,942 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 428
[2020-11-25 04:21:32,942 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 428
[2020-11-25 04:21:32,942 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1394 states and 1528 transitions.
[2020-11-25 04:21:32,943 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:21:32,943 INFO  L728         BuchiCegarLoop]: Abstraction has 1394 states and 1528 transitions.
[2020-11-25 04:21:32,944 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1394 states and 1528 transitions.
[2020-11-25 04:21:32,951 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1394 to 1283.
[2020-11-25 04:21:32,951 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1283 states.
[2020-11-25 04:21:32,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1283 states to 1283 states and 1393 transitions.
[2020-11-25 04:21:32,952 INFO  L751         BuchiCegarLoop]: Abstraction has 1283 states and 1393 transitions.
[2020-11-25 04:21:32,952 INFO  L631         BuchiCegarLoop]: Abstraction has 1283 states and 1393 transitions.
[2020-11-25 04:21:32,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 04:21:32,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1283 states and 1393 transitions.
[2020-11-25 04:21:32,953 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:32,954 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:21:32,954 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:21:32,955 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:21:32,955 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:21:32,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:21:32,959 INFO  L82        PathProgramCache]: Analyzing trace with hash 1922991665, now seen corresponding path program 1 times
[2020-11-25 04:21:32,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:21:32,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:21:33,369 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 04:21:33,391 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 04:21:34,089 WARN  L188               SmtUtils]: Spent 320.00 ms on a formula simplification. DAG size of input: 212 DAG size of output: 98
[2020-11-25 04:21:34,868 WARN  L188               SmtUtils]: Spent 404.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 101
[2020-11-25 04:21:35,380 WARN  L188               SmtUtils]: Spent 363.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 98
[2020-11-25 04:21:35,894 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 74
[2020-11-25 04:21:36,796 WARN  L188               SmtUtils]: Spent 335.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 93
[2020-11-25 04:21:37,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 4 proven. 60 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-11-25 04:21:37,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:21:37,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 04:21:37,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:21:37,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 04:21:37,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=173, Invalid=1989, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 04:21:37,187 INFO  L87              Difference]: Start difference. First operand 1283 states and 1393 transitions. cyclomatic complexity: 115 Second operand 47 states.
[2020-11-25 04:21:38,197 WARN  L188               SmtUtils]: Spent 774.00 ms on a formula simplification that was a NOOP. DAG size: 314
[2020-11-25 04:21:42,214 WARN  L188               SmtUtils]: Spent 1.45 s on a formula simplification. DAG size of input: 307 DAG size of output: 295
[2020-11-25 04:21:43,800 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification. DAG size of input: 300 DAG size of output: 288
[2020-11-25 04:21:45,493 WARN  L188               SmtUtils]: Spent 1.48 s on a formula simplification. DAG size of input: 311 DAG size of output: 299
[2020-11-25 04:21:48,151 WARN  L188               SmtUtils]: Spent 1.38 s on a formula simplification. DAG size of input: 321 DAG size of output: 309
[2020-11-25 04:21:50,295 WARN  L188               SmtUtils]: Spent 1.69 s on a formula simplification. DAG size of input: 341 DAG size of output: 323
[2020-11-25 04:21:52,260 WARN  L188               SmtUtils]: Spent 716.00 ms on a formula simplification that was a NOOP. DAG size: 323
[2020-11-25 04:21:52,765 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 123
[2020-11-25 04:21:52,941 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 95
[2020-11-25 04:21:53,471 WARN  L188               SmtUtils]: Spent 435.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 133
[2020-11-25 04:21:56,050 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:21:56,050 INFO  L93              Difference]: Finished difference Result 1416 states and 1549 transitions.
[2020-11-25 04:21:56,051 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 04:21:56,051 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1416 states and 1549 transitions.
[2020-11-25 04:21:56,053 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:56,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1416 states to 1416 states and 1549 transitions.
[2020-11-25 04:21:56,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 440
[2020-11-25 04:21:56,057 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 440
[2020-11-25 04:21:56,057 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1416 states and 1549 transitions.
[2020-11-25 04:21:56,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:21:56,058 INFO  L728         BuchiCegarLoop]: Abstraction has 1416 states and 1549 transitions.
[2020-11-25 04:21:56,059 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1416 states and 1549 transitions.
[2020-11-25 04:21:56,065 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1416 to 1321.
[2020-11-25 04:21:56,065 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1321 states.
[2020-11-25 04:21:56,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1321 states to 1321 states and 1437 transitions.
[2020-11-25 04:21:56,066 INFO  L751         BuchiCegarLoop]: Abstraction has 1321 states and 1437 transitions.
[2020-11-25 04:21:56,066 INFO  L631         BuchiCegarLoop]: Abstraction has 1321 states and 1437 transitions.
[2020-11-25 04:21:56,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 04:21:56,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1321 states and 1437 transitions.
[2020-11-25 04:21:56,068 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:56,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:21:56,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:21:56,069 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:21:56,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1267]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1271]  COND TRUE   DType[this] == SpaghettiToken
[L1272]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1272]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1273]  COND FALSE  !(revert)
[L1279]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1280]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1281]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:21:56,072 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:21:56,073 INFO  L82        PathProgramCache]: Analyzing trace with hash -426286817, now seen corresponding path program 1 times
[2020-11-25 04:21:56,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:21:56,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:21:56,120 INFO  L134       CoverageAnalysis]: Checked inductivity of 90 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 89 trivial. 0 not checked.
[2020-11-25 04:21:56,120 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:21:56,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 04:21:56,121 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:21:56,121 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 04:21:56,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 04:21:56,121 INFO  L87              Difference]: Start difference. First operand 1321 states and 1437 transitions. cyclomatic complexity: 121 Second operand 3 states.
[2020-11-25 04:21:56,129 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:21:56,130 INFO  L93              Difference]: Finished difference Result 1337 states and 1452 transitions.
[2020-11-25 04:21:56,130 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 04:21:56,130 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1337 states and 1452 transitions.
[2020-11-25 04:21:56,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:56,135 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1337 states to 1337 states and 1452 transitions.
[2020-11-25 04:21:56,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 411
[2020-11-25 04:21:56,135 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 411
[2020-11-25 04:21:56,135 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1337 states and 1452 transitions.
[2020-11-25 04:21:56,136 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:21:56,136 INFO  L728         BuchiCegarLoop]: Abstraction has 1337 states and 1452 transitions.
[2020-11-25 04:21:56,137 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1337 states and 1452 transitions.
[2020-11-25 04:21:56,142 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1337 to 1337.
[2020-11-25 04:21:56,142 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1337 states.
[2020-11-25 04:21:56,144 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1337 states to 1337 states and 1452 transitions.
[2020-11-25 04:21:56,144 INFO  L751         BuchiCegarLoop]: Abstraction has 1337 states and 1452 transitions.
[2020-11-25 04:21:56,144 INFO  L631         BuchiCegarLoop]: Abstraction has 1337 states and 1452 transitions.
[2020-11-25 04:21:56,144 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 04:21:56,144 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1337 states and 1452 transitions.
[2020-11-25 04:21:56,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:21:56,145 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:21:56,145 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:21:56,146 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:21:56,146 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND TRUE   choice == 3
[L1987]              gas := gas - 21000;
[L1988]  COND TRUE   gas >= 0
[L1989]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1990]              assume msgvalue_MSG == 0;
[L1991]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1157]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1158]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1159]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1160]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1161]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L272]               assume !revert && gas >= 0;
[L1991]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND FALSE  !(choice == 2)
[L2000]  COND TRUE   choice == 1
[L2001]              gas := gas - 21000;
[L2002]  COND TRUE   gas >= 0
[L2003]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2004]              assume msgvalue_MSG == 0;
[L2005]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L358]               havoc __exception;
[L359]               revert := false;
[L360]   COND FALSE  !(__exception)
[L381]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L381]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L382]               assume !revert && gas >= 0;
[L2005]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:21:56,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:21:56,149 INFO  L82        PathProgramCache]: Analyzing trace with hash 635273556, now seen corresponding path program 1 times
[2020-11-25 04:21:56,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:21:56,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:21:56,611 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 58
[2020-11-25 04:21:57,306 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 71
[2020-11-25 04:21:57,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 160 backedges. 0 proven. 11 refuted. 0 times theorem prover too weak. 149 trivial. 0 not checked.
[2020-11-25 04:21:57,811 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:21:57,811 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 04:21:57,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:21:57,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 04:21:57,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=630, Unknown=0, NotChecked=0, Total=702
[2020-11-25 04:21:57,811 INFO  L87              Difference]: Start difference. First operand 1337 states and 1452 transitions. cyclomatic complexity: 120 Second operand 27 states.
[2020-11-25 04:21:59,386 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification. DAG size of input: 129 DAG size of output: 125
[2020-11-25 04:22:00,084 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 131
[2020-11-25 04:22:00,556 WARN  L188               SmtUtils]: Spent 370.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 153
[2020-11-25 04:22:00,769 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 146
[2020-11-25 04:22:02,484 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:22:02,484 INFO  L93              Difference]: Finished difference Result 1374 states and 1501 transitions.
[2020-11-25 04:22:02,484 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 04:22:02,484 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1374 states and 1501 transitions.
[2020-11-25 04:22:02,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:22:02,490 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1374 states to 1374 states and 1501 transitions.
[2020-11-25 04:22:02,490 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 415
[2020-11-25 04:22:02,490 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 415
[2020-11-25 04:22:02,490 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1374 states and 1501 transitions.
[2020-11-25 04:22:02,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:22:02,491 INFO  L728         BuchiCegarLoop]: Abstraction has 1374 states and 1501 transitions.
[2020-11-25 04:22:02,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1374 states and 1501 transitions.
[2020-11-25 04:22:02,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1374 to 1341.
[2020-11-25 04:22:02,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1341 states.
[2020-11-25 04:22:02,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1341 states to 1341 states and 1463 transitions.
[2020-11-25 04:22:02,499 INFO  L751         BuchiCegarLoop]: Abstraction has 1341 states and 1463 transitions.
[2020-11-25 04:22:02,499 INFO  L631         BuchiCegarLoop]: Abstraction has 1341 states and 1463 transitions.
[2020-11-25 04:22:02,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 04:22:02,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1341 states and 1463 transitions.
[2020-11-25 04:22:02,501 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:22:02,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:22:02,501 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:22:02,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:22:02,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND TRUE   choice == 3
[L1987]              gas := gas - 21000;
[L1988]  COND TRUE   gas >= 0
[L1989]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1990]              assume msgvalue_MSG == 0;
[L1991]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1157]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1158]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1159]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1160]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1161]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L272]               assume !revert && gas >= 0;
[L1991]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:22:02,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:22:02,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -938453601, now seen corresponding path program 1 times
[2020-11-25 04:22:02,505 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:22:02,541 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:22:03,969 WARN  L188               SmtUtils]: Spent 381.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 104
[2020-11-25 04:22:04,665 WARN  L188               SmtUtils]: Spent 296.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 90
[2020-11-25 04:22:05,182 WARN  L188               SmtUtils]: Spent 305.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 85
[2020-11-25 04:22:05,738 WARN  L188               SmtUtils]: Spent 490.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 96
[2020-11-25 04:22:06,281 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 04:22:06,331 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 70
[2020-11-25 04:22:06,620 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 64
[2020-11-25 04:22:06,941 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 56
[2020-11-25 04:22:07,718 WARN  L188               SmtUtils]: Spent 572.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 58
[2020-11-25 04:22:08,907 WARN  L188               SmtUtils]: Spent 419.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 77
[2020-11-25 04:22:09,786 WARN  L188               SmtUtils]: Spent 379.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 89
[2020-11-25 04:22:10,631 INFO  L134       CoverageAnalysis]: Checked inductivity of 169 backedges. 8 proven. 16 refuted. 0 times theorem prover too weak. 145 trivial. 0 not checked.
[2020-11-25 04:22:10,631 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:22:10,631 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 04:22:10,632 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:22:10,632 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-11-25 04:22:10,632 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=172, Invalid=2278, Unknown=0, NotChecked=0, Total=2450
[2020-11-25 04:22:10,632 INFO  L87              Difference]: Start difference. First operand 1341 states and 1463 transitions. cyclomatic complexity: 128 Second operand 50 states.
[2020-11-25 04:22:11,647 WARN  L188               SmtUtils]: Spent 582.00 ms on a formula simplification that was a NOOP. DAG size: 259
[2020-11-25 04:22:17,228 WARN  L188               SmtUtils]: Spent 1.17 s on a formula simplification. DAG size of input: 289 DAG size of output: 264
[2020-11-25 04:22:19,384 WARN  L188               SmtUtils]: Spent 1.75 s on a formula simplification. DAG size of input: 314 DAG size of output: 291
[2020-11-25 04:22:26,300 WARN  L188               SmtUtils]: Spent 4.72 s on a formula simplification. DAG size of input: 351 DAG size of output: 324
[2020-11-25 04:24:17,643 WARN  L188               SmtUtils]: Spent 1.79 m on a formula simplification. DAG size of input: 402 DAG size of output: 365
[2020-11-25 04:24:23,856 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 246 DAG size of output: 232
[2020-11-25 04:24:29,592 WARN  L188               SmtUtils]: Spent 614.00 ms on a formula simplification that was a NOOP. DAG size: 266
[2020-11-25 04:24:30,041 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 96
[2020-11-25 04:24:31,272 WARN  L188               SmtUtils]: Spent 436.00 ms on a formula simplification that was a NOOP. DAG size: 146
[2020-11-25 04:24:31,688 WARN  L188               SmtUtils]: Spent 253.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 92
[2020-11-25 04:24:32,198 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 107
[2020-11-25 04:24:37,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:24:37,108 INFO  L93              Difference]: Finished difference Result 1376 states and 1508 transitions.
[2020-11-25 04:24:37,108 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 04:24:37,108 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1376 states and 1508 transitions.
[2020-11-25 04:24:37,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:24:37,113 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1376 states to 1376 states and 1508 transitions.
[2020-11-25 04:24:37,114 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 415
[2020-11-25 04:24:37,114 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 415
[2020-11-25 04:24:37,114 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1376 states and 1508 transitions.
[2020-11-25 04:24:37,115 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:24:37,115 INFO  L728         BuchiCegarLoop]: Abstraction has 1376 states and 1508 transitions.
[2020-11-25 04:24:37,116 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1376 states and 1508 transitions.
[2020-11-25 04:24:37,121 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1376 to 1327.
[2020-11-25 04:24:37,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1327 states.
[2020-11-25 04:24:37,122 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1327 states to 1327 states and 1437 transitions.
[2020-11-25 04:24:37,122 INFO  L751         BuchiCegarLoop]: Abstraction has 1327 states and 1437 transitions.
[2020-11-25 04:24:37,122 INFO  L631         BuchiCegarLoop]: Abstraction has 1327 states and 1437 transitions.
[2020-11-25 04:24:37,122 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 04:24:37,122 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1327 states and 1437 transitions.
[2020-11-25 04:24:37,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:24:37,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:24:37,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:24:37,124 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:24:37,125 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiToken0 := false;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]     CALL        call main();
[L2016]              assume null == 0;
[L2017]  CALL        call this := FreshRefGenerator__success();
[L964]               havoc newRef;
[L965]               assume Alloc[newRef] == false;
[L966]               Alloc[newRef] := true;
[L967]               assume newRef != null;
[L2017]  RET         call this := FreshRefGenerator__success();
[L2018]              assume now >= 0;
[L2019]              assume DType[this] == SpaghettiToken;
[L2020]              assume msgvalue_MSG == 0;
[L2021]              gas := gas - 53000;
[L2022]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1110]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L996]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L981]               assume msgsender_MSG != null;
[L982]               Balance[this] := 0;
[L996]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   COND FALSE  !(revert)
[L1110]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1111]  COND FALSE  !(revert)
[L1114]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_SpaghettiToken[this] := 0;
[L1082]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1083]              sum_balanceOf0[this] := 0;
[L1084]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1085]              sum_allowance1[this] := 0;
[L1086]              symbol_SpaghettiToken[this] := 2010503932;
[L1087]              decimals_SpaghettiToken[this] := 18;
[L1088]              name_SpaghettiToken[this] := 408148383;
[L1090]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1091]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1092]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1093]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1114]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1115]  COND FALSE  !(revert)
[L167]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L168]               assume !revert && gas >= 0;
[L2022]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2023]              assume !revert && gas >= 0;
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND FALSE  !(choice == 2)
[L2000]  COND TRUE   choice == 1
[L2001]              gas := gas - 21000;
[L2002]  COND TRUE   gas >= 0
[L2003]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2004]              assume msgvalue_MSG == 0;
[L2005]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L358]               havoc __exception;
[L359]               revert := false;
[L360]   COND FALSE  !(__exception)
[L381]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L381]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L382]               assume !revert && gas >= 0;
[L2005]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND FALSE  !(choice == 2)
[L2000]  COND TRUE   choice == 1
[L2001]              gas := gas - 21000;
[L2002]  COND TRUE   gas >= 0
[L2003]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2004]              assume msgvalue_MSG == 0;
[L2005]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L358]               havoc __exception;
[L359]               revert := false;
[L360]   COND FALSE  !(__exception)
[L381]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L381]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L382]               assume !revert && gas >= 0;
[L2005]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND FALSE  !(choice == 10)
[L1950]  COND FALSE  !(choice == 9)
[L1956]  COND FALSE  !(choice == 8)
[L1962]  COND FALSE  !(choice == 7)
[L1968]  COND FALSE  !(choice == 6)
[L1974]  COND FALSE  !(choice == 5)
[L1980]  COND FALSE  !(choice == 4)
[L1986]  COND FALSE  !(choice == 3)
[L1993]  COND TRUE   choice == 2
[L1994]              gas := gas - 21000;
[L1995]  COND TRUE   gas >= 0
[L1996]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1997]              assume msgvalue_MSG == 0;
[L1998]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s194 && (wad_s194 > balanceOf_SpaghettiToken[this][msgsender_MSG] || balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiToken0 := true;
[L2]                 call_transfer_SpaghettiToken0 := false;
[L2]                 revert := revert_hold;
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L326]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1179]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1265]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1266]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1283]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1287]  COND TRUE   DType[this] == SpaghettiToken
[L1288]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1288]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1289]  COND FALSE  !(revert)
[L1295]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1296]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1297]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1298]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1299]  COND TRUE   DType[this] == SpaghettiToken
[L1300]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1300]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1301]  COND FALSE  !(revert)
[L1307]              ninetynine_s309 := ninetynine_s309;
[L1308]  COND TRUE   DType[this] == SpaghettiToken
[L1309]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1013]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1014]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1309]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1310]  COND FALSE  !(revert)
[L1316]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1317]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1318]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1319]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1345]  COND TRUE   DType[this] == SpaghettiToken
[L1346]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1031]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1346]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1347]  COND FALSE  !(revert)
[L1353]              totalSupply_SpaghettiToken[this] := __var_8;
[L1354]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1319]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1320]  COND FALSE  !(revert)
[L1323]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1324]              __ret_0_ := true;
[L1179]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1180]  COND FALSE  !(revert)
[L1183]              __ret_0_ := __var_3;
[L326]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L327]               assume !revert && gas >= 0;
[L1998]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2026]  CALL        call CorralChoice_SpaghettiToken(this);
[L1910]              havoc msgsender_MSG;
[L1911]              havoc msgvalue_MSG;
[L1912]              havoc choice;
[L1913]              havoc __ret_0_totalSupply;
[L1914]              havoc arg329_s0;
[L1915]              havoc __ret_0_balanceOf;
[L1916]              havoc arg330_s0;
[L1917]              havoc arg331_s0;
[L1918]              havoc __ret_0_allowance;
[L1919]              havoc __ret_0_symbol;
[L1920]              havoc __ret_0_decimals;
[L1921]              havoc __ret_0_name;
[L1922]              havoc chef_s113;
[L1923]              havoc guy_s149;
[L1924]              havoc __ret_0_approve;
[L1925]              havoc guy_s177;
[L1926]              havoc wad_s177;
[L1927]              havoc dst_s194;
[L1928]              havoc wad_s194;
[L1929]              havoc __ret_0_transfer;
[L1930]              havoc src_s309;
[L1931]              havoc dst_s309;
[L1932]              havoc wad_s309;
[L1933]              havoc __ret_0_transferFrom;
[L1934]              havoc tmpNow;
[L1935]              havoc gas;
[L1936]              assume gas > 4000000 && gas <= 8000000;
[L1937]              tmpNow := now;
[L1938]              havoc now;
[L1939]              assume now > tmpNow;
[L1940]              assume msgsender_MSG != null;
[L1941]              assume DType[msgsender_MSG] != DSMath;
[L1942]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1943]              Alloc[msgsender_MSG] := true;
[L1944]  COND TRUE   choice == 10
[L1945]              gas := gas - 21000;
[L1946]  COND FALSE  !(gas >= 0)
[L2026]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:24:37,127 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:24:37,128 INFO  L82        PathProgramCache]: Analyzing trace with hash -1076527454, now seen corresponding path program 2 times
[2020-11-25 04:24:37,128 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:24:37,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 04:30:49,321 WARN  L250   erpolLogProxyWrapper]: Unable to check validity of interpolant: cancelled
Cannot interrupt operation gracefully because timeout expired. Forcing shutdown
