This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:52:00,254 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:52:00,255 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:52:00,266 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:52:00,266 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:52:00,266 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:52:00,267 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:52:00,269 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:52:00,270 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:52:00,271 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:52:00,271 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:52:00,272 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:52:00,272 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:52:00,273 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:52:00,274 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:52:00,274 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:52:00,275 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:52:00,276 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:52:00,277 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:52:00,279 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:52:00,279 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:52:00,280 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:52:00,282 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:52:00,282 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:52:00,282 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:52:00,282 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:52:00,283 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:52:00,283 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:52:00,283 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:52:00,284 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:52:00,284 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:52:00,284 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:52:00,285 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:52:00,285 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:52:00,286 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:52:00,286 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:52:00,287 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:52:00,287 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:52:00,287 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:52:00,288 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:52:00,288 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:52:00,288 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:52:00,295 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:52:00,296 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:52:00,296 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:52:00,296 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:52:00,297 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:52:00,297 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:52:00,297 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:52:00,298 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:52:00,298 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:52:00,299 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:52:00,299 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:52:00,299 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:52:00,320 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:52:00,335 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:52:00,339 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:52:00,340 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:52:00,341 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:52:00,341 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl
[2020-11-25 11:52:00,341 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl'
[2020-11-25 11:52:00,434 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:52:00,435 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:52:00,435 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:52:00,435 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:52:00,436 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:52:00,452 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,453 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,485 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,485 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,508 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,521 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,531 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,542 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:52:00,542 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:52:00,542 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:52:00,544 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:52:00,548 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/1) ...
[2020-11-25 11:52:00,565 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:00,570 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:00,578 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:00,583 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s290 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s290,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]
[2020-11-25 11:52:00,586 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s290]==value_s290 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && name_CabGoldToken[this]==( old(name_CabGoldToken[this]) ) ) && symbol_CabGoldToken[this]==( old(symbol_CabGoldToken[this]) ) ) && decimals_CabGoldToken[this]==( old(decimals_CabGoldToken[this]) ) ) && active_CabGoldToken[this]==( old(active_CabGoldToken[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[spender_s290,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],IdentifierExpression[value_s290,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]
[2020-11-25 11:52:00,593 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:00,593 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC200) ==> ( <>AP(success_approve_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:52:00,604 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:00 PropertyContainer
[2020-11-25 11:52:00,604 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:52:00,604 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:52:00,604 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:52:00,604 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:52:00,605 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/2) ...
[2020-11-25 11:52:00,605 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:52:00,605 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:52:00,622 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:00" (2/2) ...
[2020-11-25 11:52:00,623 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:52:00,623 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:52:00,623 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:52:00,623 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:52:00,624 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/2) ...
[2020-11-25 11:52:00,676 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:52:00,676 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:52:00,676 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:00,676 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:52:00,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:52:00,676 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:52:00,677 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:52:00,677 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:52:00,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:52:00,678 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:52:00,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:52:00,679 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:52:00,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:52:00,679 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:00,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:00,679 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:52:00,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:52:00,679 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:00,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:00,679 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:00,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:00,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:00,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:00,680 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:52:00,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:52:00,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:52:00,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:52:00,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:52:00,681 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:52:00,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:00,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:00,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:00,682 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:00,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:00,683 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:00,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:00,683 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:52:00,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:52:00,684 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:52:00,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:00,686 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:52:00,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:00,688 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:00,689 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:00,690 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:00,691 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:52:00,692 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:52:00,693 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:52:00,693 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:00,693 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:52:00,693 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:00,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:00,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:00,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:00,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:00,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:00,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:00,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:00,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:00,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:00,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:00,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:00,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:00,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:00,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:00,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:00,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:00,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:00,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:52:00,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:52:00,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:52:00,707 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:52:00,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:52:01,019 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:01,019 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:01,020 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:01,256 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:01,607 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:52:01,608 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:52:01,610 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:01 BoogieIcfgContainer
[2020-11-25 11:52:01,610 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:00" (2/2) ...
[2020-11-25 11:52:01,610 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:52:01,610 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5de02c62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:01, skipping insertion in model container
[2020-11-25 11:52:01,610 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:52:01,610 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:01,610 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:52:01,612 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:52:01,612 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/3) ...
[2020-11-25 11:52:01,612 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2b5b9c29 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:01, skipping insertion in model container
[2020-11-25 11:52:01,612 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:52:01,648 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:01 NWAContainer
[2020-11-25 11:52:01,648 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:01,648 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:01,648 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:52:01,649 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:52:01,650 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:01" (3/4) ...
[2020-11-25 11:52:01,650 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@450de211 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:01, skipping insertion in model container
[2020-11-25 11:52:01,651 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:01" (4/4) ...
[2020-11-25 11:52:01,653 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:52:01,658 INFO  L110   BuchiProductObserver]: Initial RCFG 2281 locations, 3355 edges
[2020-11-25 11:52:01,658 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:52:01,669 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:52:03,329 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:52:03,337 INFO  L110   BuchiProductObserver]: BuchiProgram size 5920 locations, 11057 edges
[2020-11-25 11:52:03,337 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:03 BoogieIcfgContainer
[2020-11-25 11:52:03,337 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:03,337 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:52:03,337 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:52:03,339 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:52:03,339 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:03" (1/1) ...
[2020-11-25 11:52:03,461 INFO  L313           BlockEncoder]: Initial Icfg 5920 locations, 11057 edges
[2020-11-25 11:52:03,462 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:52:03,462 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:03,462 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:52:03,463 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:52:03,478 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:52:03,492 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 11:52:03,508 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:52:03,513 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:52:03,519 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:52:03,520 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:52:03,524 INFO  L313           BlockEncoder]: Encoded RCFG 5812 locations, 10762 edges
[2020-11-25 11:52:03,524 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:03 BasicIcfg
[2020-11-25 11:52:03,524 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:52:03,525 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:52:03,525 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:52:03,527 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:52:03,528 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,528 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:00" (1/6) ...
[2020-11-25 11:52:03,529 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68354057 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:03, skipping insertion in model container
[2020-11-25 11:52:03,529 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,529 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:00" (2/6) ...
[2020-11-25 11:52:03,530 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68354057 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:03, skipping insertion in model container
[2020-11-25 11:52:03,530 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,530 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:01" (3/6) ...
[2020-11-25 11:52:03,530 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68354057 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:52:03, skipping insertion in model container
[2020-11-25 11:52:03,530 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,530 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:01" (4/6) ...
[2020-11-25 11:52:03,530 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68354057 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:03, skipping insertion in model container
[2020-11-25 11:52:03,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:03" (5/6) ...
[2020-11-25 11:52:03,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68354057 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:52:03, skipping insertion in model container
[2020-11-25 11:52:03,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:03,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:03" (6/6) ...
[2020-11-25 11:52:03,532 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_approve.bpl_BEv2
[2020-11-25 11:52:03,570 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:52:03,571 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:52:03,571 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:52:03,571 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:52:03,571 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:52:03,571 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:52:03,571 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:52:03,571 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:52:03,571 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:52:03,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5812 states.
[2020-11-25 11:52:03,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:03,691 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:03,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:03,700 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:03,700 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:03,700 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:52:03,700 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5812 states.
[2020-11-25 11:52:03,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:03,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:03,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:03,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:03,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND TRUE   choice == 18
[L6339]              gas := gas - 21000;
[L6340]  COND FALSE  !(gas >= 0)
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:03,748 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:03,749 INFO  L82        PathProgramCache]: Analyzing trace with hash 1050130691, now seen corresponding path program 1 times
[2020-11-25 11:52:03,754 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:03,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:03,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:03,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:03,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:52:04,193 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:04,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:52:04,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:52:04,204 INFO  L87              Difference]: Start difference. First operand 5812 states. Second operand 4 states.
[2020-11-25 11:52:04,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:04,827 INFO  L93              Difference]: Finished difference Result 3572 states and 4359 transitions.
[2020-11-25 11:52:04,827 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:52:04,828 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3572 states and 4359 transitions.
[2020-11-25 11:52:04,849 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:04,877 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3572 states to 3572 states and 4359 transitions.
[2020-11-25 11:52:04,878 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 11:52:04,880 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 881
[2020-11-25 11:52:04,881 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3572 states and 4359 transitions.
[2020-11-25 11:52:04,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:04,891 INFO  L728         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:52:04,907 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3572 states and 4359 transitions.
[2020-11-25 11:52:04,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3572 to 3572.
[2020-11-25 11:52:04,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3572 states.
[2020-11-25 11:52:04,971 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3572 states to 3572 states and 4359 transitions.
[2020-11-25 11:52:04,972 INFO  L751         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:52:04,972 INFO  L631         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:52:04,972 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:52:04,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3572 states and 4359 transitions.
[2020-11-25 11:52:04,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:04,980 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:04,980 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:04,982 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:04,983 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND TRUE   !(owner_s563 != null)
[L3395]              revert := true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND TRUE   revert
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND TRUE   !(owner_s563 != null)
[L3395]              revert := true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND TRUE   revert
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:04,986 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:04,986 INFO  L82        PathProgramCache]: Analyzing trace with hash 234986610, now seen corresponding path program 1 times
[2020-11-25 11:52:04,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:04,998 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:05,016 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:05,016 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:05,016 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:05,017 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:05,017 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:05,017 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:05,017 INFO  L87              Difference]: Start difference. First operand 3572 states and 4359 transitions. cyclomatic complexity: 789 Second operand 3 states.
[2020-11-25 11:52:05,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:05,128 INFO  L93              Difference]: Finished difference Result 4894 states and 6016 transitions.
[2020-11-25 11:52:05,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:05,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4894 states and 6016 transitions.
[2020-11-25 11:52:05,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:05,166 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4894 states to 4894 states and 6016 transitions.
[2020-11-25 11:52:05,166 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1271
[2020-11-25 11:52:05,167 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1271
[2020-11-25 11:52:05,167 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4894 states and 6016 transitions.
[2020-11-25 11:52:05,173 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:05,173 INFO  L728         BuchiCegarLoop]: Abstraction has 4894 states and 6016 transitions.
[2020-11-25 11:52:05,177 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4894 states and 6016 transitions.
[2020-11-25 11:52:05,222 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4894 to 4234.
[2020-11-25 11:52:05,222 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4234 states.
[2020-11-25 11:52:05,227 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4234 states to 4234 states and 5216 transitions.
[2020-11-25 11:52:05,227 INFO  L751         BuchiCegarLoop]: Abstraction has 4234 states and 5216 transitions.
[2020-11-25 11:52:05,228 INFO  L631         BuchiCegarLoop]: Abstraction has 4234 states and 5216 transitions.
[2020-11-25 11:52:05,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:52:05,228 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4234 states and 5216 transitions.
[2020-11-25 11:52:05,234 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:05,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:05,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:05,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:05,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND TRUE   revert
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND TRUE   !(owner_s563 != null)
[L3395]              revert := true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND TRUE   revert
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND TRUE   !(owner_s563 != null)
[L3395]              revert := true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND TRUE   revert
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:05,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:05,239 INFO  L82        PathProgramCache]: Analyzing trace with hash -1928629964, now seen corresponding path program 1 times
[2020-11-25 11:52:05,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:05,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:05,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:05,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:05,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:05,259 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:05,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:05,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:05,259 INFO  L87              Difference]: Start difference. First operand 4234 states and 5216 transitions. cyclomatic complexity: 984 Second operand 3 states.
[2020-11-25 11:52:05,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:05,346 INFO  L93              Difference]: Finished difference Result 4894 states and 5729 transitions.
[2020-11-25 11:52:05,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:05,347 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4894 states and 5729 transitions.
[2020-11-25 11:52:05,363 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:05,383 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4894 states to 4446 states and 5173 transitions.
[2020-11-25 11:52:05,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-25 11:52:05,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1179
[2020-11-25 11:52:05,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4446 states and 5173 transitions.
[2020-11-25 11:52:05,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:05,390 INFO  L728         BuchiCegarLoop]: Abstraction has 4446 states and 5173 transitions.
[2020-11-25 11:52:05,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4446 states and 5173 transitions.
[2020-11-25 11:52:05,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4446 to 3866.
[2020-11-25 11:52:05,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3866 states.
[2020-11-25 11:52:05,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3866 states to 3866 states and 4453 transitions.
[2020-11-25 11:52:05,444 INFO  L751         BuchiCegarLoop]: Abstraction has 3866 states and 4453 transitions.
[2020-11-25 11:52:05,444 INFO  L631         BuchiCegarLoop]: Abstraction has 3866 states and 4453 transitions.
[2020-11-25 11:52:05,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:52:05,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3866 states and 4453 transitions.
[2020-11-25 11:52:05,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:05,452 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:05,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:05,454 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:05,454 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND FALSE  !(!(owner_s563 != null))
[L3398]              __var_15 := null;
[L3399]  COND FALSE  !(!(spender_s563 != null))
[L3403]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3404]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3405]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3406]              assert { :EventEmitted "Approval_ERC20" } true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND FALSE  !(revert)
[L2953]              __ret_0_ := true;
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L568]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2930]  COND TRUE   DType[this] == CabGoldToken
[L2931]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3393]              __var_14 := null;
[L3394]  COND FALSE  !(!(owner_s563 != null))
[L3398]              __var_15 := null;
[L3399]  COND FALSE  !(!(spender_s563 != null))
[L3403]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] - _allowances_ERC20[this][owner_s563][spender_s563];
[L3404]              _allowances_ERC20[this][owner_s563][spender_s563] := value_s563;
[L3405]              sum__allowances1[owner_s563] := sum__allowances1[owner_s563] + _allowances_ERC20[this][owner_s563][spender_s563];
[L3406]              assert { :EventEmitted "Approval_ERC20" } true;
[L2931]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2932]  COND FALSE  !(revert)
[L2953]              __ret_0_ := true;
[L568]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L569]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s290] == value_s290) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:05,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:05,460 INFO  L82        PathProgramCache]: Analyzing trace with hash -208251648, now seen corresponding path program 1 times
[2020-11-25 11:52:05,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:05,521 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:05,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 16 proven. 0 refuted. 0 times theorem prover too weak. 249 trivial. 0 not checked.
[2020-11-25 11:52:05,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:05,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 11:52:05,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:05,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 11:52:05,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 11:52:05,845 INFO  L87              Difference]: Start difference. First operand 3866 states and 4453 transitions. cyclomatic complexity: 589 Second operand 15 states.
[2020-11-25 11:52:08,569 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:08,569 INFO  L93              Difference]: Finished difference Result 3993 states and 4594 transitions.
[2020-11-25 11:52:08,569 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 11:52:08,570 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3993 states and 4594 transitions.
[2020-11-25 11:52:08,578 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:08,591 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3993 states to 3993 states and 4594 transitions.
[2020-11-25 11:52:08,591 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1101
[2020-11-25 11:52:08,592 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1101
[2020-11-25 11:52:08,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3993 states and 4594 transitions.
[2020-11-25 11:52:08,596 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:08,597 INFO  L728         BuchiCegarLoop]: Abstraction has 3993 states and 4594 transitions.
[2020-11-25 11:52:08,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3993 states and 4594 transitions.
[2020-11-25 11:52:08,631 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3993 to 3963.
[2020-11-25 11:52:08,632 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3963 states.
[2020-11-25 11:52:08,636 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3963 states to 3963 states and 4563 transitions.
[2020-11-25 11:52:08,636 INFO  L751         BuchiCegarLoop]: Abstraction has 3963 states and 4563 transitions.
[2020-11-25 11:52:08,636 INFO  L631         BuchiCegarLoop]: Abstraction has 3963 states and 4563 transitions.
[2020-11-25 11:52:08,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:52:08,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3963 states and 4563 transitions.
[2020-11-25 11:52:08,641 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:08,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:08,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:08,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:08,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND TRUE   !(owner_s563 != null)
[L3376]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND TRUE   !(owner_s563 != null)
[L3376]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:08,648 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:08,648 INFO  L82        PathProgramCache]: Analyzing trace with hash 642770206, now seen corresponding path program 1 times
[2020-11-25 11:52:08,649 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:08,660 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:08,747 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:08,747 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:08,747 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:52:08,748 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:08,748 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:08,748 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:08,748 INFO  L87              Difference]: Start difference. First operand 3963 states and 4563 transitions. cyclomatic complexity: 604 Second operand 6 states.
[2020-11-25 11:52:08,878 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:08,879 INFO  L93              Difference]: Finished difference Result 3999 states and 4635 transitions.
[2020-11-25 11:52:08,879 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:08,879 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3999 states and 4635 transitions.
[2020-11-25 11:52:08,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:08,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3999 states to 3967 states and 4597 transitions.
[2020-11-25 11:52:08,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1103
[2020-11-25 11:52:08,910 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1103
[2020-11-25 11:52:08,910 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3967 states and 4597 transitions.
[2020-11-25 11:52:08,915 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:08,915 INFO  L728         BuchiCegarLoop]: Abstraction has 3967 states and 4597 transitions.
[2020-11-25 11:52:08,919 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3967 states and 4597 transitions.
[2020-11-25 11:52:08,956 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3967 to 3967.
[2020-11-25 11:52:08,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3967 states.
[2020-11-25 11:52:08,963 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3967 states to 3967 states and 4597 transitions.
[2020-11-25 11:52:08,963 INFO  L751         BuchiCegarLoop]: Abstraction has 3967 states and 4597 transitions.
[2020-11-25 11:52:08,963 INFO  L631         BuchiCegarLoop]: Abstraction has 3967 states and 4597 transitions.
[2020-11-25 11:52:08,963 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:52:08,963 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3967 states and 4597 transitions.
[2020-11-25 11:52:08,970 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:08,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:08,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:08,974 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:08,974 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND FALSE  !(__tmp__DType[this] == CabGoldToken)
[L2906]  COND TRUE   __tmp__DType[this] == ERC20Burnable
[L2907]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2907]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2908]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND FALSE  !(__tmp__DType[this] == CabGoldToken)
[L2906]  COND TRUE   __tmp__DType[this] == ERC20Burnable
[L2907]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2907]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2908]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:08,979 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:08,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 388349709, now seen corresponding path program 1 times
[2020-11-25 11:52:08,980 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:08,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:09,068 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:52:09,068 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:09,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:09,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:09,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:09,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:09,069 INFO  L87              Difference]: Start difference. First operand 3967 states and 4597 transitions. cyclomatic complexity: 634 Second operand 6 states.
[2020-11-25 11:52:09,135 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:09,135 INFO  L93              Difference]: Finished difference Result 3986 states and 4619 transitions.
[2020-11-25 11:52:09,135 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:09,135 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3986 states and 4619 transitions.
[2020-11-25 11:52:09,143 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:09,153 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3986 states to 3973 states and 4603 transitions.
[2020-11-25 11:52:09,153 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1103
[2020-11-25 11:52:09,154 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1103
[2020-11-25 11:52:09,154 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3973 states and 4603 transitions.
[2020-11-25 11:52:09,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:09,157 INFO  L728         BuchiCegarLoop]: Abstraction has 3973 states and 4603 transitions.
[2020-11-25 11:52:09,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3973 states and 4603 transitions.
[2020-11-25 11:52:09,187 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3973 to 3973.
[2020-11-25 11:52:09,187 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3973 states.
[2020-11-25 11:52:09,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3973 states to 3973 states and 4603 transitions.
[2020-11-25 11:52:09,192 INFO  L751         BuchiCegarLoop]: Abstraction has 3973 states and 4603 transitions.
[2020-11-25 11:52:09,192 INFO  L631         BuchiCegarLoop]: Abstraction has 3973 states and 4603 transitions.
[2020-11-25 11:52:09,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:52:09,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3973 states and 4603 transitions.
[2020-11-25 11:52:09,196 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:09,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:09,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:09,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:09,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3687]  COND TRUE   DType[this] == MinterRole
[L3688]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3688]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3689]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:09,202 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:09,202 INFO  L82        PathProgramCache]: Analyzing trace with hash -1437052806, now seen corresponding path program 1 times
[2020-11-25 11:52:09,203 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:09,210 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:09,273 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 256 trivial. 0 not checked.
[2020-11-25 11:52:09,273 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:09,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:09,273 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:09,274 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:09,274 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:09,274 INFO  L87              Difference]: Start difference. First operand 3973 states and 4603 transitions. cyclomatic complexity: 634 Second operand 6 states.
[2020-11-25 11:52:09,338 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:09,338 INFO  L93              Difference]: Finished difference Result 3992 states and 4625 transitions.
[2020-11-25 11:52:09,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:09,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3992 states and 4625 transitions.
[2020-11-25 11:52:09,347 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:09,357 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3992 states to 3979 states and 4609 transitions.
[2020-11-25 11:52:09,357 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1103
[2020-11-25 11:52:09,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1103
[2020-11-25 11:52:09,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3979 states and 4609 transitions.
[2020-11-25 11:52:09,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:09,360 INFO  L728         BuchiCegarLoop]: Abstraction has 3979 states and 4609 transitions.
[2020-11-25 11:52:09,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3979 states and 4609 transitions.
[2020-11-25 11:52:09,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3979 to 3973.
[2020-11-25 11:52:09,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3973 states.
[2020-11-25 11:52:09,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3973 states to 3973 states and 4603 transitions.
[2020-11-25 11:52:09,393 INFO  L751         BuchiCegarLoop]: Abstraction has 3973 states and 4603 transitions.
[2020-11-25 11:52:09,393 INFO  L631         BuchiCegarLoop]: Abstraction has 3973 states and 4603 transitions.
[2020-11-25 11:52:09,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:52:09,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3973 states and 4603 transitions.
[2020-11-25 11:52:09,397 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:09,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:09,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:09,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:09,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND TRUE   choice == 14
[L6364]              gas := gas - 21000;
[L6365]  COND TRUE   gas >= 0
[L6366]              assume value_s290 >= 0 && value_s290 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6367]              assume msgvalue_MSG == 0;
[L6368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:09,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:09,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -1083475236, now seen corresponding path program 1 times
[2020-11-25 11:52:09,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:09,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:09,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:09,509 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:09,509 INFO  L82        PathProgramCache]: Analyzing trace with hash 1344231224, now seen corresponding path program 1 times
[2020-11-25 11:52:09,510 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:09,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:09,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:09,528 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:09,528 INFO  L82        PathProgramCache]: Analyzing trace with hash -1954667949, now seen corresponding path program 1 times
[2020-11-25 11:52:09,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:09,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:09,558 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #8: 4943 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 4943 to 9883
[2020-11-25 11:52:09,908 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 253
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 11:52:10,326 WARN  L188               SmtUtils]: Spent 402.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 203
[2020-11-25 11:52:11,015 WARN  L188               SmtUtils]: Spent 686.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 253
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.007s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.002s / 0.009s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 11:52:11,198 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 149
[2020-11-25 11:52:11,379 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification that was a NOOP. DAG size: 317
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 11:52:11,763 WARN  L188               SmtUtils]: Spent 374.00 ms on a formula simplification. DAG size of input: 254 DAG size of output: 254
[2020-11-25 11:52:11,932 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 254
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 11:52:12,048 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 143
[2020-11-25 11:52:12,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 11:52:12,622 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification. DAG size of input: 270 DAG size of output: 256
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 11:52:12,949 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 253
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 11:52:13,292 WARN  L188               SmtUtils]: Spent 331.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 203
[2020-11-25 11:52:13,793 WARN  L188               SmtUtils]: Spent 498.00 ms on a formula simplification. DAG size of input: 268 DAG size of output: 253
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 11:52:14,040 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 149
[2020-11-25 11:52:14,213 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 317
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 11:52:14,528 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 254 DAG size of output: 254
[2020-11-25 11:52:15,177 WARN  L188               SmtUtils]: Spent 646.00 ms on a formula simplification. DAG size of input: 387 DAG size of output: 380
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 11:52:15,648 WARN  L188               SmtUtils]: Spent 457.00 ms on a formula simplification. DAG size of input: 243 DAG size of output: 232
[2020-11-25 11:52:15,893 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification that was a NOOP. DAG size: 345
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 11:52:16,496 WARN  L188               SmtUtils]: Spent 569.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 232
[2020-11-25 11:52:16,904 WARN  L188               SmtUtils]: Spent 405.00 ms on a formula simplification. DAG size of input: 347 DAG size of output: 346
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 31699 to 63397
[2020-11-25 11:52:17,487 WARN  L188               SmtUtils]: Spent 561.00 ms on a formula simplification. DAG size of input: 361 DAG size of output: 341
[2020-11-25 11:52:17,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:17,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:17,532 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:52:17 BasicIcfg
[2020-11-25 11:52:17,532 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:52:17,533 INFO  L168              Benchmark]: Toolchain (without parser) took 17098.25 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 935.2 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,533 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,533 INFO  L168              Benchmark]: Boogie Preprocessor took 106.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,534 INFO  L168              Benchmark]: UtopiaSpecLang took 61.58 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,534 INFO  L168              Benchmark]: Boogie Printer took 18.71 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,535 INFO  L168              Benchmark]: RCFGBuilder took 987.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 908.4 MB in the beginning and 993.1 MB in the end (delta: -84.7 MB). Peak memory consumption was 195.3 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,535 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.80 ms. Allocated memory is still 1.1 GB. Free memory was 993.1 MB in the beginning and 986.3 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,535 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1688.82 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 169.9 MB). Free memory was 986.3 MB in the beginning and 935.9 MB in the end (delta: 50.4 MB). Peak memory consumption was 474.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,536 INFO  L168              Benchmark]: BlockEncodingV2 took 187.00 ms. Allocated memory is still 1.3 GB. Free memory was 935.9 MB in the beginning and 842.1 MB in the end (delta: 93.8 MB). Peak memory consumption was 93.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,536 INFO  L168              Benchmark]: BuchiAutomizer took 14007.51 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 842.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 11:52:17,538 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5920 locations, 11057 edges
  - StatisticsResult: Encoded RCFG
    5812 locations, 10762 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 106.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.58 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.71 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 987.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 908.4 MB in the beginning and 993.1 MB in the end (delta: -84.7 MB). Peak memory consumption was 195.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.80 ms. Allocated memory is still 1.1 GB. Free memory was 993.1 MB in the beginning and 986.3 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1688.82 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 169.9 MB). Free memory was 986.3 MB in the beginning and 935.9 MB in the end (delta: 50.4 MB). Peak memory consumption was 474.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 187.00 ms. Allocated memory is still 1.3 GB. Free memory was 935.9 MB in the beginning and 842.1 MB in the end (delta: 93.8 MB). Peak memory consumption was 93.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14007.51 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 842.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2281 locations, 3355 edges
  - StatisticsResult: BuchiProgram size
    5920 locations, 11057 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 3973 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.9s and 8 iterations.  TraceHistogramMax:6. Analysis of lassos took 9.2s. Construction of modules took 2.7s. BÃ¼chi inclusion checks took 1.1s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 1276 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4234 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30552 SDtfs, 13175 SDslu, 68708 SDs, 0 SdLazy, 38701 SolverSat, 3045 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1094563891) = (new CabGoldToken)({from : 1094563881});
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
ERC20(1094563891).approve~address~uint256.gas(3979002)({from : 1094563879, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);

Loop:
ERC20(1094563891).approve~address~uint256.gas(3979001)({from : 1094563876, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s290;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND TRUE   __exception
[L543]               __tmp__Balance := Balance;
[L544]               __tmp__DType := DType;
[L545]               __tmp__Alloc := Alloc;
[L546]               __tmp__balance_ADDR := balance_ADDR;
[L547]               __tmp__M_Ref_int := M_Ref_int;
[L548]               __tmp__sum__balances0 := sum__balances0;
[L549]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L550]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L551]               __tmp__sum__allowances1 := sum__allowances1;
[L552]               __tmp__M_Ref_bool := M_Ref_bool;
[L553]               __tmp__sum := sum;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp___balances_ERC20 := _balances_ERC20;
[L557]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L558]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L559]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L560]               __tmp___minters_MinterRole := _minters_MinterRole;
[L561]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L562]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L563]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L564]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L565]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L2901]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2902]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L3374]              __var_14 := null;
[L3375]  COND FALSE  !(!(owner_s563 != null))
[L3379]              __var_15 := null;
[L3380]  COND TRUE   !(spender_s563 != null)
[L3381]              revert := true;
[L2902]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s290, value_s290);
[L2903]  COND TRUE   revert
[L565]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);
[L566]               assume revert || gas < 0;
[L6368]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s290, value_s290);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
