This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:59:41,973 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:59:41,974 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:59:41,986 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:59:41,986 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:59:41,987 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:59:41,988 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:59:41,990 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:59:41,991 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:59:41,992 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:59:41,992 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:59:41,993 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:59:41,993 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:59:41,994 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:59:41,995 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:59:41,996 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:59:41,996 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:59:41,997 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:59:41,999 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:59:42,000 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:59:42,001 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:59:42,001 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:59:42,003 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:59:42,003 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:59:42,003 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:59:42,004 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:59:42,004 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:59:42,005 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:59:42,005 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:59:42,005 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:59:42,006 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:59:42,006 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:59:42,007 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:59:42,007 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:59:42,008 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:59:42,008 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:59:42,009 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:59:42,009 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:59:42,009 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:59:42,010 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:59:42,010 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:59:42,010 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:59:42,018 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:59:42,018 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:59:42,019 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:59:42,019 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:59:42,020 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:59:42,020 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:59:42,020 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:59:42,021 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:59:42,021 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:59:42,022 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:59:42,022 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:59:42,022 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:59:42,047 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:59:42,066 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:59:42,069 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:59:42,071 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:59:42,071 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:59:42,072 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl
[2020-11-25 11:59:42,072 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl'
[2020-11-25 11:59:42,153 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:59:42,154 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:59:42,155 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:59:42,155 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:59:42,155 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:59:42,171 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,173 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,210 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,211 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,234 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,244 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,252 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,261 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:59:42,262 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:59:42,262 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:59:42,264 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:59:42,268 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/1) ...
[2020-11-25 11:59:42,287 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(COINSTO.transfer(to, value), msg.sender == to && value <= balances_COINSTO[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][msg.sender] >= 0 &&  balances_COINSTO[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transfer(to, value), return == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this] == old(allowed_COINSTO[this]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 11:59:42,293 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(COINSTO.transfer(to, value), msg.sender == to && value <= balances_COINSTO[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][msg.sender] >= 0 &&  balances_COINSTO[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transfer(to, value), return == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this] == old(allowed_COINSTO[this]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 11:59:42,301 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(COINSTO.transfer(to, value), msg.sender == to && value <= balances_COINSTO[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][msg.sender] >= 0 &&  balances_COINSTO[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transfer(to, value), return == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this] == old(allowed_COINSTO[this]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 11:59:42,308 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s371 && tokens_s371<=balances_COINSTO[this][msg.sender] ) && tokens_s371>=0 ) && tokens_s371<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_COINSTO[this][to_s371]>=0 ) && balances_COINSTO[this][to_s371]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_COINSTO[this][msg.sender]>=0 ) && balances_COINSTO[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>],IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:59:42,310 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s371==true && _totalSupply_COINSTO[this]==( old(_totalSupply_COINSTO[this]) ) ) && balances_COINSTO[this]==( old(balances_COINSTO[this]) ) ) && allowed_COINSTO[this]==( old(allowed_COINSTO[this]) ) ) && symbol_COINSTO[this]==( old(symbol_COINSTO[this]) ) ) && name_COINSTO[this]==( old(name_COINSTO[this]) ) ) && decimals_COINSTO[this]==( old(decimals_COINSTO[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s371,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_COINSTO>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COINSTO>]]]]]]
[2020-11-25 11:59:42,315 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(COINSTO.transfer(to, value), msg.sender == to && value <= balances_COINSTO[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][msg.sender] >= 0 &&  balances_COINSTO[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transfer(to, value), return == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this] == old(allowed_COINSTO[this]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 11:59:42,315 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_COINSTO0) ==> ( <>AP(success_transfer_COINSTO0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:59:42,325 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:59:42 PropertyContainer
[2020-11-25 11:59:42,325 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:59:42,326 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:59:42,326 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:59:42,326 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:59:42,326 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/2) ...
[2020-11-25 11:59:42,327 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:59:42,327 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:59:42,342 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:59:42" (2/2) ...
[2020-11-25 11:59:42,342 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:59:42,342 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:59:42,342 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:59:42,342 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:59:42,343 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/2) ...
[2020-11-25 11:59:42,396 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:59:42,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:59:42,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:59:42,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:59:42,396 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 11:59:42,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 11:59:42,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 11:59:42,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 11:59:42,398 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 11:59:42,399 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 11:59:42,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO_NoBaseCtor__success
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO
[2020-11-25 11:59:42,400 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO
[2020-11-25 11:59:42,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO
[2020-11-25 11:59:42,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO
[2020-11-25 11:59:42,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_COINSTO__success
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO
[2020-11-25 11:59:42,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO
[2020-11-25 11:59:42,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO
[2020-11-25 11:59:42,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO
[2020-11-25 11:59:42,401 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO
[2020-11-25 11:59:42,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO
[2020-11-25 11:59:42,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:59:42,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_COINSTO
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:59:42,403 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,404 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 11:59:42,405 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 11:59:42,406 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO_NoBaseCtor__fail
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO__success
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO__fail
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO__success
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO__fail
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO__success
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO__fail
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO__success
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO__success
[2020-11-25 11:59:42,407 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO__success
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO__success
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO__success
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO__success
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,408 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO__success
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO__fail
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO__success
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO__fail
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO__success
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO__fail
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO__success
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO__fail
[2020-11-25 11:59:42,409 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:59:42,410 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:59:42,410 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:59:42,410 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:59:42,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 11:59:42,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 11:59:42,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO_NoBaseCtor__fail
[2020-11-25 11:59:42,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO_NoBaseCtor__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO__success
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO__fail
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO__fail
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_COINSTO__fail
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO__fail
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO__fail
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO__success
[2020-11-25 11:59:42,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:59:42,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_COINSTO
[2020-11-25 11:59:42,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:59:42,417 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:59:42,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:59:42,995 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:59:42,995 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:59:42,995 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:59:43,084 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:59:43,084 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 11:59:43,086 INFO  L202        PluginConnector]: Adding new model COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:59:43 BoogieIcfgContainer
[2020-11-25 11:59:43,086 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:59:42" (2/2) ...
[2020-11-25 11:59:43,086 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:59:43,087 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@74f2ad73 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:59:43, skipping insertion in model container
[2020-11-25 11:59:43,087 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:59:43,087 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:59:43,087 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:59:43,088 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:59:43,089 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/3) ...
[2020-11-25 11:59:43,089 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@fa9542f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:59:43, skipping insertion in model container
[2020-11-25 11:59:43,089 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:59:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:59:43,125 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:59:43 NWAContainer
[2020-11-25 11:59:43,125 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:59:43,125 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:59:43,125 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:59:43,126 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:59:43,127 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:59:43" (3/4) ...
[2020-11-25 11:59:43,127 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@15d0ab99 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:59:43, skipping insertion in model container
[2020-11-25 11:59:43,127 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:59:43" (4/4) ...
[2020-11-25 11:59:43,130 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:59:43,134 INFO  L110   BuchiProductObserver]: Initial RCFG 1563 locations, 1975 edges
[2020-11-25 11:59:43,134 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:59:43,145 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:59:44,448 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:59:44,453 INFO  L110   BuchiProductObserver]: BuchiProgram size 3718 locations, 6399 edges
[2020-11-25 11:59:44,453 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:59:44 BoogieIcfgContainer
[2020-11-25 11:59:44,453 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:59:44,454 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:59:44,454 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:59:44,455 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:59:44,455 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:59:44" (1/1) ...
[2020-11-25 11:59:44,532 INFO  L313           BlockEncoder]: Initial Icfg 3718 locations, 6399 edges
[2020-11-25 11:59:44,532 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:59:44,533 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:59:44,533 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:59:44,533 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:59:44,544 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 11:59:44,553 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 11:59:44,562 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:59:44,566 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:59:44,569 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:59:44,569 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:59:44,573 INFO  L313           BlockEncoder]: Encoded RCFG 3658 locations, 6239 edges
[2020-11-25 11:59:44,574 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:59:44 BasicIcfg
[2020-11-25 11:59:44,574 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:59:44,574 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:59:44,574 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:59:44,576 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:59:44,576 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,577 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:59:42" (1/6) ...
[2020-11-25 11:59:44,578 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2470562a and model type COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:59:44, skipping insertion in model container
[2020-11-25 11:59:44,578 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,578 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:59:42" (2/6) ...
[2020-11-25 11:59:44,578 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2470562a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:59:44, skipping insertion in model container
[2020-11-25 11:59:44,579 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,579 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:59:43" (3/6) ...
[2020-11-25 11:59:44,579 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2470562a and model type COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:59:44, skipping insertion in model container
[2020-11-25 11:59:44,579 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,579 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:59:43" (4/6) ...
[2020-11-25 11:59:44,579 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2470562a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:59:44, skipping insertion in model container
[2020-11-25 11:59:44,579 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,579 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:59:44" (5/6) ...
[2020-11-25 11:59:44,579 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2470562a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:59:44, skipping insertion in model container
[2020-11-25 11:59:44,579 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:59:44,579 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:59:44" (6/6) ...
[2020-11-25 11:59:44,580 INFO  L404   chiAutomizerObserver]: Analyzing ICFG COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transfer-self.bpl_BEv2
[2020-11-25 11:59:44,615 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:59:44,615 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:59:44,615 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:59:44,615 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:59:44,615 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:59:44,615 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:59:44,615 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:59:44,616 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:59:44,616 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:59:44,647 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 11:59:44,696 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:44,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:44,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:44,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:44,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:44,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:59:44,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 11:59:44,721 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:44,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:44,722 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:44,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:44,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:44,743 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:44,743 INFO  L82        PathProgramCache]: Analyzing trace with hash 1181213654, now seen corresponding path program 1 times
[2020-11-25 11:59:44,747 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:44,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:44,802 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:44,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:44,804 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:59:44,808 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:45,010 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:59:45,011 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:59:45,012 INFO  L87              Difference]: Start difference. First operand 3658 states. Second operand 4 states.
[2020-11-25 11:59:45,321 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:45,322 INFO  L93              Difference]: Finished difference Result 2514 states and 2743 transitions.
[2020-11-25 11:59:45,322 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:59:45,323 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2514 states and 2743 transitions.
[2020-11-25 11:59:45,337 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:45,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 11:59:45,357 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 11:59:45,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 11:59:45,360 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2514 states and 2743 transitions.
[2020-11-25 11:59:45,367 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:45,367 INFO  L728         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 11:59:45,384 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2514 states and 2743 transitions.
[2020-11-25 11:59:45,423 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2514 to 2514.
[2020-11-25 11:59:45,424 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2514 states.
[2020-11-25 11:59:45,430 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 11:59:45,431 INFO  L751         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 11:59:45,431 INFO  L631         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 11:59:45,431 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:59:45,431 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2514 states and 2743 transitions.
[2020-11-25 11:59:45,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:45,438 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:45,438 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:45,440 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:45,440 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:45,444 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:45,444 INFO  L82        PathProgramCache]: Analyzing trace with hash 1405947118, now seen corresponding path program 1 times
[2020-11-25 11:59:45,445 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:45,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:45,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:45,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:45,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:59:45,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:45,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:59:45,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:59:45,472 INFO  L87              Difference]: Start difference. First operand 2514 states and 2743 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 11:59:45,928 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:45,928 INFO  L93              Difference]: Finished difference Result 3734 states and 4235 transitions.
[2020-11-25 11:59:45,928 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:59:45,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3734 states and 4235 transitions.
[2020-11-25 11:59:45,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:59:45,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3734 states to 3614 states and 4107 transitions.
[2020-11-25 11:59:45,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 11:59:45,959 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 11:59:45,959 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3614 states and 4107 transitions.
[2020-11-25 11:59:45,964 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:45,964 INFO  L728         BuchiCegarLoop]: Abstraction has 3614 states and 4107 transitions.
[2020-11-25 11:59:45,967 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3614 states and 4107 transitions.
[2020-11-25 11:59:45,992 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3614 to 2550.
[2020-11-25 11:59:45,993 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2550 states.
[2020-11-25 11:59:45,995 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2550 states to 2550 states and 2735 transitions.
[2020-11-25 11:59:45,995 INFO  L751         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 11:59:45,995 INFO  L631         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 11:59:45,995 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:59:45,995 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2550 states and 2735 transitions.
[2020-11-25 11:59:46,000 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:46,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:46,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:46,002 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:46,002 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_COINSTO[this] := 799609355;
[L2235]              name_COINSTO[this] := 799609355;
[L2236]              decimals_COINSTO[this] := 0;
[L2237]              _totalSupply_COINSTO[this] := 0;
[L2238]              balances_COINSTO[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_COINSTO[this] := -880863315;
[L2244]              name_COINSTO[this] := 338186849;
[L2245]              decimals_COINSTO[this] := 8;
[L2246]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2248]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2250]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2287]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:46,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:46,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -857414988, now seen corresponding path program 1 times
[2020-11-25 11:59:46,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:46,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:46,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:46,107 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:46,107 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:59:46,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:46,108 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:59:46,108 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:59:46,108 INFO  L87              Difference]: Start difference. First operand 2550 states and 2735 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 11:59:46,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:46,900 INFO  L93              Difference]: Finished difference Result 2758 states and 2961 transitions.
[2020-11-25 11:59:46,901 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 11:59:46,901 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2758 states and 2961 transitions.
[2020-11-25 11:59:46,908 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:59:46,916 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2758 states to 2758 states and 2961 transitions.
[2020-11-25 11:59:46,916 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 11:59:46,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 11:59:46,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2758 states and 2961 transitions.
[2020-11-25 11:59:46,919 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:46,919 INFO  L728         BuchiCegarLoop]: Abstraction has 2758 states and 2961 transitions.
[2020-11-25 11:59:46,922 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2758 states and 2961 transitions.
[2020-11-25 11:59:46,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2758 to 2606.
[2020-11-25 11:59:46,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2606 states.
[2020-11-25 11:59:46,947 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2606 states to 2606 states and 2799 transitions.
[2020-11-25 11:59:46,947 INFO  L751         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 11:59:46,947 INFO  L631         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 11:59:46,947 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:59:46,947 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2606 states and 2799 transitions.
[2020-11-25 11:59:46,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:46,952 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:46,952 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:46,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:46,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_COINSTO[this] := 799609355;
[L2235]              name_COINSTO[this] := 799609355;
[L2236]              decimals_COINSTO[this] := 0;
[L2237]              _totalSupply_COINSTO[this] := 0;
[L2238]              balances_COINSTO[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_COINSTO[this] := -880863315;
[L2244]              name_COINSTO[this] := 338186849;
[L2245]              decimals_COINSTO[this] := 8;
[L2246]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2248]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2250]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2287]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2364]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == COINSTO
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2375]              balances_COINSTO[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2364]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == COINSTO
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2375]              balances_COINSTO[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:46,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:46,958 INFO  L82        PathProgramCache]: Analyzing trace with hash 533720192, now seen corresponding path program 1 times
[2020-11-25 11:59:46,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:47,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:48,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:48,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:48,014 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 11:59:48,015 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:48,015 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 11:59:48,015 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=640, Unknown=0, NotChecked=0, Total=702
[2020-11-25 11:59:48,015 INFO  L87              Difference]: Start difference. First operand 2606 states and 2799 transitions. cyclomatic complexity: 195 Second operand 27 states.
[2020-11-25 11:59:55,447 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:55,447 INFO  L93              Difference]: Finished difference Result 2685 states and 2904 transitions.
[2020-11-25 11:59:55,447 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 11:59:55,447 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2685 states and 2904 transitions.
[2020-11-25 11:59:55,452 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:59:55,459 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2685 states to 2685 states and 2904 transitions.
[2020-11-25 11:59:55,459 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 11:59:55,459 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 11:59:55,459 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2685 states and 2904 transitions.
[2020-11-25 11:59:55,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:55,461 INFO  L728         BuchiCegarLoop]: Abstraction has 2685 states and 2904 transitions.
[2020-11-25 11:59:55,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2685 states and 2904 transitions.
[2020-11-25 11:59:55,480 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2685 to 2670.
[2020-11-25 11:59:55,480 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2670 states.
[2020-11-25 11:59:55,483 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2670 states to 2670 states and 2873 transitions.
[2020-11-25 11:59:55,483 INFO  L751         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 11:59:55,483 INFO  L631         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 11:59:55,483 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:59:55,483 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2670 states and 2873 transitions.
[2020-11-25 11:59:55,486 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:59:55,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:55,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:55,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:55,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_COINSTO[this] := 799609355;
[L2235]              name_COINSTO[this] := 799609355;
[L2236]              decimals_COINSTO[this] := 0;
[L2237]              _totalSupply_COINSTO[this] := 0;
[L2238]              balances_COINSTO[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_COINSTO[this] := -880863315;
[L2244]              name_COINSTO[this] := 338186849;
[L2245]              decimals_COINSTO[this] := 8;
[L2246]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2248]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2250]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2287]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][msgsender_MSG];
[L2334]              __tmp__balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == COINSTO
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][msgsender_MSG];
[L2334]              __tmp__balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == COINSTO
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:55,492 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:55,492 INFO  L82        PathProgramCache]: Analyzing trace with hash 1433681192, now seen corresponding path program 1 times
[2020-11-25 11:59:55,492 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:55,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:55,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:55,622 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:55,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 11:59:55,622 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:55,622 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 11:59:55,622 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=418, Unknown=0, NotChecked=0, Total=462
[2020-11-25 11:59:55,622 INFO  L87              Difference]: Start difference. First operand 2670 states and 2873 transitions. cyclomatic complexity: 207 Second operand 22 states.
[2020-11-25 11:59:59,076 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:59,076 INFO  L93              Difference]: Finished difference Result 2828 states and 3072 transitions.
[2020-11-25 11:59:59,076 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 11:59:59,077 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2828 states and 3072 transitions.
[2020-11-25 11:59:59,082 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:59:59,088 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2828 states to 2828 states and 3072 transitions.
[2020-11-25 11:59:59,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 992
[2020-11-25 11:59:59,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 992
[2020-11-25 11:59:59,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2828 states and 3072 transitions.
[2020-11-25 11:59:59,091 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:59,091 INFO  L728         BuchiCegarLoop]: Abstraction has 2828 states and 3072 transitions.
[2020-11-25 11:59:59,093 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2828 states and 3072 transitions.
[2020-11-25 11:59:59,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2828 to 2676.
[2020-11-25 11:59:59,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2676 states.
[2020-11-25 11:59:59,111 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2676 states to 2676 states and 2880 transitions.
[2020-11-25 11:59:59,111 INFO  L751         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 11:59:59,111 INFO  L631         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 11:59:59,111 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:59:59,111 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2676 states and 2880 transitions.
[2020-11-25 11:59:59,114 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:59:59,114 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:59,114 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:59,115 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:59,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_COINSTO[this] := 799609355;
[L2235]              name_COINSTO[this] := 799609355;
[L2236]              decimals_COINSTO[this] := 0;
[L2237]              _totalSupply_COINSTO[this] := 0;
[L2238]              balances_COINSTO[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_COINSTO[this] := -880863315;
[L2244]              name_COINSTO[this] := 338186849;
[L2245]              decimals_COINSTO[this] := 8;
[L2246]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2248]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2250]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2287]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][msgsender_MSG];
[L2334]              __tmp__balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == COINSTO
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND FALSE  !(!(c_s23 >= a_s23))
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L2338]  COND FALSE  !(revert)
[L2344]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][to_s371];
[L2345]              __tmp__balances_COINSTO[this][to_s371] := __var_4;
[L2346]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][to_s371];
[L2347]              success_s371 := true;
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_COINSTO := symbol_COINSTO;
[L949]               __tmp__name_COINSTO := name_COINSTO;
[L950]               __tmp__decimals_COINSTO := decimals_COINSTO;
[L951]               __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L952]               __tmp__balances_COINSTO := balances_COINSTO;
[L953]               __tmp__allowed_COINSTO := allowed_COINSTO;
[L954]   CALL        call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == COINSTO
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][msgsender_MSG];
[L2334]              __tmp__balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == COINSTO
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND FALSE  !(!(c_s23 >= a_s23))
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s371], tokens_s371);
[L2338]  COND FALSE  !(revert)
[L2344]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][to_s371];
[L2345]              __tmp__balances_COINSTO[this][to_s371] := __var_4;
[L2346]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][to_s371];
[L2347]              success_s371 := true;
[L954]   RET         call success_s371 := transfer~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:59,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:59,118 INFO  L82        PathProgramCache]: Analyzing trace with hash 1962245744, now seen corresponding path program 1 times
[2020-11-25 11:59:59,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:59,125 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:59:59,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:59:59,148 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:59:59,148 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:59:59,148 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:59:59,148 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:59:59,148 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:59:59,148 INFO  L87              Difference]: Start difference. First operand 2676 states and 2880 transitions. cyclomatic complexity: 208 Second operand 6 states.
[2020-11-25 11:59:59,483 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:59:59,483 INFO  L93              Difference]: Finished difference Result 3468 states and 3829 transitions.
[2020-11-25 11:59:59,483 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 11:59:59,483 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3468 states and 3829 transitions.
[2020-11-25 11:59:59,490 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 11:59:59,497 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3468 states to 2659 states and 3017 transitions.
[2020-11-25 11:59:59,497 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 747
[2020-11-25 11:59:59,498 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 747
[2020-11-25 11:59:59,498 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2659 states and 3017 transitions.
[2020-11-25 11:59:59,500 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:59:59,500 INFO  L728         BuchiCegarLoop]: Abstraction has 2659 states and 3017 transitions.
[2020-11-25 11:59:59,502 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2659 states and 3017 transitions.
[2020-11-25 11:59:59,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2659 to 1905.
[2020-11-25 11:59:59,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1905 states.
[2020-11-25 11:59:59,515 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1905 states to 1905 states and 2058 transitions.
[2020-11-25 11:59:59,515 INFO  L751         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 11:59:59,515 INFO  L631         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 11:59:59,515 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:59:59,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1905 states and 2058 transitions.
[2020-11-25 11:59:59,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:59:59,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:59:59,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:59:59,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:59:59,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COINSTO0 := false;
[L2]                 call_transfer_COINSTO0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == COINSTO;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_COINSTO[this] := 799609355;
[L2235]              name_COINSTO[this] := 799609355;
[L2236]              decimals_COINSTO[this] := 0;
[L2237]              _totalSupply_COINSTO[this] := 0;
[L2238]              balances_COINSTO[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_COINSTO[this] := -880863315;
[L2244]              name_COINSTO[this] := 338186849;
[L2245]              decimals_COINSTO[this] := 8;
[L2246]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2248]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2250]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2287]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2364]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == COINSTO
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2375]              balances_COINSTO[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_COINSTO[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s371] >= 0) && balances_COINSTO[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][msgsender_MSG] >= 0) && balances_COINSTO[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COINSTO0 := true;
[L2]                 call_transfer_COINSTO0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == COINSTO
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2364]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == COINSTO
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2375]              balances_COINSTO[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this] == old(allowed_COINSTO[this])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4260]  CALL        call CorralChoice_COINSTO(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != COINSTO;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 11:59:59,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:59:59,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 1669133647, now seen corresponding path program 1 times
[2020-11-25 11:59:59,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:59:59,565 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 12:14:40,826 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 12:14:40,827 INFO  L168              Benchmark]: Toolchain (without parser) took 898673.36 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 3.5 GB in the end (delta: -2.5 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,828 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,828 INFO  L168              Benchmark]: Boogie Preprocessor took 106.53 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,828 INFO  L168              Benchmark]: UtopiaSpecLang took 63.73 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,829 INFO  L168              Benchmark]: Boogie Printer took 16.49 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,829 INFO  L168              Benchmark]: RCFGBuilder took 744.53 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,829 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.99 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,831 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1328.22 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 224.4 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -239.8 MB). Peak memory consumption was 182.0 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,832 INFO  L168              Benchmark]: BlockEncodingV2 took 120.20 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 973.3 MB in the end (delta: 58.6 MB). Peak memory consumption was 58.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,833 INFO  L168              Benchmark]: BuchiAutomizer took 896252.73 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 973.3 MB in the beginning and 3.5 GB in the end (delta: -2.5 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 12:14:40,840 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3718 locations, 6399 edges
  - StatisticsResult: Encoded RCFG
    3658 locations, 6239 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 106.53 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.73 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.49 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 744.53 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.99 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1328.22 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 224.4 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -239.8 MB). Peak memory consumption was 182.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 120.20 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 973.3 MB in the end (delta: 58.6 MB). Peak memory consumption was 58.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896252.73 ms. Allocated memory was 1.3 GB in the beginning and 6.5 GB in the end (delta: 5.2 GB). Free memory was 973.3 MB in the beginning and 3.5 GB in the end (delta: -2.5 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1563 locations, 1975 edges
  - StatisticsResult: BuchiProgram size
    3718 locations, 6399 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
