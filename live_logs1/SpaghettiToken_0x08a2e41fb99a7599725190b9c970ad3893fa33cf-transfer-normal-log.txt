This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 04:15:06,655 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 04:15:06,657 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 04:15:06,668 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 04:15:06,668 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 04:15:06,669 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 04:15:06,670 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 04:15:06,671 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 04:15:06,673 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 04:15:06,673 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 04:15:06,674 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 04:15:06,674 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 04:15:06,675 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 04:15:06,676 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 04:15:06,676 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 04:15:06,677 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 04:15:06,678 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 04:15:06,679 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 04:15:06,680 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 04:15:06,682 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 04:15:06,683 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 04:15:06,683 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 04:15:06,685 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 04:15:06,685 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 04:15:06,685 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 04:15:06,686 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 04:15:06,686 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 04:15:06,687 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 04:15:06,687 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 04:15:06,687 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 04:15:06,688 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 04:15:06,688 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 04:15:06,688 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 04:15:06,689 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 04:15:06,690 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 04:15:06,690 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 04:15:06,690 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 04:15:06,691 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 04:15:06,691 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 04:15:06,692 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 04:15:06,692 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 04:15:06,692 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 04:15:06,701 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 04:15:06,701 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 04:15:06,702 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 04:15:06,702 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 04:15:06,702 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 04:15:06,702 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 04:15:06,702 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 04:15:06,702 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:06,702 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 04:15:06,703 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 04:15:06,703 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 04:15:06,703 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 04:15:06,703 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 04:15:06,703 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 04:15:06,703 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 04:15:06,703 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 04:15:06,704 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 04:15:06,704 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 04:15:06,705 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 04:15:06,705 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 04:15:06,728 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 04:15:06,739 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 04:15:06,742 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 04:15:06,743 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 04:15:06,743 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 04:15:06,744 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl
[2020-11-25 04:15:06,744 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl'
[2020-11-25 04:15:06,809 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 04:15:06,810 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 04:15:06,811 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 04:15:06,811 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 04:15:06,811 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 04:15:06,827 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,828 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,853 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,854 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,870 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,877 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,881 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,887 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 04:15:06,888 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 04:15:06,888 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 04:15:06,890 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 04:15:06,893 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/1) ...
[2020-11-25 04:15:06,906 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_SpaghettiToken[this][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && balanceOf_SpaghettiToken[this][msg.sender] == old(balanceOf_SpaghettiToken[this][msg.sender]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:06,912 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_SpaghettiToken[this][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && balanceOf_SpaghettiToken[this][msg.sender] == old(balanceOf_SpaghettiToken[this][msg.sender]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:06,920 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_SpaghettiToken[this][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && balanceOf_SpaghettiToken[this][msg.sender] == old(balanceOf_SpaghettiToken[this][msg.sender]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:06,925 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=dst_s194 ) && msg.sender!=dst_s194 ) && wad_s194<=balanceOf_SpaghettiToken[this][msg.sender] ) && ( balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && wad_s194>=0 ) && wad_s194<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][dst_s194]>=0 ) && balanceOf_SpaghettiToken[this][dst_s194]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][msg.sender]>=0 ) && balanceOf_SpaghettiToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 04:15:06,928 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && balanceOf_SpaghettiToken[this][msg.sender]==( ( old(balanceOf_SpaghettiToken[this][msg.sender]) ) - wad_s194 ) ) && balanceOf_SpaghettiToken[this][dst_s194]==( ( old(balanceOf_SpaghettiToken[this][dst_s194]) ) + wad_s194 ) ) && totalSupply_SpaghettiToken[this]==( old(totalSupply_SpaghettiToken[this]) ) ) && allowance_SpaghettiToken[this]==( old(allowance_SpaghettiToken[this]) ) ) && balanceOf_SpaghettiToken[this][p1]==( old(balanceOf_SpaghettiToken[this][p1]) ) ) && symbol_SpaghettiToken[this]==( old(symbol_SpaghettiToken[this]) ) ) && decimals_SpaghettiToken[this]==( old(decimals_SpaghettiToken[this]) ) ) && name_SpaghettiToken[this]==( old(name_SpaghettiToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_SpaghettiToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s194,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiToken>]]]]]]
[2020-11-25 04:15:06,932 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_SpaghettiToken[this][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][msg.sender] >= 0 &&  balanceOf_SpaghettiToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transfer(to, value), return == true && balanceOf_SpaghettiToken[this][msg.sender] == old(balanceOf_SpaghettiToken[this][msg.sender]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:15:06,932 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_SpaghettiToken0) ==> ( <>AP(success_transfer_SpaghettiToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 04:15:06,938 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:06 PropertyContainer
[2020-11-25 04:15:06,938 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 04:15:06,938 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 04:15:06,938 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 04:15:06,938 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 04:15:06,939 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/2) ...
[2020-11-25 04:15:06,939 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 04:15:06,939 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 04:15:06,948 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:06" (2/2) ...
[2020-11-25 04:15:06,948 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 04:15:06,948 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 04:15:06,948 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 04:15:06,948 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 04:15:06,949 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/2) ...
[2020-11-25 04:15:07,000 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 04:15:07,000 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:07,000 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 04:15:07,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,002 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:15:07,002 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 04:15:07,003 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:07,004 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:07,005 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__success
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:07,006 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 04:15:07,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 04:15:07,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 04:15:07,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:15:07,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:15:07,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:15:07,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__fail
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__success
[2020-11-25 04:15:07,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 04:15:07,010 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 04:15:07,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 04:15:07,178 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:07,417 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:07,417 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:07,417 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:15:07,510 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 04:15:07,510 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 04:15:07,512 INFO  L202        PluginConnector]: Adding new model SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:07 BoogieIcfgContainer
[2020-11-25 04:15:07,512 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:06" (2/2) ...
[2020-11-25 04:15:07,512 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 04:15:07,513 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@68e229e5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:07, skipping insertion in model container
[2020-11-25 04:15:07,513 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 04:15:07,513 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:07,513 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 04:15:07,515 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 04:15:07,515 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/3) ...
[2020-11-25 04:15:07,515 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4c671d16 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:07, skipping insertion in model container
[2020-11-25 04:15:07,515 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:06" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 04:15:07,552 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:07 NWAContainer
[2020-11-25 04:15:07,552 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 04:15:07,553 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:07,553 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 04:15:07,554 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 04:15:07,554 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:07" (3/4) ...
[2020-11-25 04:15:07,555 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5f6c78be and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:07, skipping insertion in model container
[2020-11-25 04:15:07,555 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:07" (4/4) ...
[2020-11-25 04:15:07,559 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 04:15:07,561 INFO  L110   BuchiProductObserver]: Initial RCFG 745 locations, 935 edges
[2020-11-25 04:15:07,561 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 04:15:07,571 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 04:15:08,515 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 04:15:08,518 INFO  L110   BuchiProductObserver]: BuchiProgram size 1778 locations, 3019 edges
[2020-11-25 04:15:08,518 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:08 BoogieIcfgContainer
[2020-11-25 04:15:08,518 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 04:15:08,518 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 04:15:08,518 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 04:15:08,520 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 04:15:08,521 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:08" (1/1) ...
[2020-11-25 04:15:08,564 INFO  L313           BlockEncoder]: Initial Icfg 1778 locations, 3019 edges
[2020-11-25 04:15:08,564 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 04:15:08,565 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 04:15:08,565 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 04:15:08,565 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 04:15:08,572 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 7 locations because of local infeasibility
[2020-11-25 04:15:08,576 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 04:15:08,582 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 04:15:08,584 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 04:15:08,586 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 04:15:08,586 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 04:15:08,589 INFO  L313           BlockEncoder]: Encoded RCFG 1740 locations, 2916 edges
[2020-11-25 04:15:08,589 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:08 BasicIcfg
[2020-11-25 04:15:08,589 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 04:15:08,589 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 04:15:08,589 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 04:15:08,591 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 04:15:08,591 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,591 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:15:06" (1/6) ...
[2020-11-25 04:15:08,593 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5f42d5f7 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:08, skipping insertion in model container
[2020-11-25 04:15:08,593 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,593 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:15:06" (2/6) ...
[2020-11-25 04:15:08,593 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5f42d5f7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:08, skipping insertion in model container
[2020-11-25 04:15:08,593 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,593 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:15:07" (3/6) ...
[2020-11-25 04:15:08,593 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5f42d5f7 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:15:08, skipping insertion in model container
[2020-11-25 04:15:08,593 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,594 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:15:07" (4/6) ...
[2020-11-25 04:15:08,594 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5f42d5f7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:15:08, skipping insertion in model container
[2020-11-25 04:15:08,594 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,594 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:15:08" (5/6) ...
[2020-11-25 04:15:08,594 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5f42d5f7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:15:08, skipping insertion in model container
[2020-11-25 04:15:08,594 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:15:08,594 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:15:08" (6/6) ...
[2020-11-25 04:15:08,595 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transfer-normal.bpl_BEv2
[2020-11-25 04:15:08,628 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 04:15:08,628 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 04:15:08,629 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 04:15:08,629 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 04:15:08,629 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 04:15:08,629 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 04:15:08,629 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 04:15:08,629 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 04:15:08,629 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 04:15:08,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1740 states.
[2020-11-25 04:15:08,676 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:08,676 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:08,676 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:08,682 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:08,682 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:08,682 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 04:15:08,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1740 states.
[2020-11-25 04:15:08,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:08,693 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:08,693 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:08,697 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:08,697 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:08,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:08,718 INFO  L82        PathProgramCache]: Analyzing trace with hash 1542146022, now seen corresponding path program 1 times
[2020-11-25 04:15:08,722 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:08,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:08,789 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:08,791 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:08,791 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:08,795 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:08,889 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:08,889 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:08,891 INFO  L87              Difference]: Start difference. First operand 1740 states. Second operand 4 states.
[2020-11-25 04:15:09,144 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:09,145 INFO  L93              Difference]: Finished difference Result 1380 states and 1525 transitions.
[2020-11-25 04:15:09,145 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:09,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1380 states and 1525 transitions.
[2020-11-25 04:15:09,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:09,171 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1380 states to 1380 states and 1525 transitions.
[2020-11-25 04:15:09,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 04:15:09,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 424
[2020-11-25 04:15:09,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1380 states and 1525 transitions.
[2020-11-25 04:15:09,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:09,181 INFO  L728         BuchiCegarLoop]: Abstraction has 1380 states and 1525 transitions.
[2020-11-25 04:15:09,198 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1380 states and 1525 transitions.
[2020-11-25 04:15:09,231 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1380 to 1380.
[2020-11-25 04:15:09,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1380 states.
[2020-11-25 04:15:09,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1380 states to 1380 states and 1525 transitions.
[2020-11-25 04:15:09,236 INFO  L751         BuchiCegarLoop]: Abstraction has 1380 states and 1525 transitions.
[2020-11-25 04:15:09,236 INFO  L631         BuchiCegarLoop]: Abstraction has 1380 states and 1525 transitions.
[2020-11-25 04:15:09,236 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 04:15:09,237 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1380 states and 1525 transitions.
[2020-11-25 04:15:09,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:09,242 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:09,242 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:09,244 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:09,244 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1269]              revert := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND TRUE   revert
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1269]              revert := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND TRUE   revert
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:09,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:09,249 INFO  L82        PathProgramCache]: Analyzing trace with hash 2046202584, now seen corresponding path program 1 times
[2020-11-25 04:15:09,250 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:09,262 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:09,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:09,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:09,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:09,288 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:09,288 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:09,288 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:09,288 INFO  L87              Difference]: Start difference. First operand 1380 states and 1525 transitions. cyclomatic complexity: 147 Second operand 4 states.
[2020-11-25 04:15:09,609 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:09,610 INFO  L93              Difference]: Finished difference Result 1998 states and 2277 transitions.
[2020-11-25 04:15:09,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:09,610 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1998 states and 2277 transitions.
[2020-11-25 04:15:09,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 04:15:09,637 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1998 states to 1934 states and 2201 transitions.
[2020-11-25 04:15:09,637 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 04:15:09,638 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 599
[2020-11-25 04:15:09,638 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1934 states and 2201 transitions.
[2020-11-25 04:15:09,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:09,643 INFO  L728         BuchiCegarLoop]: Abstraction has 1934 states and 2201 transitions.
[2020-11-25 04:15:09,645 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1934 states and 2201 transitions.
[2020-11-25 04:15:09,664 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1934 to 1416.
[2020-11-25 04:15:09,664 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1416 states.
[2020-11-25 04:15:09,667 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1416 states to 1416 states and 1523 transitions.
[2020-11-25 04:15:09,668 INFO  L751         BuchiCegarLoop]: Abstraction has 1416 states and 1523 transitions.
[2020-11-25 04:15:09,668 INFO  L631         BuchiCegarLoop]: Abstraction has 1416 states and 1523 transitions.
[2020-11-25 04:15:09,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 04:15:09,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1416 states and 1523 transitions.
[2020-11-25 04:15:09,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:09,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:09,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:09,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:09,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:09,678 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:09,678 INFO  L82        PathProgramCache]: Analyzing trace with hash -361636598, now seen corresponding path program 1 times
[2020-11-25 04:15:09,679 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:09,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:09,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:09,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:09,731 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 04:15:09,732 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:09,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 04:15:09,732 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 04:15:09,732 INFO  L87              Difference]: Start difference. First operand 1416 states and 1523 transitions. cyclomatic complexity: 109 Second operand 3 states.
[2020-11-25 04:15:09,762 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:09,763 INFO  L93              Difference]: Finished difference Result 1492 states and 1617 transitions.
[2020-11-25 04:15:09,763 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 04:15:09,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1492 states and 1617 transitions.
[2020-11-25 04:15:09,770 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:09,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1492 states to 1492 states and 1617 transitions.
[2020-11-25 04:15:09,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 462
[2020-11-25 04:15:09,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 462
[2020-11-25 04:15:09,778 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1492 states and 1617 transitions.
[2020-11-25 04:15:09,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:09,780 INFO  L728         BuchiCegarLoop]: Abstraction has 1492 states and 1617 transitions.
[2020-11-25 04:15:09,782 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1492 states and 1617 transitions.
[2020-11-25 04:15:09,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1492 to 1488.
[2020-11-25 04:15:09,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1488 states.
[2020-11-25 04:15:09,801 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1488 states to 1488 states and 1613 transitions.
[2020-11-25 04:15:09,801 INFO  L751         BuchiCegarLoop]: Abstraction has 1488 states and 1613 transitions.
[2020-11-25 04:15:09,801 INFO  L631         BuchiCegarLoop]: Abstraction has 1488 states and 1613 transitions.
[2020-11-25 04:15:09,801 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 04:15:09,801 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1488 states and 1613 transitions.
[2020-11-25 04:15:09,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:09,806 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:09,806 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:09,808 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:09,808 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:09,811 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:09,811 INFO  L82        PathProgramCache]: Analyzing trace with hash 432570663, now seen corresponding path program 1 times
[2020-11-25 04:15:09,812 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:09,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:09,883 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:09,884 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:09,884 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:15:09,884 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:09,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:15:09,885 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:15:09,885 INFO  L87              Difference]: Start difference. First operand 1488 states and 1613 transitions. cyclomatic complexity: 127 Second operand 7 states.
[2020-11-25 04:15:10,466 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:10,466 INFO  L93              Difference]: Finished difference Result 1654 states and 1800 transitions.
[2020-11-25 04:15:10,467 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 04:15:10,467 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1654 states and 1800 transitions.
[2020-11-25 04:15:10,476 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:10,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1654 states to 1654 states and 1800 transitions.
[2020-11-25 04:15:10,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 519
[2020-11-25 04:15:10,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 519
[2020-11-25 04:15:10,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1654 states and 1800 transitions.
[2020-11-25 04:15:10,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:10,488 INFO  L728         BuchiCegarLoop]: Abstraction has 1654 states and 1800 transitions.
[2020-11-25 04:15:10,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1654 states and 1800 transitions.
[2020-11-25 04:15:10,510 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1654 to 1548.
[2020-11-25 04:15:10,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1548 states.
[2020-11-25 04:15:10,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1548 states to 1548 states and 1679 transitions.
[2020-11-25 04:15:10,514 INFO  L751         BuchiCegarLoop]: Abstraction has 1548 states and 1679 transitions.
[2020-11-25 04:15:10,514 INFO  L631         BuchiCegarLoop]: Abstraction has 1548 states and 1679 transitions.
[2020-11-25 04:15:10,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 04:15:10,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1548 states and 1679 transitions.
[2020-11-25 04:15:10,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:10,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:10,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:10,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:10,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:10,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:10,525 INFO  L82        PathProgramCache]: Analyzing trace with hash -901065661, now seen corresponding path program 1 times
[2020-11-25 04:15:10,526 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:10,543 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:10,599 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:10,599 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:10,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 04:15:10,600 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:10,600 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 04:15:10,600 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 04:15:10,600 INFO  L87              Difference]: Start difference. First operand 1548 states and 1679 transitions. cyclomatic complexity: 133 Second operand 8 states.
[2020-11-25 04:15:10,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:10,682 INFO  L93              Difference]: Finished difference Result 1580 states and 1712 transitions.
[2020-11-25 04:15:10,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 04:15:10,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1580 states and 1712 transitions.
[2020-11-25 04:15:10,686 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:10,690 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1580 states to 1560 states and 1691 transitions.
[2020-11-25 04:15:10,691 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 477
[2020-11-25 04:15:10,691 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 477
[2020-11-25 04:15:10,691 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1560 states and 1691 transitions.
[2020-11-25 04:15:10,692 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:10,692 INFO  L728         BuchiCegarLoop]: Abstraction has 1560 states and 1691 transitions.
[2020-11-25 04:15:10,693 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1560 states and 1691 transitions.
[2020-11-25 04:15:10,704 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1560 to 1546.
[2020-11-25 04:15:10,704 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1546 states.
[2020-11-25 04:15:10,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1546 states to 1546 states and 1677 transitions.
[2020-11-25 04:15:10,705 INFO  L751         BuchiCegarLoop]: Abstraction has 1546 states and 1677 transitions.
[2020-11-25 04:15:10,705 INFO  L631         BuchiCegarLoop]: Abstraction has 1546 states and 1677 transitions.
[2020-11-25 04:15:10,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 04:15:10,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1546 states and 1677 transitions.
[2020-11-25 04:15:10,708 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:15:10,708 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:10,708 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:10,709 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:10,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:10,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:10,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 1838433411, now seen corresponding path program 1 times
[2020-11-25 04:15:10,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:10,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:10,978 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 04:15:10,978 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:10,978 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 04:15:10,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:10,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 04:15:10,979 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=502, Unknown=0, NotChecked=0, Total=552
[2020-11-25 04:15:10,979 INFO  L87              Difference]: Start difference. First operand 1546 states and 1677 transitions. cyclomatic complexity: 133 Second operand 24 states.
[2020-11-25 04:15:13,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:13,575 INFO  L93              Difference]: Finished difference Result 1708 states and 1894 transitions.
[2020-11-25 04:15:13,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 04:15:13,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1708 states and 1894 transitions.
[2020-11-25 04:15:13,580 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:15:13,585 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1708 states to 1708 states and 1894 transitions.
[2020-11-25 04:15:13,585 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 540
[2020-11-25 04:15:13,585 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 540
[2020-11-25 04:15:13,585 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1708 states and 1894 transitions.
[2020-11-25 04:15:13,587 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:13,587 INFO  L728         BuchiCegarLoop]: Abstraction has 1708 states and 1894 transitions.
[2020-11-25 04:15:13,588 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1708 states and 1894 transitions.
[2020-11-25 04:15:13,601 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1708 to 1610.
[2020-11-25 04:15:13,601 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1610 states.
[2020-11-25 04:15:13,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1610 states to 1610 states and 1757 transitions.
[2020-11-25 04:15:13,602 INFO  L751         BuchiCegarLoop]: Abstraction has 1610 states and 1757 transitions.
[2020-11-25 04:15:13,602 INFO  L631         BuchiCegarLoop]: Abstraction has 1610 states and 1757 transitions.
[2020-11-25 04:15:13,603 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 04:15:13,603 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1610 states and 1757 transitions.
[2020-11-25 04:15:13,605 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:13,605 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:13,605 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:13,606 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:13,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND TRUE   revert
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND TRUE   revert
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:13,608 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:13,608 INFO  L82        PathProgramCache]: Analyzing trace with hash -1756640975, now seen corresponding path program 1 times
[2020-11-25 04:15:13,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:13,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:13,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 04:15:13,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:13,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:15:13,654 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:15:13,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:15:13,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:15:13,654 INFO  L87              Difference]: Start difference. First operand 1610 states and 1757 transitions. cyclomatic complexity: 151 Second operand 7 states.
[2020-11-25 04:15:13,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:13,721 INFO  L93              Difference]: Finished difference Result 1654 states and 1806 transitions.
[2020-11-25 04:15:13,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:15:13,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1654 states and 1806 transitions.
[2020-11-25 04:15:13,725 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:13,729 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1654 states to 1654 states and 1806 transitions.
[2020-11-25 04:15:13,729 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 520
[2020-11-25 04:15:13,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 520
[2020-11-25 04:15:13,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1654 states and 1806 transitions.
[2020-11-25 04:15:13,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:13,731 INFO  L728         BuchiCegarLoop]: Abstraction has 1654 states and 1806 transitions.
[2020-11-25 04:15:13,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1654 states and 1806 transitions.
[2020-11-25 04:15:13,743 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1654 to 1619.
[2020-11-25 04:15:13,743 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1619 states.
[2020-11-25 04:15:13,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1619 states to 1619 states and 1767 transitions.
[2020-11-25 04:15:13,745 INFO  L751         BuchiCegarLoop]: Abstraction has 1619 states and 1767 transitions.
[2020-11-25 04:15:13,745 INFO  L631         BuchiCegarLoop]: Abstraction has 1619 states and 1767 transitions.
[2020-11-25 04:15:13,745 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 04:15:13,745 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1619 states and 1767 transitions.
[2020-11-25 04:15:13,747 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:13,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:13,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:13,748 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:13,748 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND FALSE  !(revert)
[L1184]              __ret_0_ := __var_3;
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:13,750 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:13,750 INFO  L82        PathProgramCache]: Analyzing trace with hash 926672120, now seen corresponding path program 1 times
[2020-11-25 04:15:13,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:13,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:13,813 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:13,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:13,874 INFO  L82        PathProgramCache]: Analyzing trace with hash 1986614833, now seen corresponding path program 1 times
[2020-11-25 04:15:13,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:13,877 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:13,881 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:15:13,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:13,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:15:13,882 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 04:15:13,882 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:15:13,882 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:15:13,882 INFO  L87              Difference]: Start difference. First operand 1619 states and 1767 transitions. cyclomatic complexity: 152 Second operand 4 states.
[2020-11-25 04:15:14,012 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:14,013 INFO  L93              Difference]: Finished difference Result 1714 states and 1879 transitions.
[2020-11-25 04:15:14,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:15:14,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1714 states and 1879 transitions.
[2020-11-25 04:15:14,020 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 04:15:14,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1714 states to 1714 states and 1879 transitions.
[2020-11-25 04:15:14,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 516
[2020-11-25 04:15:14,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 516
[2020-11-25 04:15:14,027 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1714 states and 1879 transitions.
[2020-11-25 04:15:14,029 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:14,029 INFO  L728         BuchiCegarLoop]: Abstraction has 1714 states and 1879 transitions.
[2020-11-25 04:15:14,030 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1714 states and 1879 transitions.
[2020-11-25 04:15:14,048 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1714 to 1619.
[2020-11-25 04:15:14,048 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1619 states.
[2020-11-25 04:15:14,050 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1619 states to 1619 states and 1747 transitions.
[2020-11-25 04:15:14,050 INFO  L751         BuchiCegarLoop]: Abstraction has 1619 states and 1747 transitions.
[2020-11-25 04:15:14,050 INFO  L631         BuchiCegarLoop]: Abstraction has 1619 states and 1747 transitions.
[2020-11-25 04:15:14,050 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 04:15:14,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1619 states and 1747 transitions.
[2020-11-25 04:15:14,054 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:14,054 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:14,054 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:14,056 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:14,056 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND FALSE  !(revert)
[L1184]              __ret_0_ := __var_3;
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND TRUE   __exception
[L307]               __tmp__Balance := Balance;
[L308]               __tmp__DType := DType;
[L309]               __tmp__Alloc := Alloc;
[L310]               __tmp__balance_ADDR := balance_ADDR;
[L311]               __tmp__M_Ref_int := M_Ref_int;
[L312]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L313]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L314]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L315]               __tmp__sum_allowance1 := sum_allowance1;
[L316]               __tmp__Length := Length;
[L317]               __tmp__now := now;
[L318]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L319]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L320]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L321]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L322]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L323]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L324]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1169]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND FALSE  !(revert)
[L1340]              __tmp__totalSupply_SpaghettiToken[this] := __var_8;
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND FALSE  !(revert)
[L1254]              __ret_0_ := true;
[L1169]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1170]  COND FALSE  !(revert)
[L1173]              __ret_0_ := __var_3;
[L324]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L325]               assume revert || gas < 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:14,060 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:14,061 INFO  L82        PathProgramCache]: Analyzing trace with hash 926672120, now seen corresponding path program 2 times
[2020-11-25 04:15:14,061 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:14,125 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:14,195 INFO  L82        PathProgramCache]: Analyzing trace with hash -1434395836, now seen corresponding path program 1 times
[2020-11-25 04:15:14,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:14,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:15:14,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 04:15:14,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:15:14,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 04:15:14,223 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 04:15:14,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 04:15:14,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 04:15:14,223 INFO  L87              Difference]: Start difference. First operand 1619 states and 1747 transitions. cyclomatic complexity: 132 Second operand 5 states.
[2020-11-25 04:15:14,339 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:15:14,339 INFO  L93              Difference]: Finished difference Result 1875 states and 2062 transitions.
[2020-11-25 04:15:14,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 04:15:14,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1875 states and 2062 transitions.
[2020-11-25 04:15:14,343 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 04:15:14,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1875 states to 1364 states and 1546 transitions.
[2020-11-25 04:15:14,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 359
[2020-11-25 04:15:14,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 359
[2020-11-25 04:15:14,347 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1364 states and 1546 transitions.
[2020-11-25 04:15:14,349 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:15:14,349 INFO  L728         BuchiCegarLoop]: Abstraction has 1364 states and 1546 transitions.
[2020-11-25 04:15:14,349 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1364 states and 1546 transitions.
[2020-11-25 04:15:14,358 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1364 to 1114.
[2020-11-25 04:15:14,358 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1114 states.
[2020-11-25 04:15:14,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1114 states to 1114 states and 1217 transitions.
[2020-11-25 04:15:14,359 INFO  L751         BuchiCegarLoop]: Abstraction has 1114 states and 1217 transitions.
[2020-11-25 04:15:14,359 INFO  L631         BuchiCegarLoop]: Abstraction has 1114 states and 1217 transitions.
[2020-11-25 04:15:14,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 04:15:14,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1114 states and 1217 transitions.
[2020-11-25 04:15:14,361 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:15:14,361 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:15:14,361 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:15:14,362 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:15:14,362 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_SpaghettiToken0 := false;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND FALSE  !(revert)
[L1184]              __ret_0_ := __var_3;
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND FALSE  !(choice == 1)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:15:14,364 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:14,364 INFO  L82        PathProgramCache]: Analyzing trace with hash 926672120, now seen corresponding path program 3 times
[2020-11-25 04:15:14,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:14,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,435 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:14,435 INFO  L82        PathProgramCache]: Analyzing trace with hash -782085473, now seen corresponding path program 1 times
[2020-11-25 04:15:14,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:14,437 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:15:14,441 INFO  L82        PathProgramCache]: Analyzing trace with hash 103429768, now seen corresponding path program 1 times
[2020-11-25 04:15:14,441 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:15:14,485 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:14,509 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2503 to 5003
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 04:15:15,278 WARN  L188               SmtUtils]: Spent 330.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 164
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 04:15:15,450 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 79
[2020-11-25 04:15:15,574 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 111
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 04:15:15,844 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 103
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 04:15:16,178 WARN  L188               SmtUtils]: Spent 278.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 161
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #8: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 04:15:16,841 WARN  L188               SmtUtils]: Spent 644.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 115
[2020-11-25 04:15:17,333 WARN  L188               SmtUtils]: Spent 491.00 ms on a formula simplification. DAG size of input: 254 DAG size of output: 225
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
[2020-11-25 04:15:17,475 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 207
[2020-11-25 04:15:17,803 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 237
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 04:15:18,183 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 287
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 04:15:18,336 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification that was a NOOP. DAG size: 229
[2020-11-25 04:15:20,251 WARN  L188               SmtUtils]: Spent 1.91 s on a formula simplification. DAG size of input: 398 DAG size of output: 390
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 04:15:20,401 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 191
[2020-11-25 04:15:21,402 WARN  L188               SmtUtils]: Spent 991.00 ms on a formula simplification that was a NOOP. DAG size: 263
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 04:15:22,705 WARN  L188               SmtUtils]: Spent 1.30 s on a formula simplification that was a NOOP. DAG size: 191
[2020-11-25 04:15:24,106 WARN  L188               SmtUtils]: Spent 1.40 s on a formula simplification. DAG size of input: 265 DAG size of output: 264
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 04:15:24,744 WARN  L188               SmtUtils]: Spent 634.00 ms on a formula simplification that was a NOOP. DAG size: 260
[2020-11-25 04:15:24,767 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:15:24,773 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:15:24 BasicIcfg
[2020-11-25 04:15:24,773 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 04:15:24,773 INFO  L168              Benchmark]: Toolchain (without parser) took 17963.66 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 940.6 MB in the beginning and 1.7 GB in the end (delta: -803.9 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,774 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,774 INFO  L168              Benchmark]: Boogie Preprocessor took 76.68 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,774 INFO  L168              Benchmark]: UtopiaSpecLang took 49.96 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,775 INFO  L168              Benchmark]: Boogie Printer took 9.94 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,775 INFO  L168              Benchmark]: RCFGBuilder took 564.73 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 876.1 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,776 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.51 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 867.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,776 INFO  L168              Benchmark]: BÃ¼chi Program Product took 965.57 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 867.2 MB in the beginning and 907.4 MB in the end (delta: -40.2 MB). Peak memory consumption was 151.6 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,776 INFO  L168              Benchmark]: BlockEncodingV2 took 70.59 ms. Allocated memory is still 1.1 GB. Free memory was 907.4 MB in the beginning and 873.7 MB in the end (delta: 33.7 MB). Peak memory consumption was 33.7 MB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,776 INFO  L168              Benchmark]: BuchiAutomizer took 16183.84 ms. Allocated memory was 1.1 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 873.7 MB in the beginning and 1.7 GB in the end (delta: -870.7 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 04:15:24,779 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1778 locations, 3019 edges
  - StatisticsResult: Encoded RCFG
    1740 locations, 2916 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 76.68 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.96 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.94 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 564.73 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 876.1 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.51 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 867.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 965.57 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 867.2 MB in the beginning and 907.4 MB in the end (delta: -40.2 MB). Peak memory consumption was 151.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 70.59 ms. Allocated memory is still 1.1 GB. Free memory was 907.4 MB in the beginning and 873.7 MB in the end (delta: 33.7 MB). Peak memory consumption was 33.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 16183.84 ms. Allocated memory was 1.1 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 873.7 MB in the beginning and 1.7 GB in the end (delta: -870.7 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    745 locations, 935 edges
  - StatisticsResult: BuchiProgram size
    1778 locations, 3019 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 24 locations. The remainder module has 1114 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 16.1s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 11.3s. Construction of modules took 3.1s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 9 MinimizatonAttempts, 1120 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1619 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 13684 SDtfs, 12048 SDslu, 35915 SDs, 0 SdLazy, 25828 SolverSat, 2232 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI2 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639945) = (new SpaghettiToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639936, chef : 115792089237316195423570985008687907853269984665640564039457584007913129639940});
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
SpaghettiToken(115792089237316195423570985008687907853269984665640564039457584007913129639945).transfer~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639940, dst : 115792089237316195423570985008687907853269984665640564039457584007913129639941, wad : 100});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != dst_s194) && msgsender_MSG != dst_s194) && wad_s194 <= balanceOf_SpaghettiToken[this][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s194] + wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s194 >= 0) && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s194] >= 0) && balanceOf_SpaghettiToken[this][dst_s194] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_SpaghettiToken0 := true;
[L3]                 call_transfer_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND FALSE  !(revert)
[L1184]              __ret_0_ := __var_3;
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][msgsender_MSG] == old(balanceOf_SpaghettiToken[this][msgsender_MSG]) - wad_s194) && balanceOf_SpaghettiToken[this][dst_s194] == old(balanceOf_SpaghettiToken[this][dst_s194]) + wad_s194) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && allowance_SpaghettiToken[this] == old(allowance_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
